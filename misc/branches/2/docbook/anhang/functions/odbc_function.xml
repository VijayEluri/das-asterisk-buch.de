<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
<section id="functions-odbc_function" lang="de" revision="$Revision: 1074 $">
  <!--
% Copyright (c) 2006 - 2008 by 
% Stefan Wintermeyer <stefan.wintermeyer@amooma.de>
% Philipp Kempgen <philipp.kempgen@amooma.de>
% Permission is granted to copy, distribute and/or modify this document
% under the terms of the GNU Free Documentation License, Version 1.2
% or any later version published by the Free Software Foundation
% with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
% Texts. A copy of the license is included in the section entitled "GNU
% Free Documentation License".
% Asterisk training and consulting is offered at http://www.amooma.de
-->

  <title><literal>ODBC_<replaceable>funktionsname</replaceable>()</literal><indexterm
      significance="preferred">
      <primary>Dialplan-Funktionen</primary>

      <secondary><code>ODBC_<replaceable>*</replaceable>()</code></secondary>
    </indexterm></title>

  <synopsis>ODBC_<replaceable>funktionsname</replaceable>(<replaceable>arg1</replaceable>[,<replaceable>arg2</replaceable>[,<replaceable>...</replaceable>]]])</synopsis>

  <important>
    <para>Diese Funktionsbeschreibung dient als Platzhalter für eigene, vom
    Anwender in der Datei <filename>func_odbc.conf</filename> definierte
    <literal>ODBC_<replaceable>...</replaceable>()</literal>-Funktionen.</para>
  </important>

  <simpara>In der Asterisk-Konfigurationsdatei
  <filename>func_odbc.conf</filename> können eigene Funktionen zum Lesen aus
  einer und zum Schreiben in eine ODBC<footnote>
      <para><ulink
      url="http://de.wikipedia.org/wiki/ODBC">http://de.wikipedia.org/wiki/ODBC</ulink></para>
    </footnote>-Datenbank definiert werden. Diese Funktionen stehen dann im
  Dialplan als normale Funktionen zur Verfügung.</simpara>

  <sidebar>
    <para>Dies ist keine allgemeine ODBC<indexterm>
        <primary>ODBC</primary>
      </indexterm>-Anleitung. Trotzdem sei kurz gesagt, wie man es auf Debian
    installieren würde. Um Asterisk mit ODBC-Unterstützung zu kompilieren,
    braucht man selbstverständlich die Header-Dateien
    (<literal>unixodbc-dev</literal>). Wir gehen davon aus, dass Sie Asterisk
    bereits kompiliert haben und jetzt noch ODBC<footnote>
        <para>Genauer gesagt: unixODBC, <ulink
        url="http://www.unixodbc.org/">http://www.unixodbc.org/</ulink>,
        <ulink
        url="http://packages.debian.org/stable/unixodbc">http://packages.debian.org/stable/unixodbc</ulink></para>
      </footnote> nachinstallieren:<screen>debian:~# <emphasis role="bold"><command>aptitude install unixodbc</command></emphasis></screen></para>

    <para>Danach installieren Sie noch den Treiber für die zu verwendende
    Datenbank-Software: <literal>libmyodbc</literal> für MySQL,
    <literal>odbc-postgresql</literal> für PostgreSQL,
    <literal>libsqliteodbc</literal> für SQLite, <literal>libmdbodbc</literal>
    für MS Access (MDB), <literal>tdsodbc</literal> für FreeTDS usw.:<screen>debian:~# <emphasis role="bold"><command>aptitude install libmyodbc</command></emphasis></screen></para>

    <bridgehead id="func_odbc-odbcinst.ini">/etc/odbcinst.ini</bridgehead>

    <para>Erster Schritt: Registrieren Sie den MySQL-ODBC-Treiber in der Datei
    <emphasis role="bold"><filename>/etc/odbcinst.ini</filename></emphasis>.
    Auf Debian-Systemen geschieht dies unter Umständen automatisch bei der
    Installation von <literal>libmyodbc</literal>. Bitte sehen Sie in der
    Datei nach, ob der Eintrag bereits vorhanden ist.<footnote>
        <para>Alternative Methode zum Abfragen der registrierten Treiber:
        <literal><command>odbcinst -q -d</command></literal></para>
      </footnote> Ansonsten lässt es sich folgendermaßen nachholen:</para>

    <screen>debian:~# <emphasis role="bold"><command>odbcinst -i -d -f /usr/share/libmyodbc/odbcinst.ini</command></emphasis></screen>

    <para>Die Datei sollte danach etwa folgendermaßen
    aussehen:<programlisting>[MySQL]
Description   = MySQL driver
Driver        = /usr/lib/odbc/libmyodbc.so
Setup         = /usr/lib/odbc/libodbcmyS.so
CPTimeout     = 
CPReuse       = 
UsageCount    = 1</programlisting></para>

    <bridgehead id="func_odbc-odbc.ini">/etc/odbc.ini</bridgehead>

    <para>In der Datei <emphasis
    role="bold"><filename>/etc/odbc.ini</filename></emphasis> werden die
    einzelnen Datenquellen bzw. Datenbank-Verbindungen eingetragen. Dabei
    erhält jede Datenquelle einen <quote>DSN</quote> (Data Source Name). Hier
    ein Beispiel<footnote>
        <para>Für weitere Beispiele siehe
        <filename>/usr/share/doc/libmyodbc/examples/odbc.ini</filename></para>
      </footnote><footnote>
        <para>Spezifische Optionen für den MySQL-ODBC-Treiber MyODBC können
        Sie unter <ulink
        url="http://dev.mysql.com/doc/refman/5.1/de/myodbc-configuration-connection-parameters.html">http://dev.mysql.com/doc/refman/5.1/de/myodbc-configuration-connection-parameters.html</ulink>
        nachlesen.</para>
      </footnote>:<programlisting>[ODBC Data Sources]

meine_db_verbindung = Meine VoIP-Datenbank

[meine_db_verbindung]
Driver       = MySQL
Description  = Meine VoIP-Datenbank
Server       = localhost
Port         =
User         = root
Password     =
Database     = meine_asterisk_db
Option       = 3
Socket       = 
ReadOnly     = No</programlisting></para>

    <para>Wir gehen hier davon aus, dass Sie selbstständig in der Lage sind,
    die Datenbank <literal>meine_asterisk_db</literal> auf dem MySQL-Server
    anzulegen, entsprechende Benutzerrechte zu definieren und Tabellen
    anzulegen.<footnote>
        <para>Weitere Informationen zu MyODBC-Datentypen: <ulink
        url="http://dev.mysql.com/doc/refman/5.1/de/myodbc-reference-datatypes.html">http://dev.mysql.com/doc/refman/5.1/de/myodbc-reference-datatypes.html</ulink>,
        Fehlercodes: <ulink
        url="http://dev.mysql.com/doc/refman/5.1/de/myodbc-reference-errorcodes.html">http://dev.mysql.com/doc/refman/5.1/de/myodbc-reference-errorcodes.html</ulink></para>
      </footnote></para>

    <bridgehead id="func_odbc-isql">isql</bridgehead>

    <para>Bitte prüfen Sie auf der Shell mit dem Tool <emphasis
    role="bold"><command>isql</command></emphasis>, dass die Verbindung
    funktioniert:<screen>gemeinschaft:~# <emphasis role="bold"><command>isql meine_db_verbindung -v</command></emphasis>
+---------------------------------------+
| Connected!                            |
|                                       |
| sql-statement                         |
| help [tablename]                      |
| quit                                  |
|                                       |
+---------------------------------------+
SQL&gt; </screen></para>
  </sidebar>

  <bridgehead
  id="func_odbc-res_odbc.conf">/etc/asterisk/res_odbc.conf</bridgehead>

  <para>Für Asterisk muss diese Datenquelle in der <emphasis
  role="bold"><filename>/etc/asterisk/res_odbc.conf</filename></emphasis><indexterm>
      <primary>res_odbc.conf</primary>
    </indexterm> eingetragen werden:<programlisting>[meine_db_verbindung]
dsn =&gt; meine_db_verbindung
;username =&gt; myuser
;password =&gt; mypass
pre-connect =&gt; yes
enabled =&gt; yes</programlisting></para>

  <para><parameter>pre-connect</parameter> besagt, dass die Verbindung zu
  dieser Datenbank schon aufgebaut wird, bevor sie von einer Funktion benötigt
  wird.</para>

  <para>Nach einem Neustart von Asterisk wird diese Datenquelle auf dem
  Asterisk-CLI angezeigt:<screen>*CLI&gt; <emphasis role="bold"><command>odbc show</command></emphasis> 
Name: meine_db_verbindung
DSN: meine_db_verbindung
Pooled: no
Connected: yes</screen></para>

  <bridgehead
  id="func_odbc-func_odbc.conf">/etc/asterisk/func_odbc.conf</bridgehead>

  <para>Die einzelnen ODBC-Funktionen für Asterisk werden in der <emphasis
  role="bold"><filename>/etc/asterisk/func_odbc.conf</filename></emphasis><indexterm>
      <primary>func_odbc.conf</primary>
    </indexterm> definiert. Jeder Abschnitt definiert eine eigene Funktion.
  Funktionsnamen bestehen in Asterisk normalerweise immer aus Großbuchstaben.
  Hier hat man die Wahl, das entweder so zu übernehmen oder Kleinbuchstaben zu
  verwenden. Beachten Sie dabei, dass im Dialplan bei den Funktionsnamen
  zwischen Groß- und Kleinschreibung unterschieden wird.</para>

  <para>Eine mit <literal>[BEISPIEL]</literal> definierte Funktion würde im
  Dialplan als <literal>ODBC_BEISPIEL()</literal> aufgerufen. Wer will, kann
  durch Angabe von <literal>prefix=<replaceable>XYZ</replaceable></literal>
  auch ein anderes Präfix verwenden. Im Dialplan hieße die Funktion dann
  <literal>XYZ_BEISPIEL()</literal>.</para>

  <para>Für jede Funktion zwingend notwendig ist die Angabe des ODBC-DSN mit
  dem Parameter <literal>dsn=<replaceable>Datenquelle</replaceable></literal>.
  Mit <literal>read=<replaceable>SQL-Abfrage</replaceable></literal> kann man
  die SQL-Abfrage zum Lesen angeben (ab Asterisk 1.6:
  <literal>readsql</literal>), mit
  <literal>write=<replaceable>SQL-Befehl</replaceable></literal> den
  SQL-Befehl zum Schreiben (ab Asterisk 1.6:
  <literal>writesql</literal>).</para>

  <note>
    <para>In Asterisk 1.4 sollte man für <literal>read</literal> nur solche
    Abfragen verwenden, die nicht mehr als eine Ergebniszeile zurückliefern,
    denn auf die weiteren kann im Dialplan nicht zugegriffen werden. Ab
    Asterisk 1.6 gibt es den optionalen Parameter
    <literal>mode=multirow</literal>, siehe <xref
    linkend="functions-odbc_fetch" />.</para>
  </note>

  <bridgehead id="func_odbc-anti-exfreundin">Beispiel, um Anrufe von
  Exfreundinnen nicht durchzustellen:</bridgehead>

  <para>MySQL-Tabelle:<programlisting>CREATE TABLE `exfreundinnen` (
 `callerid` varchar(20) character set ascii NOT NULL,
 `vorname`  varchar(50) collate utf8_unicode_ci NOT NULL,
 `nachname` varchar(50) collate utf8_unicode_ci NOT NULL,
 UNIQUE KEY `callerid` (`callerid`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;</programlisting></para>

  <para><filename>func_odbc.conf</filename>:<programlisting>[ANTI_EXFREUNDIN]
dsn = meine_db_verbindung
read = SELECT COUNT(*) FROM `exfreundinnen` WHERE `callerid`='${SQL_ESC(${ARG1})}'</programlisting></para>

  <para>Die Argumente des Aufrufs im Dialplan werden hier als
  <code>${ARG1}</code>, <code>${ARG2}</code> usw. übergeben. Dabei ist es
  wichtig, Argumente (vor allem Strings) immer in einfachen Anführungszeichen
  zu schreiben und wie im Beispiel mit <code>SQL_ESC()</code> (<xref
  linkend="functions-sql_esc" />) zu maskieren.</para>

  <para>Die obige Funktion zum Lesen (<literal>read</literal>) würde im
  Dialplan folgendermaßen aufgerufen:<programlisting>20 =&gt; {
    // Lesen:
    <emphasis role="bold">Set(ARRAY(anz)=${ODBC_ANTI_EXFREUNDIN(${CALLERID(num)})})</emphasis>;
    Verbose(1,### ODBC-Ergebnis: ${anz});
    if ("${anz}" != "0") {
        Busy(5);
    }
    else {
        Dial(SIP/xyz);
    }
    Hangup();
}</programlisting></para>

  <bridgehead id="func_odbc-inverssuche">Beispiel für eine Rückwärtssuche aus
  einer Kontaktliste:</bridgehead>

  <para>MySQL-Tabelle:<programlisting>CREATE TABLE `kontakte` (
 `telnr`    varchar(20) character set ascii NOT NULL,
 `vorname`  varchar(50) collate utf8_unicode_ci NOT NULL,
 `nachname` varchar(50) collate utf8_unicode_ci NOT NULL,
 UNIQUE KEY `telnr` (`telnr`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;</programlisting></para>

  <para><filename>func_odbc.conf</filename>:<programlisting>[RUECKWAERTSSUCHE]
dsn = meine_db_verbindung
read = SELECT `vorname`, `nachname` FROM `kontakte` WHERE `telnr`='${SQL_ESC(${ARG1})}'</programlisting></para>

  <para>Dialplan:<programlisting>_X. =&gt; {
    // Lesen:
    <emphasis role="bold">Set(ARRAY(vn,nn)=${ODBC_RUECKWAERTSSUCHE(${CALLERID(num)})})</emphasis>;
    Verbose(1,### ODBC-Ergebnis: ${vn}\,${nn});
    Set(CALLERID(name)=${vn} ${nn});
    Dial(SIP/${EXTEN});
    Hangup();
}</programlisting></para>

  <tip>
    <para>Ab Asterisk 1.6 bietet es sich bei den
    <literal>ODBC_<replaceable>*</replaceable></literal>-Funktionen an, statt
    mit <literal>ARRAY()</literal> mit <literal>HASH()</literal> (<xref
    linkend="functions-hash" />) zu arbeiten. Beispiel:<programlisting>Set(HASH(kontakt)=${ODBC_RUECKWAERTSSUCHE(${CALLERID(num)})});
Verbose(1,### Vorname  : ${HASH(kontakt,vorname)});
Verbose(1,### Nachname : ${HASH(kontakt,nachname)});</programlisting></para>
  </tip>

  <bridgehead id="func_odbc-dnd">Beispiel für eine Nicht-Stören-Funktion
  (DND):</bridgehead>

  <para>MySQL-Tabelle:<programlisting>CREATE TABLE `dndstates` (
 `extension` varchar(4) character set ascii NOT NULL,
 `dnd`       tinyint(1) unsigned NOT NULL default '0',
 `modified`  int(10) unsigned NOT NULL default '0',
 PRIMARY KEY  (`extension`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;</programlisting></para>

  <para><filename>func_odbc.conf</filename>:<programlisting>[DND]
dsn = meine_db_verbindung
read = SELECT `dnd`, `modified` FROM `dndstates` WHERE `extension`='${SQL_ESC(${ARG1})}'
write = REPLACE INTO `dndstates` SET `extension`='${SQL_ESC(${ARG1})}', `dnd`='${SQL_ESC(${VAL1})}', `modified`='${SQL_ESC(${VAL2})}'</programlisting></para>

  <para>Dialplan:<programlisting>// DND aktivieren/deaktivieren
_*2[01] =&gt; {
    Set(an_aus=${EXTEN:2:1});
    Set(nst=${CALLERID(num)});
    if (${LEN(${nst})} &lt; 5) {
        Verbose(1,### Setze DND fuer Nst. ${nst} auf ${an_aus});
        <emphasis role="bold">// Schreiben:</emphasis>
        <emphasis role="bold">Set(ODBC_DND(${nst})=${an_aus}\,${EPOCH})</emphasis>;
    }
    Hangup();
}

// Nst. anrufen
_X. =&gt; {
    <emphasis role="bold">// Lesen:</emphasis>
    <emphasis role="bold">Set(ARRAY(dnd,modified)=${ODBC_DND(${EXTEN})})</emphasis>;
    if ("${dnd}" = "1") {
        Verbose(1,### DND fuer Nst. ${EXTEN} ist aktiviert seit ${STRFTIME(${modified},Europe/Berlin,%c)});
        Busy(5);
    }
    else {
        Verbose(1,### DND fuer Nst. ${EXTEN} ist nicht aktiviert);
        Dial(SIP/${nst});
    }
    Hangup();
}</programlisting></para>

  <important>
    <para>Bitte beachten Sie, dass &#8211; wie im Beispiel oben gezeigt &#8211;
    beim Schreiben von mehreren Werten diese durch
    <quote><literal>\,</literal></quote> getrennt werden müssen.</para>
  </important>

  <bridgehead id="func_odbc-sql">Beispiel für beliebige
  SQL-Befehle:</bridgehead>

  <para>Ein Spezialfall, der sich in der <filename>func_odbc.conf</filename>
  definieren lässt, ist folgendes Konstrukt:<programlisting>[SQL]
dsn = meine_db_verbindung
read = ${ARG1}
write = ${ARG1}</programlisting></para>

  <para>Damit können vom Dialplan aus beliebige SQL-Befehle ausgeführt werden,
  ohne dass sie vorher in der <filename>func_odbc.conf</filename> festgelegt
  wurden. Dabei ist natürlich zu beachten, dass das Maskieren von
  Sonderzeichen mit <literal>SQL_ESC()</literal> dann im Dialplan erfolgen
  muss. Das obige Beispiel zur Rückwärtssuche ließe sich also auch so
  realisieren:</para>

  <para>Dialplan:<programlisting>_X. =&gt; {
    // Lesen:
    <emphasis role="bold">Set(ARRAY(vn,nn)=${ODBC_SQL(SELECT `vorname`\, `nachname` FROM `kontakte` WHERE `telnr`='${SQL_ESC(${CALLERID(num)})}')});</emphasis>;
    Verbose(1,### ODBC-Ergebnis: ${vn} ${nn});
    Set(CALLERID(name)=${vn} ${nn});
    Dial(SIP/${EXTEN});
    Hangup();
}</programlisting></para>

  <important>
    <para>Bitte beachten Sie, dass alle Kommas
    (<quote><literal>,</literal></quote>) im SQL-Befehl maskiert werden
    müssen, also als <quote><literal>\,</literal></quote> geschrieben
    werden.</para>
  </important>

  <important>
    <para>Die unten angegebenen Asterisk-Versionen und der interne Hilfetext
    sind nur ein Beispiel. Dieser Hilfetext würde von Asterisk für jede selbst
    definierte ODBC-Funktion ausgegeben.</para>
  </important>

  <xi:include href="odbc_function-help.xml" xpointer="xpointer(/note/*)"
              xmlns:xi="http://www.w3.org/2001/XInclude" />

  <formalpara>
    <title>Siehe auch</title>

    <para><xref linkend="functions-odbc_sql" />, <xref
    linkend="functions-odbc_fetch" />, <xref linkend="functions-sql_esc" />,
    <xref linkend="functions-hash" />, <xref
    linkend="functions-array" /></para>
  </formalpara>
</section>
