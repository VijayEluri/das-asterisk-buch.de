<?xml version="1.0" encoding="ISO-8859-1"?>
<chapter id="asterisk-fernsteuern" lang="de" revision="$Revision: 1.9 $">
  <!--% Copyright (c) 2007
% - Stefan Wintermeyer <sw@amooma.de>
% Permission is granted to copy, distribute and/or modify this document
% under the terms of the GNU Free Documentation License, Version 1.2
% or any later version published by the Free Software Foundation;
% with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
% Texts. A copy of the license is included in the section entitled "GNU
% Free Documentation License".
% Asterisk training and consulting is offered at http://www.amooma.de -->

  <title>Asterisk fernsteuern<indexterm>
      <primary>Fernsteuern</primary>
    </indexterm></title>

  <para>Es gibt verschiedene Möglichkeiten eine Asterisk-Telefonanlage von
  extern (also z.B. von anderen Programmen) aus zu steuern.</para>

  <section id="asterisk-rx">
    <title>asterisk -rx "<replaceable>Befehl</replaceable>"<indexterm>
        <primary>asterisk -rx</primary>
      </indexterm></title>

    <para>Die einfachste Möglichkeit mit Asterisk von außen zu kommunizieren
    ist der Aufruf des Programmes <command>asterisk</command> mit den
    Parametern <parameter>-rx</parameter> und danach dem CLI-Befehl. So kann
    man jeden beliebigen CLI-Befehl von der Shell aus ausführen.</para>

    <section id="asterisk-rx-beispiel">
      <title>Beispiel</title>

      <para>Wenn man sich den Dialplan für die Extension
      <parameter>23</parameter> im Context
      <parameter>[meine-telefone]</parameter> anschauen will, kann man dies
      mit der Eingabe <command>asterisk -rx "show dialplan
      23@meine-telefone"</command> erreichen:<screen>root@molokai:~&gt;asterisk -rx "show dialplan 23@meine-telefone"
[ Context 'meine-telefone' created by 'pbx_config' ]
  '23' =&gt;           1. Wait(1)                                    [pbx_config]
                    2. Answer()                                   [pbx_config]
                    3. Playback(hello-world)                      [pbx_config]
                    4. Wait(1)                                    [pbx_config]
                    5. Hangup()                                   [pbx_config]

-= 1 extension (5 priorities) in 1 context. =-
root@molokai:~&gt;</screen></para>
    </section>
  </section>

  <section id="call-file">
    <title>Call Files<indexterm>
        <primary>Call Files</primary>
      </indexterm></title>

    <para>Call Files lassen sich am ehesten mit Batch-Dateien vergleichen. Sie
    werden ins Verzeichnis <filename>/var/spool/asterisk/outgoing/</filename>
    verschoben und dort dann von Asterisk abgearbeitet.<important>
        <para>Ein <command>mv</command> (move) ist im Dateisystem ein atomarer
        Vorgang und deshalb für Call Files ideal geeignet. Bei einem
        <command>cp</command> (copy) wird dagegen die Datei Zeile für Zeile
        kopiert. Es kann also vorkommen, das ein halbfertig kopiertes Call
        File von Asterisk bereits abgearbeitet wird.</para>
      </important></para>

    <para>Der ganze Mechanismus lässt sich anhand eines Beispiels besser
    erklären. Nehmen wir an, dass an einer Asterisk-Anlage ein SIP-Telefon mit
    der Nummer 2000 angemeldet ist. Weiterhin haben wir im Dialplan die
    folgende Extension eingetragen:<programlisting>[call-file-test]
exten =&gt; 10,1,Answer()
exten =&gt; 10,n,Wait(1)
exten =&gt; 10,n,Playback(hello-world)
exten =&gt; 10,n,Wait(1)
exten =&gt; 10,n,Hangup()</programlisting></para>

    <para>Jetzt generieren wir im Verzeichnis <filename>/tmp/</filename> die
    Datei <filename>ein-test.call</filename> mit folgendem
    Inhalt:<programlisting>Channel: SIP/2000
MaxRetries: 2
RetryTime: 60
WaitTime: 30
Context: call-file-test
Extension: 10</programlisting></para>

    <para>Danach verschieben wir diese Datei mit <command>mv
    /tmp/ein-test.call /var/spool/asterisk/outgoing/</command><screen>root@molokai:~&gt;mv /tmp/ein-test.call /var/spool/asterisk/outgoing/</screen></para>

    <para>Jetzt passiert folgendes:</para>

    <itemizedlist>
      <listitem>
        <simpara>Asterisk überprüft ständig, ob sich im Verzeichnis
        <filename>/var/spool/asterisk/outgoing/</filename> ein Call-File
        befindet, und arbeitet dieses ab, sobald es da ist.</simpara>
      </listitem>

      <listitem>
        <simpara>Asterisk öffnet eine Verbindung zum Telefon
        <code>SIP/2000</code>. Wenn das Telefon besetzt sein oder nicht
        rangehen sollte, dann versucht Asterisk das gleiche noch zwei Mal
        (siehe <parameter>MaxRetries</parameter>).</simpara>
      </listitem>

      <listitem>
        <simpara>Geht der Benutzer des Telefons 2000 ran, dann startet
        Asterisk im Context <parameter>[call-file-test]</parameter> die
        Abarbeitung der Extension <code>10</code>. Es wird also der
        Sprachbaustein <filename>hello-world</filename> abgespielt.</simpara>
      </listitem>
    </itemizedlist>

    <section id="call-file-parameter">
      <title>Parameter</title>

      <para>Im Call File können folgende Parameter angegeben
      werden:<variablelist termlength="23">
          <varlistentry>
            <term><code>Channel: &lt;channel&gt; </code></term>

            <listitem>
              <simpara>Der zu benutzende Channel. Dabei gilt die gleiche
              Syntax wie beim <code>Dial()</code> Befehl (siehe <xref
              linkend="applikationen-dial" />).</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>Callerid: &lt;callerid&gt;</code></term>

            <listitem>
              <simpara>Die zu benutzende Caller-ID.</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>WaitTime: &lt;number&gt;</code></term>

            <listitem>
              <simpara>Die Anzahl der Sekunden, die das System auf die Annahme
              des Anrufes warten soll. Wird der Wert nicht angegeben, dann ist
              der Default 45 Sekunden.</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>MaxRetries: &lt;number&gt;</code></term>

            <listitem>
              <simpara>Die Anzahl der weiteren Wählversuche (falls besetzt
              oder nicht erreichbar). Wird dieser Parameter nicht angegeben
              ist der Defaultwert 0 (es wird also nur einmal versucht den
              Channel aufzubauen).</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>RetryTime: &lt;number&gt;</code></term>

            <listitem>
              <simpara>Die Anzahl der Sekunden, die bis zum nächsten
              Wählversuch gewartet werden. Wird dieser Parameter nicht
              angegeben ist der Defaultwert 300 Sekunden.</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>Account: &lt;account&gt;</code></term>

            <listitem>
              <simpara>Der Abrechnungscode für Ihr CDR System.</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>Context: &lt;context&gt;</code></term>

            <listitem>
              <simpara>Der Zielcontext.</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>Extension: &lt;exten&gt;</code></term>

            <listitem>
              <simpara>Die Zielextension, die bei Erfolg aufgerufen
              wird.</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>Priority: &lt;priority&gt; </code></term>

            <listitem>
              <simpara>Die Zielpriorität. Wenn nicht angegeben, dann ist der
              Defaultwert 1.</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>Setvar: &lt;var=value&gt;</code></term>

            <listitem>
              <simpara>Mit <parameter>Setvar:</parameter> können beliebig
              viele Channelvariablen definiert werden.</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>Archive: &lt;yes|no&gt;</code></term>

            <listitem>
              <simpara>Normalerweise werden Call Files nach der Abarbeitung
              direkt gelöscht. Ist <parameter>Archive: yes</parameter>
              gesetzt, werden die Call Files aber stattdessen ins Verzeichnis
              <filename>/var/spool/asterisk/outgoing_done/</filename>
              verschoben. Dabei wird Asterisk noch eine Zeile zum Call File
              hinzufügen. Diese beschreibt das Ergebnis des Call-Files und
              sieht so aus:</simpara>

              <literallayout>Status: &lt;Expired|Completed|Failed&gt;</literallayout>
            </listitem>
          </varlistentry>
        </variablelist></para>
    </section>

    <section id="call-file-zukunft">
      <title>Call Files in der Zukunft aufrufen</title>

      <para>Beim Aufruf eines Call Files vergleicht Asterisk die Zeit der
      letzten Änderung der Datei mit der aktuellen Uhrzeit. Liegt dieser
      Eintrag in der Zukunft, wird das Call File noch nicht abgearbeitet. So
      kann man leicht Call Files zeitgesteuert abarbeiten.</para>
    </section>

    <section id="call-file-weckruf">
      <title>Beispiel Weckruf</title>

      <para>Nehmen wir an, ein Hotel möchte über Asterisk ein einfaches
      Weckruf-System erstellen. Kunden sollen einen Weckruf über die
      Servicerufnummer *77* aktivieren können. Nach der *77* soll das genaue
      Datum und die Weckuhrzeit gewählt werden.<programlisting>[hotel-intern]
exten =&gt; _*77*XXXXXXXXXXXX,1,Answer()
exten =&gt; _*77*XXXXXXXXXXXX,n,Set(Jahr = ${EXTEN:4:4})
exten =&gt; _*77*XXXXXXXXXXXX,n,Set(Monat = ${EXTEN:8:2})
exten =&gt; _*77*XXXXXXXXXXXX,n,Set(Tag = ${EXTEN:10:2})
exten =&gt; _*77*XXXXXXXXXXXX,n,Set(Stunden = ${EXTEN:12:2})
exten =&gt; _*77*XXXXXXXXXXXX,n,Set(Minuten = ${EXTEN:14:2})
exten =&gt; _*77*XXXXXXXXXXXX,n,NoOp(Weckruf soll fuer die Rufnummer ${CALLERID(num)} soll um ${Stunden}:${Minuten} Uhr am ${Tag}.${Monat}.${Jahr} erfolgen.)
exten =&gt; _*77*XXXXXXXXXXXX,n,System(echo 'Channel: SIP/${CALLERID(num)}\nContext: Weckruf\nExtension: 23' &amp;gt; /tmp/${UNIQUEID}.call)
exten =&gt; _*77*XXXXXXXXXXXX,n,System(touch -t ${Jahr}${Monat}${Tag}${Stunden}${Minuten} /tmp/${UNIQUEID}.call)
exten =&gt; _*77*XXXXXXXXXXXX,n,System(mv /tmp/${UNIQUEID}.call /var/spool/asterisk/outgoing/
exten =&gt; _*77*XXXXXXXXXXXX,n,Playback(rqsted-wakeup-for)
exten =&gt; _*77*XXXXXXXXXXXX,n,SayNumber(${Stunden}
exten =&gt; _*77*XXXXXXXXXXXX,n,SayNumber(${Minuten})
exten =&gt; _*77*XXXXXXXXXXXX,n,Playback(digits/oclock)
exten =&gt; _*77*XXXXXXXXXXXX,n,Hangup()

[Weckruf]
exten =&gt; 23,1,Answer()
exten =&gt; 23,n,Wait(1)
exten =&gt; 23,n,Playback(this-is-yr-wakeup-call)
exten =&gt; 23,n,Wait(1)
exten =&gt; 23,n,Hangup()&lt;/programlisting&gt;</programlisting></para>
    </section>
  </section>

  <section id="asterisk-manager-api">
    <title>Das Manager-Interface (AMI)<indexterm>
        <primary>Manager-Interface</primary>
      </indexterm><indexterm>
        <primary>AMI</primary>
      </indexterm><indexterm>
        <primary><filename>manager.conf</filename></primary>
      </indexterm><indexterm>
        <primary>Asterisk Manager Interface</primary>
      </indexterm></title>

    <para>Das Manager-Interface aktiviert man, indem man in der
    <filename>manager.conf</filename> im Abschnitt <code>[general]</code> den
    Parameter <code>enabled=yes</code> setzt.<caution>
        <para>Das sollte man nie auf einem Server mit öffentlichem Zugang
        machen, außer man schützt sich zusätzlich durch
        <command>iptables</command>, <command>ipfw</command> oder eine andere
        Firewall oder einen SSH-Tunnel!</para>
      </caution>Darunter legen wir uns einen Benutzer-Eintrag
    an:<programlisting>[admin]
secret = geheim
deny = 0.0.0.0/0.0.0.0
permit = 127.0.0.1/255.255.255.255
read = system,call,log,verbose,command,agent,user,config
write = system,call,log,verbose,command,agent,user,config</programlisting>Nach
    einem Restart können wir uns auf Port 5038 mit dem AMI verbinden, was wir
    auf der Shell mit <command>telnet</command><footnote>
        <simpara>Hier kommt nur das <emphasis>Tool</emphasis>
        <command>telnet</command> zum Einsatz. Das hat nichts mit dem
        Telnet-Protokoll oder Port zu tun.</simpara>
      </footnote>ausprobieren:<screen><prompt>$ </prompt>telnet 127.0.0.1 5038
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
Asterisk Call Manager/1.0</screen>Man kann hier von Hand Befehle (die meist
    aus mehreren Zeilen bestehen) eintippen, z.B.:<screen>Action: Login
ActionID: 1
Username: admin
Secret: geheim

</screen></para>

    <para>Antwort:<screen>Response: Success
ActionID: 1
Message: Authentication accepted
</screen></para>

    <simpara>Die primäre Verwendung liegt aber eher im automatisierte Zugriff
    von einem Skript.</simpara>

    <simpara>Nach erfolgreicher Authentifizierung können in beiden Richtung
    Pakete gesendet werden. Die Art des Pakets wird immer von de ersten Zeile
    darin bestimmt. Der Client sendet <code>Action</code>-Pakete, der Server
    antwortet mit <code>Response</code> oder kann auch von sich aus
    <code>Event</code>-Pakete schicken. Die Reihenfolge der Zeilen in einem
    Paket ist ansonsten aber irrelevant. Zeilen werden durch CR LF<footnote>
        <simpara>Carriage Return (ASCII 13 dezimal) und Line Feed (ASCII 10
        dezimal)</simpara>
      </footnote> beendet, das ganze Paket durch ein weiteres CR LF.
    Normalerweise sendet der Client in jeder <code>Action</code> ein
    <code>ActionID</code>-Feld mit beliebigem, möglichst eindeutigem,
    Inhalt<footnote>
        <simpara>hier bietet sich etwa der Name des Skripts ein Timestamp und
        eine fortlaufende Nummer für jede Action an, z.B.
        <code>testskript.php-1169405408-1</code></simpara>
      </footnote>, das der Server so in seine <code>Response</code> übernimmt,
    damit sich die Antworten bei Überschneidungen zuordnen lassen.</simpara>

    <simpara>Der Server sendet <code>Event</code>-Pakete, um den Client über
    verschiedene Ereignisse zu informieren. Es gibt auch Ereignisse, die von
    einer <code>Action</code> des Clients ausgelöst werden. Dann sendet der
    Server ein <code>Response: Follows</code> gefolgt von den Events (die dann
    ebenfalls die <code>ActionID</code> beinhalten) und ein abschließendes
    Event (normalerweise
    <replaceable>Aktionsname</replaceable>Complete).</simpara>

    <simpara>Wenn Ihr Client keine Events benötigt, kann er direkt im ersten
    Authentifizierungs-Paket den Parameter <code>Events: off</code> senden, um
    dann nur Antworten auf von ihm gesendete Actions zu erhalten.</simpara>

    <simpara>Die Liste der verfügbaren Befehle erhält man im
    <emphasis>CLI</emphasis> mit <code>show manager commands</code> (bzw.
    <code>manager show commands</code>), Informationen über einen Befehl mit
    <code>show manager command <replaceable>Befehlsname</replaceable></code>
    (bzw. <code>manager show command
    <replaceable>Befehlsname</replaceable></code>). Eine Übersicht findet man
    auch auf <ulink
    url="http://www.voip-info.org/wiki/view/Asterisk+manager+API">http://www.voip-info.org/wiki/view/Asterisk+manager+API</ulink>.</simpara>

    <simpara>Für eine Liste der Events siehe <ulink
    url="http://www.voip-info.org/wiki/view/asterisk+manager+events">http://www.voip-info.org/wiki/view/asterisk+manager+events</ulink>.
    Beispiele und APIs in verschiedenen Programmiersprachen: <ulink
    url="http://www.voip-info.org/wiki/view/Asterisk+manager+Examples">http://www.voip-info.org/wiki/view/Asterisk+manager+Examples</ulink>.
    StarAstAPI (PHP): <ulink
    url="http://www.starutilities.com/">http://www.starutilities.com/</ulink>.</simpara>
  </section>

  <section id="manager-interface-ajam">
    <title>AJAM<indexterm>
        <primary>AJAM</primary>
      </indexterm><indexterm>
        <primary>Aynchronous Javascript Asterisk Manager</primary>
      </indexterm><indexterm>
        <primary><filename>http.conf</filename></primary>
      </indexterm></title>

    <subtitle>Aynchronous Javascript Asterisk Manager</subtitle>

    <simpara>Seit Version 1.4 bringt Asterisk einen kleinen Web-Server mit,
    AJAM genannt, über den man per HTTP auf das Asterisk Manager Interface
    (AMI) zugreifen kann (eher als Demonstration). Dazu sind die Schritte wie
    in <xref linkend="asterisk-manager-api" /> Voraussetzung. Um dann den
    Web-Server zu aktivieren setzt man in der <filename>http.conf</filename>
    im Abschnitt <code>[general]</code> die Einstellungen
    <code>enabled=yes</code> und <code>enablestatic=yes</code>.
    <code>bindaddr</code> stellt man auf <code>127.0.0.1</code>,
    <code>bindport</code> auf <code>8088</code>. Zusätzlich muss in der
    <filename>manager.conf</filename> der Parameter
    <code>webenabled=yes</code> eingestellt sein.</simpara>

    <para>Nach einem Restart können wir uns mit<literallayout>http://localhost:8088/asterisk/manager?action=login&amp;username=<replaceable>admin</replaceable>&amp;secret=<replaceable>geheim</replaceable></literallayout>einloggen
    oder Befehle ausführen, unter<literallayout>http://localhost:8088/asterisk/static/ajamdemo.html</literallayout>die
    AJAM-Demo sehen, unter<literallayout>http://localhost:8088/asterisk/rawman?action=status</literallayout>Consolen-Events
    senden/sehen oder dies auch mit<literallayout>http://localhost:8088/asterisk/mxml?action=status</literallayout>in
    XML-Form tun. Damit lassen sich vergleichsweise einfach Web-Anwendungen
    entwickeln (i.d.R. für den internen Gebrauch), die per AJAX auf das
    Manager-Interface zugreifen.</para>
  </section>
</chapter>