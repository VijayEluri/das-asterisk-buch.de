<?xml version="1.0" encoding="ISO-8859-1"?>
<chapter id="kapitel-agi" lang="de" revision="$Revision: 1.17 $">
  <!--% Copyright (c) 2006 - Stefan Wintermeyer <sw@amooma.de>
% Permission is granted to copy, distribute and/or modify this document
% under the terms of the GNU Free Documentation License, Version 1.2
% or any later version published by the Free Software Foundation;
% with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
% Texts. A copy of the license is included in the section entitled "GNU
% Free Documentation License".
% Asterisk training and consulting is offered at http://www.amooma.de-->

  <title>Asterisk Gateway Interface (AGI)<indexterm
      significance="preferred">
      <primary>AGI</primary>
    </indexterm><indexterm significance="preferred">
      <primary>Asterisk Gateway Interface</primary>
    </indexterm></title>

  <para>Das Asterisk Gateway Interface (AGI) ist vergleichbar mit CGI
  auf Webservern. Es sind externe Programme, die innerhalb des Dialplans
  (der <filename>extensions.conf</filename>) aufgerufen werden.
  AGI-Skripte können mit Asterisk interagieren und Befehle ausführen.
  AGI-Skripte können prinzipiell in allen Programmier- und
  Skriptsprachen (z.B. Unix-Shell Script) geschrieben werden, die mit
  den Standardsockets unter Unix umgehen können. Die folgenden
  Beschreibungen gelten also nur als Beispiele für eine
  Implementierung.</para>

  <section id="agi-datenstroeme">
    <title>Datenströme</title>

    <para>Für AGI-Skripte ist ein Verständnis des Unix-Datenstrom-Models
    unabdingbar. Im Anhang dieses Buches finden Sie Informationen zu
    diesem Prinzip.</para>

    <section id="agi-stdin">
      <title>STDIN</title>

      <para>Das AGI-Skript bekommt über den <quote>standard
      input</quote> (STDIN) einige Informationen von Asterisk. Das
      Format sieht folgendermaßen aus:<programlisting>agi_request: programmname.phpyyy123yyysw
agi_channel: Zap/1-2yyy123yyysw
agi_language: deyyy123yyysw
agi_callerid: Hans Beispielyyy123yyysw
agi_context: externyyy123yyysw
agi_extension: 1234yyy123yyysw
agi_priority: 2yyy123yyysw
</programlisting>Nach dem Übergeben dieser Grundinformationen sendet
      Asterisk noch eine Leerzeile, um dem AGI-Skript mitzuteilen, dass
      die Übertragung beendet ist.</para>

      <section id="agi-headers">
        <title>AGI Headers</title>

        <para>Die folgende Aufstellung listet alle von Asterisk
        weitergegebenen Header auf:</para>

        <itemizedlist>
          <listitem>
            <para><code>agi_request</code></para>

            <para>Der Dateiname des aufgerufenen AGI-Programmes.</para>
          </listitem>

          <listitem>
            <para><code>agi_channel</code></para>

            <para>Der Channel.</para>
          </listitem>

          <listitem>
            <para><code>agi_language</code></para>

            <para>Die eingestellte Sprache (z.B. en für Englisch oder de
            für Deutsch).</para>
          </listitem>

          <listitem>
            <para><code>agi_type</code></para>

            <para>Die Channel-Art (z.B. <code>sip</code> für SIP oder
            <code>zap</code> für ISDN).</para>
          </listitem>

          <listitem>
            <para><code>agi_uniqueid</code></para>

            <para>Eine im System unique (einmalige) ID für das
            Gespräch.</para>
          </listitem>

          <listitem>
            <para><code>agi_callerid</code></para>

            <para>Die Caller-ID (z.B. <code>Hans Meier
            &lt;2000&gt;</code>)</para>
          </listitem>

          <listitem>
            <para><code>agi_context</code></para>

            <para>Den Ursprungs-Context.</para>
          </listitem>

          <listitem>
            <para><code>agi_extension</code></para>

            <para>Die Ursprungs-Extension.</para>
          </listitem>

          <listitem>
            <para><code>agi_priority</code></para>

            <para>Die Priorität in der Extension beim Aufruf des
            AGI-Skriptes.</para>
          </listitem>

          <listitem>
            <para><code>agi_accountcode</code></para>

            <para>Abrechnungscode.</para>
          </listitem>

          <listitem>
            <para><code>agi_calleridname</code></para>

            <para>Name aus der Caller-ID (z.B. <code>Hans
            Meier</code>)</para>
          </listitem>

          <listitem>
            <para><code>agi_callingpres</code></para>

            <para>Die Caller-ID im ZAP-Channel.</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <section id="agi-stdout">
      <title>STDOUT</title>

      <para>Nachdem das AGI-Skript die Grundinformationen von Asterisk
      erhalten hat, beginnt es mit seiner Arbeit und gibt Befehle über
      <quote>standard out</quote> (STDOUT) zurück an Asterisk. Um sich
      diese Kommunikation anzuschauen, kann man im CLI mit <command>set
      verbose 5</command> den Verbosity-Level entsprechend
      hochsetzen.</para>
    </section>

    <section id="agi-stderr">
      <title>STDERR</title>

      <para><quote>Standard error</quote> (STDERR) ist der formale Weg,
      um Fehler- oder Debugmeldungen vom AGI-Skript auf die Console (das
      CLI) von Asterisk zu bringen.</para>
    </section>
  </section>

  <section id="agi-verzeichnisse">
    <title>Verzeichnisse und Rechte</title>

    <para>AGI Skripte werden von Asterisk standardmässig im Verzeichnis
    <filename>/var/lib/asterisk/agi-bin</filename>/ gesucht.</para>

    <para>Achten Sie darauf, das das entsprechende Skript von Asterisk
    auch ausgeführt werden darf. Dies kann durch den Aufruf des Befehles
    <command>chmod 755 <replaceable>skriptname</replaceable></command>
    gewährleistet werden.</para>
  </section>

  <section id="agi-aufruf-im-dialplan">
    <title>Aufruf eines AGI im Dialplan</title>

    <para>Ein AGI-Skript wird im Dialplan über die Applikation
    <code>agi</code> aufgerufen. Die kann wie folgt
    aussehen:<programlisting>exten =&gt; 1234,1,Answer()yyy123yyysw
exten =&gt; 1234,2,AGI(mein-agi-programm.php)yyy123yyysw
exten =&gt; 1234,3,Hangup()yyy123yyysw</programlisting></para>
  </section>

  <section id="agi-perl">
    <title>Perl</title>

    <para>In der Standard-Asterisk-Installation ist ein Test AGI-Skript
    mit dem Namen <filename>agi-test.agi</filename> <footnote>
        <para>Die Dateiendung <filename>agi</filename> ist dabei nicht
        zwingend notwendig. Man könnte die Datei auch
        <filename>agi-test.pl</filename> nennen.</para>
      </footnote>im Verzeichnis
    <filename>/var/lib/asterisk/agi-bin/</filename> abgespeichert.
    Anhand dieses Perl--Programms werden wir die grundsätzliche Arbeit
    mit AGI-Skripten beschreiben.</para>

    <para>Das Skript wird dabei in der
    <filename>extensions.conf</filename> wie folgt
    aufgerufen:<programlisting>exten =&gt; 1234,1,Answer()yyy123yyysw
exten =&gt; 1234,2,AGI(agi-test.agi)yyy123yyysw
exten =&gt; 1234,3,Hangup()yyy123yyysw</programlisting></para>

    <section id="agi-perl-agi-test.agi">
      <title>Schritt für Schritt Analyse des agi-test.agi
      Skriptes</title>

      <para>Wir besprechen das Beispiel-Skript Zeilen- oder
      Abschnittsweise.<programlisting>#!/usr/bin/perlyyy123yyysw
use strict;yyy123yyysw</programlisting>Die ersten zwei Zeilen sagen dem
      ausführendem Betriebsystem, dass es sich um ein Perl-Programm
      handelt, das mit dem Interpreter
      <filename>/usr/bin/perl</filename> ausgeführt werden soll.
      <code>use strict</code> bewirkt eine konsequentere Behandlung von
      Fehlern innerhalb des Perl-Programms.<programlisting>$|=1;yyy123yyysw</programlisting>Diese
      kleine Zeile bringt Perl dazu die Ausgabe von Text nicht zu
      puffern. So können wir sicher sein, dass alle Ausgaben auch
      unmittelbar an Asterisk übergeben und nicht erst in einem Buffer
      zwischengespeichert werden.<programlisting># Setup some variablesyyy123yyysw
my %AGI; my $tests = 0; my $fail = 0; my $pass = 0;yyy123yyysw</programlisting>Hier
      werden verschiedene Variablen definiert. Das Hash
      <code>%AGI</code> nimmt die initialen Eingaben von Asterisk auf.
      Die restlichen Variablen zählen die Gesamtanzahl der Tests, die
      Anzahl der fehlgeschlagenen Tests und die Anzahl der
      funktionierenden Tests.<programlisting>while(&lt;STDIN&gt;) {yyy123yyysw
  chomp;yyy123yyysw
  last unless length($_);yyy123yyysw
  if (/^agi_(\w+)\:\s+(.*)$/) {yyy123yyysw
    $AGI{$1} = $2;yyy123yyysw
  }yyy123yyysw
}yyy123yyysw</programlisting>Die eben eingelesenen Werte werden zum Debuggen auf
      STDERR, also im Endeffekt auf dem CLI ausgegeben.<programlisting>sub checkresult {yyy123yyysw
  my ($res) = @_;yyy123yyysw
  my $retval;yyy123yyysw
  $tests++;yyy123yyysw
  chomp $res;yyy123yyysw
  if ($res =~ /^200/) {yyy123yyysw
    $res =~ /result=(-?\d+)/;yyy123yyysw
    if (!length($1)) {yyy123yyysw
      print STDERR "FAIL ($res)\n";yyy123yyysw
      $fail++;yyy123yyysw
    } else {yyy123yyysw
      print STDERR "PASS ($1)\n";yyy123yyysw
      $pass++;yyy123yyysw
    }yyy123yyysw
  } else {yyy123yyysw
    print STDERR "FAIL (unexpected result '$res')\n";yyy123yyysw
    $fail++;yyy123yyysw
  }yyy123yyysw
}yyy123yyysw</programlisting>Die Subroutine <code>checkresult</code> liest das
      Ergebnis eines Befehls an Asterisk aus und bestimmt, ob der Test
      erfolgreich war oder nicht. Entsprechend werden die Variablen
      <code>$fail</code> und <code>$pass</code> hochgezählt. Nachdem die
      Grundlagen gelegt sind, können die einzelnen Tests beginnen: Die
      Datei <filename>beep.gsm</filename> wird
      abgespielt.<programlisting>print STDERR "1.  Testing 'sendfile'...";yyy123yyysw
print "STREAM FILE beep \"\"\n";yyy123yyysw
my $result = &lt;STDIN&gt;;yyy123yyysw
&amp;checkresult($result);yyy123yyysw</programlisting>Der Text "hello world" wird
      an den Anrufer geschickt. Das funktioniert natürlich nur, wenn das
      Protokoll und das Endgerät diese Funktion
      unterstützen.<programlisting>print STDERR "2.  Testing 'sendtext'...";yyy123yyysw
print "SEND TEXT \"hello world\"\n";yyy123yyysw
my $result = &lt;STDIN&gt;;yyy123yyysw
&amp;checkresult($result);yyy123yyysw</programlisting>Das Bild "asterisk-image"
      wird an den Anrufer geschickt. Auch diese Funktion ist vom
      Protokoll und dem Endgerät abhängig.<programlisting>print STDERR "3.  Testing 'sendimage'...";yyy123yyysw
print "SEND IMAGE asterisk-image\n";yyy123yyysw
my $result = &lt;STDIN&gt;;yyy123yyysw
&amp;checkresult($result);yyy123yyysw</programlisting>Die Zahl 192837465 wird dem
      Anrufer vorgelesen.<programlisting>print STDERR "4.  Testing 'saynumber'...";yyy123yyysw
print "SAY NUMBER 192837465 \"\"\n";yyy123yyysw
my $result = &lt;STDIN&gt;;yyy123yyysw
&amp;checkresult($result);yyy123yyysw</programlisting>Dieser Befehl wartet 1000
      Millisekunden auf die Eingabe von DTMF-Tönen durch den
      Anrufer.<programlisting>print STDERR "5.  Testing 'waitdtmf'...";yyy123yyysw
print "WAIT FOR DIGIT 1000\n";yyy123yyysw
my $result = &lt;STDIN&gt;;yyy123yyysw
&amp;checkresult($result);yyy123yyysw</programlisting>Ein 3000-Millisekunden-langes
      GSM-Soundfile mit dem Namen <filename>testagi.gsm</filename> wird
      aufgenommen. Die Aufnahme kann durch die Eingabe der Zahlen 1, 2,
      3 oder 4 unterbrochen werden.<programlisting>print STDERR "6.  Testing 'record'...";yyy123yyysw
print "RECORD FILE testagi gsm 1234 3000\n";yyy123yyysw
my $result = &lt;STDIN&gt;;yyy123yyysw
&amp;checkresult($result);yyy123yyysw</programlisting>Das soeben aufgenommene
      Soundfile wird abgespielt.<programlisting>print STDERR "6a.  Testing 'record' playback...";yyy123yyysw
print "STREAM FILE testagi \"\"\n";yyy123yyysw
my $result = &lt;STDIN&gt;;yyy123yyysw
&amp;checkresult($result);yyy123yyysw</programlisting>Nun erfolgt die Ausgabe auf
      dem CLI, wie viele Tests funktioniert oder nicht funktioniert
      haben.<programlisting>print STDERR "================== Complete ======================\n";yyy123yyysw
print STDERR "$tests tests completed, $pass passed, $fail failed\n";yyy123yyysw
print STDERR "==================================================\n";yyy123yyysw</programlisting><warning>
          <para>Bei vielen AGI-Befehlen sehen Sie den folgenden
          Aufbau:<programlisting>fwrite(STDOUT,"BEFEHL $value \"\"\n");yyy123yyysw
#                            ^^^^^^^yyy123yyysw</programlisting>Der in dieser Zeile
          unterschlängelte Teil (zwischen <code>$value</code> und
          <code>);</code>) ist zwingend erforderlich, damit der Befehl
          korrekt ausgeführt wird. Es handelt sich hierbei um ein
          Argument ohne Inhalt, das durch zwei gequotete
          Anführungszeichen dargestellt wird. Abgeschlossen wird der
          gesamte Befehl durch ein ''line feed'' (ein Zeilenendzeichen).
          In diesem Fall ein <code>\n</code>.</para>
        </warning></para>
    </section>
  </section>

  <section id="agi-php">
    <title>PHP</title>

    <para>PHP ist zu einer der populärsten Programmiersprachen für
    Webapplikationen geworden.<footnote>
        <para>Böse Zungen sprechen auch vom BASIC des 21. Jahrhunderts.
        ;-)</para>
      </footnote> Da man aber aktuelle PHP Versionen auch für den Aufruf
    von Programmen auf der Kommandozeile benutzen kann, ist sie eine für
    AGI-Skripte gut geeignete Sprache. Als Beispiel benutzen wir ein
    kleines PHP-Programm (<filename>lotto.php</filename>), das 6
    zufällige Zahlen von 1 bis 49 auswählt und dem Anrufer vorspricht.
    Die Beschreibung der einzelnen Schritte erfolgt im
    Quellcode.<programlisting>#!/usr/bin/php -qyyy123yyysw
&lt;?phpyyy123yyysw
yyy123yyysw
# Sicherheitseinstellung. Das Skript laeuft nicht yyy123yyysw
# laenger als 8 Sekunden.yyy123yyysw
#################################################yyy123yyysw
set_time_limit(8);yyy123yyysw
yyy123yyysw
yyy123yyysw
# Output Buffer wird deaktiviertyyy123yyysw
# Alternativ könnten wir nach jeder Ausgabeyyy123yyysw
# fflush(STDOUT); aufrufen.yyy123yyysw
#################################################yyy123yyysw
ob_implicit_flush();yyy123yyysw
yyy123yyysw
yyy123yyysw
# PHP Error Reporting wird deaktiviertyyy123yyysw
#################################################yyy123yyysw
error_reporting(0);yyy123yyysw
yyy123yyysw
yyy123yyysw
# Fuer die Komunikation mit Asterisk benoetigen yyy123yyysw
# wir STDIN und STDOUT Filehandlesyyy123yyysw
#################################################yyy123yyysw
if (!defined('STDIN'))yyy123yyysw
  define('STDIN' , fopen('php://stdin' , 'r'));yyy123yyysw
if (!defined('STDOUT'))yyy123yyysw
  define('STDOUT', fopen('php://stdout', 'w'));yyy123yyysw
if (!defined('STDERR'))yyy123yyysw
  define('STDERR', fopen('php://stderr', 'w'));yyy123yyysw
yyy123yyysw
yyy123yyysw
# Die von Asterisk uebergebenen Variablen und yyy123yyysw
# Werte werden ausgelesen und im Array $agi yyy123yyysw
# gespeichert.yyy123yyysw
#################################################yyy123yyysw
yyy123yyysw
$agi = array();yyy123yyysw
yyy123yyysw
while (!feof(STDIN))yyy123yyysw
{yyy123yyysw
  $tmp = trim(fgets(STDIN,4096));yyy123yyysw
  if (($tmp == '') || ($tmp == "\n"))yyy123yyysw
    break;yyy123yyysw
  $var1 = split(':',$tmp);yyy123yyysw
  $name = str_replace('agi_','',$var1[0]);yyy123yyysw
  $agi[$name] = trim($var1[1]);yyy123yyysw
}yyy123yyysw
yyy123yyysw
yyy123yyysw
# Ein Array mit 6 zufaelligen und nicht yyy123yyysw
# doppelten Zahlen von 1 bis 49 wird generiert.yyy123yyysw
#################################################yyy123yyysw
yyy123yyysw
$Lottozahlen = array();yyy123yyysw
do {yyy123yyysw
  $Zahl = rand(1,49);yyy123yyysw
  if (array_search($Zahl, $Lottozahlen) == FALSE) {yyy123yyysw
    $Lottozahlen[] = $Zahl;yyy123yyysw
  }yyy123yyysw
} while (count($Lottozahlen) &lt; 6);yyy123yyysw
yyy123yyysw
yyy123yyysw
# Vor der ersten Ansage wird eine Sekunde yyy123yyysw
# gewartet.yyy123yyysw
#################################################yyy123yyysw
fwrite(STDOUT,"EXEC Wait 1 \"\"\n");yyy123yyysw
fflush(STDOUT);yyy123yyysw
yyy123yyysw
yyy123yyysw
# Die Zahlen werden nacheinander vorgelesen. yyy123yyysw
# Zwischen den einzelnen Zahlen gibt es immer yyy123yyysw
# eine Pause von einer Sekunde.yyy123yyysw
#################################################yyy123yyysw
foreach ($Lottozahlen as $value) {yyy123yyysw
  fwrite(STDOUT,"SAY NUMBER $value \"\"\n");yyy123yyysw
  fflush(STDOUT);yyy123yyysw
  fwrite(STDOUT,"EXEC Wait 1 \"\"\n");yyy123yyysw
  fflush(STDOUT);yyy123yyysw
}yyy123yyysw
yyy123yyysw
?&gt;yyy123yyysw</programlisting>Das Programm <filename>lotto.php</filename> muss
    im Verzeichnis <filename>/var/lib/asterisk/agi-bin/</filename>
    abgespeichert werden und wird in der
    <filename>extensions.conf</filename> wie folgt aufgerufen:</para>

    <programlisting>exten =&gt; 1234,1,Answer()yyy123yyysw
exten =&gt; 1234,2,AGI(lotto.php)yyy123yyysw
exten =&gt; 1234,3,Hangup()yyy123yyysw</programlisting>

    <section id="agi-phpagi">
      <title>phpAGI</title>

      <para>Wer PHP und AGI benutzen, aber nicht das Rad neu erfinden
      will, kann die fertige PHP-Klasse phpAGI benutzen. Informationen
      und die dazugehörigen Dateien finden Sie auf der Homepage des
      Projektes <ulink
      url="http://phpagi.sourceforge.net/"><citetitle>http://phpagi.sourceforge.net/</citetitle></ulink>.</para>

      <para>Das folgende bei phpAGI mitgelieferte Programm gibt schnell
      einen Überblick über die Funktionsaufrufe<footnote>
          <para>Für die Benutzung von <code>text2wav</code> muss ein
          Text-to-Speech System (z.B. Festival) installiert und
          konfiguriert sein.</para>
        </footnote><programlisting>&lt;?phpyyy123yyysw
/**yyy123yyysw
* @package phpAGI_examplesyyy123yyysw
* @version 2.0yyy123yyysw
*/yyy123yyysw
yyy123yyysw
function my_ip(&amp;$agi, $peer)yyy123yyysw
   {yyy123yyysw
    $ip = 'unknown';yyy123yyysw
    $asm = $agi-&gt;new_AsteriskManager();yyy123yyysw
    if($asm-&gt;connect())yyy123yyysw
    {yyy123yyysw
      $peer = $asm-&gt;command("sip show peer $peer");yyy123yyysw
      $asm-&gt;disconnect();yyy123yyysw
    yyy123yyysw
      if(!strpos($peer['data'], ':'))yyy123yyysw
        echo $peer['data'];yyy123yyysw
      elseyyy123yyysw
      {yyy123yyysw
        $data = array();yyy123yyysw
        foreach(explode("\n", $peer['data']) as $line)yyy123yyysw
        {yyy123yyysw
          $a = strpos('z'.$line, ':') - 1;yyy123yyysw
          if($a &gt;= 0) $data[trim(substr($line, 0, $a))] = trim(substr($line, $a + 1));yyy123yyysw
        }yyy123yyysw
      }yyy123yyysw
    yyy123yyysw
      if(isset($data['Addr-&gt;IP']))yyy123yyysw
      {yyy123yyysw
        $ip = explode(' ', trim($data['Addr-&gt;IP']));yyy123yyysw
        $ip = $ip[0];yyy123yyysw
      }yyy123yyysw
    }yyy123yyysw
    $agi-&gt;text2wav("Your IP address is $ip");yyy123yyysw
  }yyy123yyysw
?&gt;yyy123yyysw</programlisting></para>
    </section>
  </section>

  <section id="agi-andere-programmiersprachen">
    <title>Andere Programmiersprachen</title>

    <para>Wie am Anfang dieses Kapitels schon beschrieben: Man kann
    AGI-Programme in jeder beliebigen Programmiersprache schreiben.
    Fertige Bibliotheken finden sich z.B. für</para>

    <itemizedlist>
      <listitem>
        <para>Java</para>
      </listitem>

      <listitem>
        <para>Perl</para>
      </listitem>

      <listitem>
        <para>PHP</para>
      </listitem>

      <listitem>
        <para>Python</para>
      </listitem>

      <listitem>
        <para>Ruby</para>
      </listitem>

      <listitem>
        <para>C</para>
      </listitem>

      <listitem>
        <para>C#</para>
      </listitem>
    </itemizedlist>

    <para>Am einfachsten ist eine Suche in der Suchmaschine der Wahl
    nach den Schlüsselwörtern <quote>AGI</quote> und dem Namen der
    Programmiersprache. Eine weiterer Startpunkt ist die Webseite <ulink
    url="http://www.voip-info.org/wiki-Asterisk+AGI">http://www.voip-info.org/wiki-Asterisk+AGI</ulink>.</para>
  </section>

  <section id="agi-befehle">
    <title>AGI-Befehle<indexterm significance="preferred">
        <primary>AGI</primary>

        <secondary>Befehle</secondary>
      </indexterm></title>

    <para>Die folgenden Befehle ermöglichen es einem AGI-Skript, mit
    Asterisk zu interagieren. Die meisten dieser Befehle sind von
    Dialplan-Applikationen (siehe <xref linkend="applikationen" />) mit
    ähnlichen Namen abgeleitet.</para>

    <important>
      <simpara>Denken Sie daran, falls Sie Parameter, die nicht am Ende
      stehen, auslassen wollen, stattdessen <code>""</code>
      anzugeben!</simpara>
    </important>

    <section id="agi-befehl-answer">
      <title><code>ANSWER</code></title>

      <para><code>ANSWER</code></para>

      <para>Funktioniert wie <code>Answer()</code> in der
      <filename>extensions.conf</filename>. Der Anruf wird
      entgegengenommen.</para>

      <para>Ergebniswerte nach Ausführung:</para>

      <informaltable colsep="none" frame="none" rowsep="none">
        <tgroup cols="2">
          <colspec colnum="1" colwidth="70pt" />

          <tbody>
            <row>
              <entry>-1</entry>

              <entry>Fehler</entry>
            </row>

            <row>
              <entry>0</entry>

              <entry>Erfolgreich</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>

    <section id="agi-befehl-channel-status">
      <title><code>CHANNEL STATUS</code></title>

      <synopsis>CHANNEL STATUS [<replaceable>Kanalname</replaceable>]</synopsis>

      <para>Abfrage des Status eines Kanals. Wenn der
      <code><parameter>Kanalname</parameter></code> nicht angegeben ist,
      wird der aktuelle Kanal benutzt.</para>

      <para>Ergebniswerte nach Ausführung:</para>

      <informaltable colsep="none" frame="none" rowsep="none">
        <tgroup cols="2">
          <colspec colnum="1" colwidth="70pt" />

          <tbody>
            <row>
              <entry>0</entry>

              <entry>Channel ist nicht aktiv und verfügbar.</entry>
            </row>

            <row>
              <entry>1</entry>

              <entry>Channel ist nicht aktiv, aber reserviert.</entry>
            </row>

            <row>
              <entry>2</entry>

              <entry>Channel ist off-hook.</entry>
            </row>

            <row>
              <entry>3</entry>

              <entry>DTMF-Eingaben wurden getätigt.</entry>
            </row>

            <row>
              <entry>4</entry>

              <entry>Der Channel wird gerade angerufen (es
              klingelt).</entry>
            </row>

            <row>
              <entry>5</entry>

              <entry>Die Leitung ist aktiv.</entry>
            </row>

            <row>
              <entry>6</entry>

              <entry>Die Leitung ist besetzt.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>

    <section id="agi-befehl-database-del">
      <title><code>DATABASE DEL</code></title>

      <synopsis>DATABASE DEL <replaceable>Familie</replaceable> <replaceable>Schlüssel</replaceable></synopsis>

      <para>Löscht den durch <parameter>Familie</parameter> und
      <parameter>Schlüssel</parameter> definierten Eintrag in der
      Asterisk-Datenbank.</para>

      <para>Ergebniswerte nach Ausführung:<informaltable colsep="none"
          frame="none" rowsep="none">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="70pt" />

            <tbody>
              <row>
                <entry>0</entry>

                <entry>Fehler</entry>
              </row>

              <row>
                <entry>1</entry>

                <entry>Erfolgreich</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>
    </section>

    <section id="agi-befehl-database-deltree">
      <title><code>DATABASE DELTREE</code></title>

      <synopsis>DATABASE DELTREE <replaceable>Familie</replaceable></synopsis>

      <para>Löscht eine gesamte <parameter>Familie</parameter> aus der
      Asterisk-Datenbank.</para>

      <para>Ergebniswerte nach Ausführung:<informaltable colsep="none"
          frame="none" rowsep="none">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="70pt" />

            <tbody>
              <row>
                <entry>0</entry>

                <entry>Fehler</entry>
              </row>

              <row>
                <entry>1</entry>

                <entry>Erfolgreich</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>
    </section>

    <section id="agi-befehl-database-get">
      <title><code>DATABASE GET</code></title>

      <synopsis>DATABASE GET <replaceable>Familie</replaceable> <replaceable>Schlüssel</replaceable></synopsis>

      <para>Gibt den entsprechenden Eintrag für
      <parameter>Familie</parameter>/<parameter>Schlüssel</parameter>
      aus der Asterisk-Datenbank aus.</para>

      <para>Ergebniswerte nach Ausführung:<informaltable colsep="none"
          frame="none" rowsep="none">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="70pt" />

            <tbody>
              <row>
                <entry>0</entry>

                <entry>Fehler</entry>
              </row>

              <row>
                <entry>1 (<replaceable>Wert</replaceable>)</entry>

                <entry>Erfolgreich mit dem gefundenen Wert</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>
    </section>

    <section id="agi-befehl-database-put">
      <title><code>DATABASE PUT</code></title>

      <synopsis>DATABASE PUT <replaceable>Familie</replaceable> <replaceable>Schlüssel</replaceable> <replaceable>Wert</replaceable></synopsis>

      <para>Speichert den Wert <parameter>Wert</parameter> in der
      Asterisk-Datenbank unter
      <parameter>Familie</parameter>/<parameter>Schlüssel</parameter>
      ab. Das kann ein Hinzufügen oder ein Update sein.</para>

      <para>Ergebniswerte nach Ausführung:<informaltable colsep="none"
          frame="none" rowsep="none">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="70pt" />

            <tbody>
              <row>
                <entry>0</entry>

                <entry>Fehler</entry>
              </row>

              <row>
                <entry>1</entry>

                <entry>Erfolgreich</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>
    </section>

    <section id="agi-befehl-exec">
      <title><code>EXEC</code></title>

      <synopsis>EXEC <replaceable>Applikation</replaceable> <replaceable>Argumente</replaceable></synopsis>

      <para>Führt eine Dialplan-Applikation aus (siehe <xref
      linkend="applikationen" />). Die <parameter>Argumente</parameter>
      werden dabei der Applikation übergegeben. Mehrere Argumente werden
      durch ein Pipe-Zeichen (<code>|</code>) getrennt.</para>

      <para>Ergebniswerte nach Ausführung:<informaltable colsep="none"
          frame="none" rowsep="none">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="70pt" />

            <tbody>
              <row>
                <entry>-2</entry>

                <entry>Fehler. Konnte die Applikation nicht finden /
                aufrufen.</entry>
              </row>

              <row>
                <entry><replaceable>Wert</replaceable></entry>

                <entry>Erfolgreich. Ergebniswert der
                Applikation.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>

      <para>Beispiel:<programlisting>EXEC Dial Zap/g1/123456yyy123yyysw</programlisting></para>
    </section>

    <section id="agi-befehl-get-data">
      <title><code>GET DATA</code></title>

      <synopsis>GET DATA <replaceable>Dateiname</replaceable> [<replaceable>Timeout</replaceable>] [<replaceable>maxZiffern</replaceable>]</synopsis>

      <para>Vergleichbar mit der
      <application>Background()</application>-Applikation in der
      <filename>extensions.conf</filename>. Spielt die Audiodatei mit
      dem Namen <parameter>Dateiname</parameter> ab und wartet auf
      DTMF-Eingaben. Diese werden durch
      <parameter>maxZiffern</parameter> limitiert. Die maximale Zeit
      wird durch <parameter>Timeout</parameter> begrenzt.</para>

      <para>Ergebniswerte nach Ausführung:<informaltable colsep="none"
          frame="none" rowsep="none">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="70pt" />

            <tbody>
              <row>
                <entry><replaceable>Wert</replaceable></entry>

                <entry>DTMF-Eingaben</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>
    </section>

    <section id="agi-befehl-get-full-variable">
      <title><code>GET FULL VARIABLE</code></title>

      <synopsis>GET FULL VARIABLE <replaceable>Variablenname</replaceable> [<replaceable>Kanalname</replaceable>]</synopsis>

      <para>Gibt den Wert der Variable
      <parameter>Variablenname</parameter> aus dem Kanal
      <parameter>Kanalname</parameter> (oder dem aktuellen) aus.</para>

      <para>Ergebniswerte nach Ausführung:<informaltable colsep="none"
          frame="none" rowsep="none">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="70pt" />

            <tbody>
              <row>
                <entry>0</entry>

                <entry>Fehler. Variable existiert nicht.</entry>
              </row>

              <row>
                <entry>1 (<replaceable>Wert</replaceable>)</entry>

                <entry>Erfolgreich. Wert der Variablen.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>
    </section>

    <section id="agi-befehl-get-option">
      <title><code>GET OPTION</code></title>

      <synopsis>GET OPTION <replaceable>Dateiname</replaceable> <replaceable>Escape_Ziffern</replaceable> [<replaceable>Timeout</replaceable>]</synopsis>

      <para>Verhält sich wie <code>STREAM FILE</code>. Hat aber
      zusätzlich die Möglichkeit, einen <parameter>Timeout</parameter>
      in Sekunden anzugeben.</para>

      <para>Ergebniswerte nach Ausführung:<informaltable colsep="none"
          frame="none" rowsep="none">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="70pt" />

            <tbody>
              <row>
                <entry><replaceable>Wert</replaceable></entry>

                <entry>DTMF-Eingaben</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>
    </section>

    <section id="agi-befehl-get-variable">
      <title><code>GET VARIABLE</code></title>

      <synopsis>GET VARIABLE <replaceable>Variablenname</replaceable></synopsis>

      <para>Ähnlich wie <code>GET FULL VARIABLE</code>. Allerdings
      versteht <code>GET VARIABLE</code> keine komplexen oder
      systemeigenen Variablen.<warning>
          <simpara>Im Zweifelsfall sollte man <code>GET FULL
          VARIABLE</code> benutzen.</simpara>
        </warning></para>

      <para>Ergebniswerte nach Ausführung:<informaltable colsep="none"
          frame="none" rowsep="none">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="70pt" />

            <tbody>
              <row>
                <entry>0</entry>

                <entry>Fehler. Kein Channel oder die Variable existiert
                nicht.</entry>
              </row>

              <row>
                <entry>1 (<replaceable>Wert</replaceable>)</entry>

                <entry>Erfolgreich. Wert der Variablen (in
                Klammern)</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>
    </section>

    <section id="agi-befehl-hangup">
      <title><code>HANGUP</code></title>

      <synopsis>HANGUP [<replaceable>Kanalname</replaceable>]</synopsis>

      <para>Legt den virtuellen Hörer auf dem angegebenen Kanal auf.
      Wurde kein <parameter>Kanalname</parameter> angegeben, wird der
      aktuelle Kanal aufgelegt.</para>

      <para>Ergebniswerte nach Ausführung:<informaltable colsep="none"
          frame="none" rowsep="none">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="70pt" />

            <tbody>
              <row>
                <entry>-1</entry>

                <entry>Fehler. Der angegebene Kanal existiert
                nicht.</entry>
              </row>

              <row>
                <entry>1</entry>

                <entry>Erfolgreich. Hangup wurde ausgeführt.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>
    </section>

    <section id="agi-befehl-noop">
      <title><code>NOOP</code></title>

      <synopsis>NOOP [<replaceable>Text</replaceable>]</synopsis>

      <para>Es wird nichts gemacht (<code>NOOP</code> steht für
      No-Operation). <parameter>Text</parameter> wird auf dem CLI
      ausgegeben.</para>

      <para>Ergebniswerte nach Ausführung:<informaltable colsep="none"
          frame="none" rowsep="none">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="70pt" />

            <tbody>
              <row>
                <entry>0</entry>

                <entry>Gibt immer 0 zurück.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>
    </section>

    <section id="agi-befehl-receive-char">
      <title><code>RECEIVE CHAR</code></title>

      <synopsis>RECEIVE CHAR <replaceable>Timeout</replaceable></synopsis>

      <para>Wenn ein Channel die Übermittlung von Text unterstützt, dann
      kann mit <code>RECEIVE CHAR</code> ein ein eizelnes Zeichen
      empfangen werden. <parameter>Timeout</parameter> gibt die
      Wartezeit für den Empfang in Millisekunden an (0 für
      unendlich).</para>

      <para>Ergebniswerte nach Ausführung:<informaltable colsep="none"
          frame="none" rowsep="none">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="100pt" />

            <tbody>
              <row>
                <entry>-1</entry>

                <entry>Fehler oder Hangup</entry>
              </row>

              <row>
                <entry><replaceable>Wert</replaceable> (timeout)</entry>

                <entry>Das empfangene Zeichen bei Timeout</entry>
              </row>

              <row>
                <entry><replaceable>Wert</replaceable></entry>

                <entry>Das empfangene Zeichen</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>
    </section>

    <section id="agi-befehl-receive-text">
      <title><code>RECEIVE TEXT</code></title>

      <synopsis>RECEIVE TEXT <replaceable>Timeout</replaceable></synopsis>

      <para>Wenn ein Channel die Übermittlung von Text unterstützt, dann
      kann mit <code>RECEIVE CHAR</code> ein solcher Text empfangen
      werden. <parameter>Timeout</parameter> gibt die Wartezeit für den
      Empfang in Millisekunden an (0 für unendlich).</para>

      <para>Ergebniswerte nach Ausführung:<informaltable colsep="none"
          frame="none" rowsep="none">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="100pt" />

            <tbody>
              <row>
                <entry>-1</entry>

                <entry>Fehler oder Hangup</entry>
              </row>

              <row>
                <entry><replaceable>Wert</replaceable> (timeout)</entry>

                <entry>Der empfangene Text bei Timeout</entry>
              </row>

              <row>
                <entry><replaceable>Wert</replaceable></entry>

                <entry>Der empfangene Text</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>
    </section>

    <section id="agi-befehl-record-file">
      <title><code>RECORD FILE</code></title>

      <synopsis>RECORD FILE <replaceable>Dateiname</replaceable> <replaceable>Format</replaceable> <replaceable>Escape_Ziffern</replaceable> <replaceable>Timeout</replaceable> [<replaceable>Offset</replaceable>] [BEEP] [s=<replaceable>Stille</replaceable>]</synopsis>

      <para>Funktioniert wie ein Rekorder, der alle Audiosignale in der
      Datei <parameter>Dateiname</parameter> im angegebenen
      <parameter>Format</parameter> aufzeichnet. Beendet werden kann
      dies durch einen definierten DTMF-Ton
      <parameter>Escape_Ziffern</parameter> oder durch einen
      <parameter>Timeout</parameter> in Millisekunden (dabei steht -1
      für keinen Timeout).</para>

      <para><parameter>BEEP</parameter> spielt vor der Aufnahme einen
      Signalton. <parameter>Stille</parameter> definiert die Anzahl der
      Stille-Sekunden bis die Applikation auch ohne Eingabe von
      DTMF-Tönen einen Timeout ausgibt.</para>

      <para>Mit <parameter>Offset</parameter> wird vor Beginn der
      Aufnahme soviele Sekunde wie angegeben gewartet.</para>

      <para>Ergebniswerte nach Ausführung:<informaltable colsep="none"
          frame="none" rowsep="none">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="70pt" />

            <tbody>
              <row>
                <entry>-1</entry>

                <entry>Fehler</entry>
              </row>

              <row>
                <entry>0</entry>

                <entry>Erfolgreich</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>
    </section>

    <section id="agi-befehl-say-alpha">
      <title><code>SAY ALPHA</code></title>

      <synopsis>SAY ALPHA <replaceable>String</replaceable> [<replaceable>Escape_Ziffern</replaceable>]</synopsis>

      <para>Buchstabiert den übergebenen <parameter>String</parameter>.
      Die Ausgabe kann durch Eingabe einer Ziffer, die in
      <parameter>Escape_Ziffern</parameter> bestimmt wird, abgebrochen
      werden.</para>

      <para>Ergebniswerte nach Ausführung:<informaltable colsep="none"
          frame="none" rowsep="none">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="70pt" />

            <tbody>
              <row>
                <entry>-1</entry>

                <entry>Fehler</entry>
              </row>

              <row>
                <entry>0</entry>

                <entry>Erfolgreich</entry>
              </row>

              <row>
                <entry><replaceable>Wert</replaceable></entry>

                <entry>ASCII-Wert der Eingabe, die zum Abbruch geführt
                hat</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>
    </section>

    <section id="agi-befehl-say-date">
      <title><code>SAY DATE</code></title>

      <synopsis>SAY DATE <replaceable>Timestamp</replaceable> [<replaceable>Escape_Ziffern</replaceable>]</synopsis>

      <para>Sagt das übergebene Datum an.
      <parameter>Timestamp</parameter> ist dabei die Anzahl der Sekunden
      seit 00:00:00 Uhr am 1. Januar 1970. Die Ausgabe kann durch
      Eingabe einer Ziffer, die in <code>Escape_Ziffern</code> bestimmt
      wird, abgebrochen werden.</para>

      <para>Ergebniswerte nach Ausführung:<informaltable colsep="none"
          frame="none" rowsep="none">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="70pt" />

            <tbody>
              <row>
                <entry>-1</entry>

                <entry>Fehler</entry>
              </row>

              <row>
                <entry>0</entry>

                <entry>Erfolgreich</entry>
              </row>

              <row>
                <entry><replaceable>Wert</replaceable></entry>

                <entry>ASCII-Wert der Eingabe, die zum Abbruch geführt
                hat</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>
    </section>

    <section id="agi-befehl-say-datetime">
      <title><code>SAY DATETIME</code></title>

      <synopsis>SAY DATETIME <replaceable>Timestamp</replaceable> [<replaceable>Escape_Ziffern</replaceable>] [<replaceable>Format</replaceable>] [<replaceable>Zeitzone</replaceable>]</synopsis>

      <para>Sagt das übergebene Datum. <parameter>Timestamp</parameter>
      ist dabei die Anzahl der Sekunden seit 00:00:00 Uhr am 1. Januar
      1970. Das <parameter>Format</parameter> bestimmt die Art der
      Ausgabe. Folgende Werte sind dabei möglich:<informaltable
          colsep="none" frame="none" rowsep="none">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="95pt" />

            <tbody>
              <row>
                <entry><code>'<replaceable>dateiname</replaceable>'</code></entry>

                <entry>Eine Sounddatei</entry>
              </row>

              <row>
                <entry><code>${<replaceable>VAR</replaceable>}</code></entry>

                <entry>Eine Variable</entry>
              </row>

              <row>
                <entry><code>A</code> oder <code>a</code></entry>

                <entry>Tag der Woche (z.B. Montag oder Dienstag)</entry>
              </row>

              <row>
                <entry><code>B</code>, <code>b</code> oder
                <code>h</code></entry>

                <entry>Name des Monats (z.B. Januar)</entry>
              </row>

              <row>
                <entry><code>d</code> oder <code>e</code></entry>

                <entry>Ordnungseinheit des Tages im Monat (z.B. erster,
                zweiter, dritter)</entry>
              </row>

              <row>
                <entry><code>Y</code></entry>

                <entry>Jahr</entry>
              </row>

              <row>
                <entry><code>I</code> oder <code>i</code></entry>

                <entry>Stunde (im 12-Std.-System)</entry>
              </row>

              <row>
                <entry><code>H</code></entry>

                <entry>Stunde (im 24-Std.-System). Dabei wir 07
                <quote>Null - Sieben</quote> ausgesprochen!</entry>
              </row>

              <row>
                <entry><code>k</code></entry>

                <entry>Stunde (im 24-Std.-System). Dabei wir 07 nur
                <quote>Sieben</quote> ausgesprochen.</entry>
              </row>

              <row>
                <entry><code>M</code></entry>

                <entry>Minuten</entry>
              </row>

              <row>
                <entry><code>P</code> oder <code>p</code></entry>

                <entry>AM oder PM</entry>
              </row>

              <row>
                <entry><code>Q</code></entry>

                <entry><quote>Heute</quote>, <quote>Gestern</quote> oder
                der Inhalt der Werte <code>ABdY</code></entry>
              </row>

              <row>
                <entry><code>q</code></entry>

                <entry><quote> </quote> (für heute),
                <quote>Gestern</quote>, der Wochentag oder
                <code>ABdY</code></entry>
              </row>

              <row>
                <entry><code>R</code></entry>

                <entry>Zeit inkl. Minuten im 24-Std.-System</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>

      <para>Die <parameter>Zeitzone</parameter> wird wie in der
      Konfigurationsdatei
      <filename>/etc/asterisk/voicemail.conf</filename>
      angegeben.</para>

      <para>Die Ausgabe kann durch Eingabe einer Ziffer, die in
      <parameter>Escape_Ziffern</parameter> bestimmt wird, abgebrochen
      werden. Wenn <parameter>Escape_Ziffern</parameter> oder
      <parameter>Format</parameter> ausgelassen werden soll, muss
      stattdessen <code>""</code> angegeben werden.</para>

      <para>Ergebniswerte nach Ausführung:<informaltable colsep="none"
          frame="none" rowsep="none">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="70pt" />

            <tbody>
              <row>
                <entry>-1</entry>

                <entry>Fehler</entry>
              </row>

              <row>
                <entry>0</entry>

                <entry>Erfolgreich</entry>
              </row>

              <row>
                <entry><replaceable>Wert</replaceable></entry>

                <entry>ASCII-Wert der Eingabe, die zum Abbruch geführt
                hat</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>
    </section>

    <section id="agi-befehl-say-digits">
      <title><code>SAY DIGITS</code></title>

      <synopsis>SAY DIGITS <replaceable>Zahl</replaceable> [<replaceable>Escape_Ziffern</replaceable>]</synopsis>

      <para>Sagt die angegebene <parameter>Zahl</parameter> Ziffer für
      Ziffer an (z.B. 123 wird <quote>eins, zwei, drei</quote>
      gesprochen). Die Ausgabe kann durch Eingabe einer Ziffer, die in
      <code>Escape_Ziffern</code> bestimmt wird, abgebrochen
      werden.</para>

      <para>Ergebniswerte nach Ausführung:<informaltable colsep="none"
          frame="none" rowsep="none">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="70pt" />

            <tbody>
              <row>
                <entry>-1</entry>

                <entry>Fehler</entry>
              </row>

              <row>
                <entry>0</entry>

                <entry>Erfolgreich</entry>
              </row>

              <row>
                <entry><replaceable>Wert</replaceable></entry>

                <entry>ASCII-Wert der Eingabe, die zum Abbruch geführt
                hat.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>
    </section>

    <section id="agi-befehl-say-number">
      <title><code>SAY NUMBER</code></title>

      <synopsis>SAY NUMBER <replaceable>Zahl</replaceable> [<replaceable>Escape_Ziffern</replaceable>]</synopsis>

      <para>Sagt die angegebene <parameter>Zahl</parameter> an (z.B. 123
      wird <quote>ein-hundert-drei-und-zwanzig</quote> gesprochen). Die
      Ausgabe kann durch Eingabe einer Ziffer, die in
      <code>Escape_Ziffern</code> bestimmt wird, abgebrochen
      werden.</para>

      <para>Ergebniswerte nach Ausführung:<informaltable colsep="none"
          frame="none" rowsep="none">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="70pt" />

            <tbody>
              <row>
                <entry>-1</entry>

                <entry>Fehler</entry>
              </row>

              <row>
                <entry>0</entry>

                <entry>Erfolgreich</entry>
              </row>

              <row>
                <entry><replaceable>Wert</replaceable></entry>

                <entry>ASCII-Wert der Eingabe, die zum Abbruch geführt
                hat</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>
    </section>

    <section id="agi-befehl-say-phonetic">
      <title><code>SAY PHONETIC</code></title>

      <synopsis>SAY PHONETIC <replaceable>String</replaceable> [<replaceable>Escape_Ziffern</replaceable>]</synopsis>

      <para>Sagt den angegebenen <parameter>String</parameter> im
      phonetischen NATO-Alphabet an (z.B. <code>a</code> wird
      <quote>alpha</quote> gesprochen). Die Ausgabe kann durch Eingabe
      einer Ziffer, die in <code>Escape_Ziffern</code> bestimmt wird,
      abgebrochen werden.</para>

      <para>Ergebniswerte nach Ausführung:<informaltable colsep="none"
          frame="none" rowsep="none">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="70pt" />

            <tbody>
              <row>
                <entry>-1</entry>

                <entry>Fehler</entry>
              </row>

              <row>
                <entry>0</entry>

                <entry>Erfolgreich</entry>
              </row>

              <row>
                <entry><replaceable>Wert</replaceable></entry>

                <entry>ASCII-Wert der Eingabe, die zum Abbruch geführt
                hat</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>
    </section>

    <section id="agi-befehl-say-time">
      <title><code>SAY TIME</code></title>

      <synopsis>SAY TIME <replaceable>Timestamp</replaceable> [<replaceable>Escape_Ziffern</replaceable>]</synopsis>

      <para>Sagt die übergebene Zeit. <parameter>Timestamp</parameter>
      ist dabei die Anzahl der Sekunden seit 00:00:00 Uhr am 1. Januar
      1970. Die Ausgabe kann durch Eingabe einer Ziffer, die in
      <code>Escape_Ziffern</code> bestimmt wird, abgebrochen
      werden.</para>

      <para>Ergebniswerte nach Ausführung:<informaltable colsep="none"
          frame="none" rowsep="none">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="70pt" />

            <tbody>
              <row>
                <entry>-1</entry>

                <entry>Fehler</entry>
              </row>

              <row>
                <entry>0</entry>

                <entry>Erfolgreich</entry>
              </row>

              <row>
                <entry><replaceable>Wert</replaceable></entry>

                <entry>ASCII-Wert der Eingabe, die zum Abbruch geführt
                hat</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>
    </section>

    <section id="agi-befehl-send-image">
      <title><code>SEND IMAGE</code></title>

      <synopsis>SEND IMAGE <replaceable>Dateiname</replaceable></synopsis>

      <para>Sendet das in <parameter>Dateiname</parameter> angegebene
      Bild auf den aktuellen Kanal. Der Dateiname darf keine Endung
      (z.B. <code>.gif</code> oder <code>.jpg</code>) enthalten. Diese
      Funktion wird von den meisten Channels nicht unterstützt.</para>

      <para>Ergebniswerte nach Ausführung:<informaltable colsep="none"
          frame="none" rowsep="none">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="70pt" />

            <tbody>
              <row>
                <entry>-1</entry>

                <entry>Fehler</entry>
              </row>

              <row>
                <entry>0</entry>

                <entry>Erfolgreich</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>
    </section>

    <section id="agi-befehl-send-text">
      <title><code>SEND TEXT</code></title>

      <synopsis>SEND TEXT "<replaceable>zu sendender Text</replaceable>"</synopsis>

      <para>Sendet den angegebenen Text auf den aktuellen Kanal. Diese
      Funktion wird von den meisten Channels nicht unterstützt.</para>

      <para>Ergebniswerte nach Ausführung:<informaltable colsep="none"
          frame="none" rowsep="none">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="70pt" />

            <tbody>
              <row>
                <entry>-1</entry>

                <entry>Fehler</entry>
              </row>

              <row>
                <entry>0</entry>

                <entry>Erfolgreich</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>
    </section>

    <section id="agi-befehl-set-autohangup">
      <title><code>SET AUTOHANGUP</code></title>

      <synopsis>SET AUTOHANGUP <replaceable>Timeout</replaceable></synopsis>

      <para>Stellt ein automatisches Auflegen nach der angegebenen
      Anzahl von Sekunden ein. Mit dem Wert <code>0</code> kann diese
      Funktion wieder deaktiviert werden.</para>

      <para>Ergebniswerte nach Ausführung:<informaltable colsep="none"
          frame="none" rowsep="none">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="70pt" />

            <tbody>
              <row>
                <entry>0</entry>

                <entry>Erfolgreich (Wert wurde gesetzt)</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>
    </section>

    <section id="agi-befehl-set-callerid">
      <title><code>SET CALLERID</code></title>

      <synopsis>SET CALLERID <replaceable>Nummer</replaceable></synopsis>

      <para>Setzt die Caller-ID des aktuellen Kanals.</para>

      <para>Ergebniswerte nach Ausführung:<informaltable colsep="none"
          frame="none" rowsep="none">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="70pt" />

            <tbody>
              <row>
                <entry>1</entry>

                <entry>Erfolgreich (Caller-ID wurde gesetzt)</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>
    </section>

    <section id="agi-befehl-set-context">
      <title><code>SET CONTEXT</code></title>

      <synopsis>SET CONTEXT <replaceable>Kontextname</replaceable></synopsis>

      <para>Setzt den Context, der nach dem Ausführen der
      AGI-Applikation angesprungen wird.</para>

      <para>Ergebniswerte nach Ausführung:<informaltable colsep="none"
          frame="none" rowsep="none">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="70pt" />

            <tbody>
              <row>
                <entry>0</entry>

                <entry>Gibt immer 0 zurück.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>

      <important>
        <para>Es wird nicht überprüft, ob der Kontext existiert. Wenn
        Sie einen ungültigen Kontext angeben, wird der Anruf nach
        Beendigung des Skriptes aufgelegt.</para>
      </important>
    </section>

    <section id="agi-befehl-set-extention">
      <title><code>SET EXTENSION</code></title>

      <synopsis>SET EXTENSION <replaceable>Extension</replaceable></synopsis>

      <para>Setzt die Extension, die nach dem Ausführen der
      AGI-Applikation angesprungen wird.</para>

      <para>Ergebniswerte nach Ausführung:<informaltable colsep="none"
          frame="none" rowsep="none">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="70pt" />

            <tbody>
              <row>
                <entry>0</entry>

                <entry>Gibt immer 0 zurück.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>

      <important>
        <para>Es wird nicht überprüft, ob die Extension existiert. Wenn
        Sie eine ungültige Extension angeben, wird Asterisk nach
        Beendigung des Skriptes bei der <code>i</code>-Extension
        weitermachen, falls vorhanden. Ansonsten wird der Anruf
        aufgelegt.</para>
      </important>
    </section>

    <section id="agi-befehl-set-music-on">
      <title><code>SET MUSIC</code></title>

      <synopsis>SET MUSIC [on [<replaceable>Klasse</replaceable>]|off]</synopsis>

      <para>Aktiviert (<code>on</code>) oder deaktiviert
      (<code>off</code>) die Warteschleifenmusik. Wenn
      <parameter>Klasse</parameter> nicht angegeben wurde, wird die
      Musikklasse <code>default</code> benutzt (siehe
      Konfigurationsdatei
      <filename>/etc/asterisk/musiconhold.conf</filename>).</para>

      <para>Ergebniswerte nach Ausführung:<informaltable colsep="none"
          frame="none" rowsep="none">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="70pt" />

            <tbody>
              <row>
                <entry>0</entry>

                <entry>Gibt immer 0 zurück.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>
    </section>

    <section id="agi-befehl-set-priority">
      <title><code>SET PRIORITY</code></title>

      <synopsis>SET PRIORITY <replaceable>Priorität</replaceable></synopsis>

      <para>Setzt die Priorität, die nach dem Ausführen der
      AGI-Applikation angesprungen wird (als Priorität kann auch ein
      Label angegeben werden).</para>

      <para>Ergebniswerte nach Ausführung:<informaltable colsep="none"
          frame="none" rowsep="none">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="70pt" />

            <tbody>
              <row>
                <entry>0</entry>

                <entry>Gibt immer 0 zurück.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>

      <important>
        <para>Es wird nicht überprüft, ob die Priorität existiert. Wenn
        Sie eine ungültige Priorität angeben, wird der Anruf nach
        Beendigung des Skriptes aufgelegt.</para>
      </important>
    </section>

    <section id="agi-befehl-set-variable">
      <title><code>SET VARIABLE</code></title>

      <synopsis>SET VARIABLE <replaceable>Variablenname</replaceable> <replaceable>Wert</replaceable></synopsis>

      <para>Setzt die Kanal-Variable
      <parameter>Variablenname</parameter> auf den Wert
      <parameter>Wert</parameter>.</para>

      <para>Ergebniswerte nach Ausführung:<informaltable colsep="none"
          frame="none" rowsep="none">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="70pt" />

            <tbody>
              <row>
                <entry>1</entry>

                <entry>Erfolgreich (Variable wurde gesetzt)</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>
    </section>

    <section id="agi-befehl-stream-file">
      <title><code>STREAM FILE</code></title>

      <synopsis>STREAM FILE <replaceable>Dateiname</replaceable> <replaceable>Escape_Ziffern</replaceable> [<replaceable>Offset</replaceable>]</synopsis>

      <para>Spielt die angegebene Datei <parameter>Dateiname</parameter>
      ab (dabei darf keine Dateiendung wie <code>.wav</code> oder
      <code>.gsm</code> angegeben werden). Das Abspielen kann dabei
      durch die Eingabe einer Ziffer, die in <code>Escape_Ziffern</code>
      definiert wurde, abgebrochen werden. Ist dies nicht erwünscht (es
      soll also kein Abbruch möglich sein), so muss an dieser Stelle
      <code>""</code> angegeben werden. Mit
      <parameter>Offset</parameter> kann ein Offset zum Start der Datei
      angegeben werden.</para>

      <para>Ergebniswerte nach Ausführung:<informaltable colsep="none"
          frame="none" rowsep="none">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="70pt" />

            <tbody>
              <row>
                <entry>-1</entry>

                <entry>Fehler</entry>
              </row>

              <row>
                <entry>0</entry>

                <entry>Erfolgreich (die Datei wurde komplett
                abgespielt)</entry>
              </row>

              <row>
                <entry><replaceable>Wert</replaceable></entry>

                <entry>ASCII-Wert der Eingabe, die zum Abbruch geführt
                hat</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>

      <important>
        <para><code>STREAM FILE</code> funktioniert manchmal nicht
        korrekt mit anderen Sprachen als Englisch. Stattdessen kann man
        <code>EXEC Playback <replaceable>Dateiname</replaceable></code>
        verwenden.</para>
      </important>
    </section>

    <section id="agi-befehl-tdd-mode">
      <title><code>TDD MODE</code></title>

      <synopsis>TDD MODE [on|off]</synopsis>

      <para>Aktiviert (<code>on</code>) oder deaktiviert
      (<code>off</code>) Übertragung und Empfang des TDD-Protokolls
      (Baudot) für TDD-Geräte (Telecommunications Device für the Deaf,
      Telekommunikationsgerät für Taubstumme, auch Schreibtelefon
      genannt) auf dem aktiven Kanal. Bisher wird TDD nur von
      Zap-Kanälen unterstützt.</para>

      <para>Ergebniswerte nach Ausführung:<informaltable colsep="none"
          frame="none" rowsep="none">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="70pt" />

            <tbody>
              <row>
                <entry>-1</entry>

                <entry>Fehler</entry>
              </row>

              <row>
                <entry>0</entry>

                <entry>Channel nicht TDD-fähig</entry>
              </row>

              <row>
                <entry>1</entry>

                <entry>Erfolgreich</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>
    </section>

    <section id="agi-befehl-verbose">
      <title><code>VERBOSE</code></title>

      <synopsis>VERBOSE <replaceable>Meldung</replaceable> <replaceable>Level</replaceable></synopsis>

      <para>Schreibt die <parameter>Meldung</parameter> auf das Command
      Line Interface (CLI). <parameter>Level</parameter> gibt dabei den
      Mindestwert des Verbosity-Levels an, damit die Ausgabe angezeigt
      wird.</para>

      <para>Ergebniswerte nach Ausführung:<informaltable colsep="none"
          frame="none" rowsep="none">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="70pt" />

            <tbody>
              <row>
                <entry>0</entry>

                <entry>Gibt immer 0 zurück.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>
    </section>

    <section id="agi-befehl-wait-for-digit">
      <title><code>WAIT FOR DIGIT</code></title>

      <synopsis>WAIT FOR DIGIT <replaceable>Timeout</replaceable></synopsis>

      <para>Wartet auf die Eingabe eines DTMF-Tones.
      <parameter>Timeout</parameter> gibt den Timeout der Applikation in
      Millisekunden an.</para>

      <para>Ergebniswerte nach Ausführung:<informaltable colsep="none"
          frame="none" rowsep="none">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="70pt" />

            <tbody>
              <row>
                <entry>-1</entry>

                <entry>Fehler</entry>
              </row>

              <row>
                <entry>0</entry>

                <entry>Timeout</entry>
              </row>

              <row>
                <entry><replaceable>Wert</replaceable></entry>

                <entry>ASCII-Wert der Eingabe, die zum Abbruch geführt
                hat</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>
    </section>
  </section>
</chapter>
