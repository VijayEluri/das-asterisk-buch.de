<?xml version="1.0" encoding="ISO-8859-1"?>
<chapter id="voicexml" lang="de" revision="$Revision: 1.1 $">
  <!--% Copyright (c) 2006
% - Stefan Wintermeyer <sw@amooma.de>
% - Norbert Huffschmid <norbert.huffschmid@hawhaw.de>
% Permission is granted to copy, distribute and/or modify this document
% under the terms of the GNU Free Documentation License, Version 1.2
% or any later version published by the Free Software Foundation;
% with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
% Texts. A copy of the license is included in the section entitled "GNU
% Free Documentation License".
% Asterisk training and consulting is offered at http://www.amooma.de-->

  <title>Asterisk und VoiceXML</title>

  <para>VoiceXML ist eine auf XML basierende Auszeichnungssprache für die
  Implementierung interaktiver Sprachdialoge.<tip>
      <para>VoiceXML ist ein W3C Standard. Die aktuelle Version lautet 2.0 und
      ist unter folgender Addresse nachzulesen: <ulink
      url="http://www.w3.org/TR/voicexml20/"><citetitle>http://www.w3.org/TR/voicexml20/</citetitle></ulink>.
      Auf Ken Rehor's Webseite <emphasis>World of VoiceXML</emphasis> (<ulink
      url="http://www.kenrehor.com/voicexml/"><citetitle>http://www.kenrehor.com/voicexml/</citetitle></ulink>)
      sind die wichtigsten Links zum Thema VoiceXML zusammengefasst.</para>
    </tip> Die zugrunde liegende Hardware soll dabei für den
  Anwendungsprogrammierer verborgen bleiben (Plattformunabhängigkeit), so dass
  er sich voll und ganz auf das Design der eigentlichen Sprachapplikation
  konzentrieren kann. Um sich eine Vorstellung über die Funktionsweise von
  VoiceXML zu machen, ist es hilfreich einen Vergleich zu anderen
  Auszeichnungssprachen, wie z.B. HTML, zu ziehen:</para>

  <para>VoiceXML-Dokumente liegen genau wie HTML-Dokumente auf einem Webserver
  und werden über das HTTP Protokoll heruntergeladen. Das Herunterladen
  erfolgt wie bei HTML durch einen Browser, einen sogenannten
  <emphasis>Voicebrowser</emphasis>. Dieser Voicebrowser ist aber im Gegensatz
  zu den hinlänglich bekannten Webbrowsern <emphasis>nicht</emphasis>
  irgendeine Software die auf einem Gerät des Endanwenders läuft. Vielmehr
  handelt es sich um einen sehr leistungsfähigen Computer, der einerseits am
  Telefonnetz, andererseits am Internet angeschlossen ist. Der Voicebrowser
  ist sozusagen das Verbindungsglied zwischen der Telefonwelt und der
  IP-Welt.</para>

  <para>Wie ein konventioneller Webbrowser muss auch der Voicebrowser von
  einem Endanwender bedient werden. Während man aber einen Webbrowser mit den
  Augen betrachtet und mit Maus und Tastatur steuert, ruft man einen
  Voicebrowser über ein Telefon an, lauscht seinen Ansagen und steuert ihn
  durch Sprache bzw. das Drücken der Nummerntasten auf dem Telefon. Der
  Funktionsumfang eines Voicebrowsers umfaßt also im Wesentlichen:</para>

  <para><itemizedlist>
      <listitem>
        <para>Entgegennehmen von Anrufen</para>
      </listitem>

      <listitem>
        <para>Herunterladen von VoiceXML-Dokumenten.</para>
      </listitem>

      <listitem>
        <para>Interpretation der VoiceXML Dokumente</para>
      </listitem>

      <listitem>
        <para>Sprachsynthese (TTS - Text-to-Speech)</para>
      </listitem>

      <listitem>
        <para>Automatische Spracherkennung (ASR - Automatic speech
        recognition)</para>
      </listitem>

      <listitem>
        <para>Erkennung von DTMF Eingaben (Dual Tone Multi Frequency)</para>
      </listitem>

      <listitem>
        <para>Navigation zu weiteren VoiceXML Dokumenten</para>
      </listitem>

      <listitem>
        <para>Aufnehmen von Nachrichten des Anrufers</para>
      </listitem>

      <listitem>
        <para>Weitervermittlung des Anrufs</para>
      </listitem>
    </itemizedlist></para>

  <para>Bei näherer Betrachtung der Liste fällt auf, dass es sich hierbei um
  Funktionen handelt, für die der Asterisk eigentlich prädestiniert
  wäre.<warning>
      <para>Zur Zeit der Drucklegung dieses Buches gibt es leider noch kein
      fertiges VoiceXML Add-On für Asterisk. Wer sich bis dahin schon einmal
      mit dem Thema VoiceXML auseinandersetzen will, der sei an dieser Stelle
      auf das Hastenix-AGI-Skript von <ulink
      url="http://hastenix.hawhaw.de/"><citetitle>http://hastenix.hawhaw.de/</citetitle></ulink>
      verwiesen.</para>
    </warning></para>

  <section id="hastenix">
    <title>Asterisk und Hastenix</title>

    <para>Hastenix steht für <emphasis>Hawhaw Adapter for aSTErisk aNd
    voIceXml</emphasis>. Das <ulink
    url="http://www.hawhaw.de/"><citetitle>HAWHAW</citetitle></ulink> Toolkit
    hat eigentlich nichts mit Asterisk zu tun, sondern beschäftigt sich mit
    der Erstellung von Webapplikationen für mobile Endgeräte. Neben anderen
    Auszeichnungssprachen wie HTML und WML, unterstützt HAWHAW auch die
    Ausgabe von VoiceXML. Die eigentliche Intention des Hastenix Skripts ist
    es, einen Asterisk dahin gehend zu erweitern, dass er als Voicebrowser für
    HAWHAW-Anwendungen eingesetzt werden kann.</para>

    <para>Das Skript unterstützt nur einen kleinen Teil des gesamten VoiceXML
    Sprachumfangs. Um einen ersten Einblick in die Thematik zu bekommen ist es
    aber dennoch hilfreich. Alle Beispiele der folgenden Kapitel wurden mit
    dem Skript erfolgreich getestet und können als Basis für eigene VoiceXML
    Anwendungen auf dem Asterisk dienen. Ein Anleitung zur Installation des
    Skripts und zur Einbindung in den Asterisk Dialplan findet sich auf der
    Webseite <ulink
    url="http://hastenix.hawhaw.de/"><citetitle>http://hastenix.hawhaw.de/</citetitle></ulink>.</para>

    <para>Systemvoraussetzungen für den Einsatz des Hastenix Skripts
    sind:</para>

    <itemizedlist>
      <listitem>
        <para>Asterisk 1.2 oder höher</para>
      </listitem>

      <listitem>
        <para>Perl 5.8 mit Thread Support</para>
      </listitem>

      <listitem>
        <para>Eine beliebiges TTS-System, z.B. Festival, Cepstral, MBROLA,
        usw.</para>
      </listitem>
    </itemizedlist>

    <para>Um das Hastenix Skript auf Ihrem Asterisk zu installieren gehen Sie
    wie folgt vor:</para>

    <orderedlist>
      <listitem>
        <para>Laden Sie das Perlskript hastenix.pl von <ulink
        url="http://www.hawhaw.de/download/hastenix.pl"><citetitle>http://www.hawhaw.de/download/hastenix.pl</citetitle></ulink>
        mit <command>wget http://www.hawhaw.de/download/hastenix.pl</command>
        herunter und speichern Sie es in Ihrem AGI Verzeichnis
        (<filename>/var/lib/asterisk/agi-bin/</filename>) ab.<screen>big-island:~# cd /var/lib/asterisk/agi-bin/
big-island:/var/lib/asterisk/agi-bin# wget http://www.hawhaw.de/download/hastenix.pl
--12:07:40--  http://www.hawhaw.de/download/hastenix.pl
           =&gt; `hastenix.pl'
Resolving www.hawhaw.de... 82.165.68.110
Connecting to www.hawhaw.de|82.165.68.110|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 23,378 (23K) [text/plain]

100%[====================================&gt;] 23,378        --.--K/s             

12:07:40 (4.55 MB/s) - `hastenix.pl' saved [23378/23378]

big-island:/var/lib/asterisk/agi-bin#</screen></para>
      </listitem>

      <listitem>
        <para>Setzen Sie mit <command>chmod 755 hastenix.pl</command> die
        Dateirechte um das Perlskript ausführbar zu machen: <screen>big-island:/var/lib/asterisk/agi-bin# chmod 755 hastenix.pl 
big-island:/var/lib/asterisk/agi-bin# </screen></para>
      </listitem>

      <listitem>
        <para>Passen Sie den Konfigurationsteil am Anfang des Skripts Ihren
        Systemvoraussetzungen an. Setzen Sie die <varname>$DIALOUT</varname>
        variable auf <parameter>Busy</parameter>, um die
        Dialout-Funktionalität zu deaktivieren.</para>
      </listitem>

      <listitem>
        <para>Binden Sie das Skript wie folgt in Ihren Dialplan ein:</para>

        <para><screen>;
; Hastenix Beispiel zur Sprachausgabe mit TTS
;
exten =&gt; 4291,1,Answer
exten =&gt; 4291,2,AGI(hastenix.pl|http://hastenix.hawhaw.de/aaw/sprachausgabe.vxml)
exten =&gt; 4291,3,Hangup</screen></para>
      </listitem>

      <listitem>
        <para>Starten Sie Ihren Asterisk im Konsolenmodus mit einem hohen
        Verbose-Level (mindestens 5):</para>

        <para><command>asterisk -vvvvvvc</command></para>

        <warning>
          <para>Wenn Sie sich mit der -r Option auf einen bereits laufenden
          Asteriskprozess reconnecten, werden aufgrund eines Asterisk Bugs
          evtl. Fehlermeldungen im Konsolenfenster nicht angezeigt. Sie können
          aber mit <command>set verbose 5</command> auch hier den
          Verbose-Level hochstellen.</para>
        </warning>
      </listitem>

      <listitem>
        <para>Wählen Sie die 4291, beobachten Sie die Ausgaben im
        Konsolenfenster und lauschen Sie am Telefonhörer.</para>
      </listitem>

      <listitem>
        <para>Installieren Sie evtl. fehlende Perlmodule nach, falls eine
        entsprechende Fehlermeldung im Konsolenfenster erscheint.</para>
      </listitem>

      <listitem>
        <para>Fertig! Wenn alles klappt hören Sie einen Begrüßungstext.</para>
      </listitem>
    </orderedlist>
  </section>

  <section id="voicexml-sprachausgabe">
    <title>Sprachausgabe</title>

    <para>Beginnen wir mit einem möglichst einfachen VoiceXML
    Dokument:<example>
        <title>sprachausgabe.vxml</title>

        <screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;vxml version="2.0"&gt;
&lt;form&gt;
&lt;block&gt;&lt;prompt&gt;Willkommen bei der Apfelmus GmbH&lt;break time="1000ms"/&gt;&lt;/prompt&gt;&lt;/block&gt;
&lt;block&gt;&lt;prompt&gt;Hier spricht der Asterisk.&lt;/prompt&gt;&lt;/block&gt;
&lt;/form&gt;
&lt;/vxml&gt;</screen>
      </example></para>

    <para>Die erste Zeile kommt jedem bekannt vor, der sich schon einmal mit
    XML beschäftigt hat. Sie hat noch nichts mit VoiceXML zu tun, sondern
    besagt lediglich, dass es sich um ein UTF-8 codiertes XML-Dokument
    handelt.</para>

    <para>Der zweite Zeile mit dem XML Root-Element kommt dagegen schon zum
    Thema: Sie sagt dem Voicebrowser, dass es sich um ein VoiceXML Dokument
    der Version 2.0 handelt. Man sieht in diesem Element häufig auch diverse
    Namespace-Attribute. Erforderlich sind diese jedoch nicht und in den hier
    aufgezeigten Beispielen wollen wir der Einfachheit halber darauf
    verzichten.</para>

    <para>Das <token>&lt;form&gt;</token> Element wird den Einen oder Anderen
    an dieser Stelle vielleicht verwundern. Mit einem Formular, wie man es von
    HTML kennt, hat es nämlich nicht viel gemeinsam. Wie man im Beispiel
    sieht, erfolgt hier lediglich eine Ausgabe von Text, ohne dass
    irgendwelche Daten aufgesammelt oder abgeschickt würden. Wenn man die
    Analogie zu HTML sucht, entspricht das &lt;form&gt; Element von VoiceXML
    eigentlich mehr einem HTML <token>&lt;body&gt;</token> Element. <tip>
        <para>Dem interessierten Leser sei an dieser Stelle gesagt, dass es
        alternativ zu <code>&lt;form&gt;</code> in VoiceXML auch noch ein
        <code>&lt;menu&gt;</code> Element gibt. Es handelt sich hierbei um
        eine Spezialform des <code>&lt;form&gt;</code> Elements, die uns an
        dieser Stelle nicht weiter interessieren soll.</para>
      </tip></para>

    <para>Die folgenden Element sind mehr oder weniger selbsterklärend:
    Innerhalb eines <token>&lt;form&gt;</token> Elements können mehrere
    <token>&lt;block&gt;</token> Elemente enthalten sein. In
    <token>&lt;block&gt;</token> Elementen können
    <token>&lt;prompt&gt;</token> Elemente stehen, die eine Sprachausgabe über
    das Text-to-Speech System des Voicebrowser bewirken. Ein Voicebrowser, der
    von einem Webserver das obige Dokument empfangen hat, sagt zuerst
    "Willkommen bei der Apfelmus GmbH", wartet dann eine Sekunde und sagt dann
    "Hier spricht der Asterisk".</para>

    <para>Text-to-Speech Systeme für den Asterisk sind mittlerweile in recht
    guter Qualität verfügbar. Als die am weitesten verbreiteten Produkte sind
    hier Festival, MBROLA und Cepstral zu nennen (siehe <xref
    linkend="text2speech" />).</para>
  </section>

  <section id="voicexml-abspielen">
    <title>Abspielen von Sounddateien</title>

    <para>Wem die Computerstimme eines Text-to-Speech Systems zu synthetisch
    klingt, der kann unter Umständen auf das Abspielen vorab aufgenommener
    Sounddateien ausweichen. Es hängt natürlich stark von der jeweiligen
    Anwendung ab, ob sich die Sprachausgaben aus einer überschaubaren Anzahl
    von Sounddateien realisieren lassen oder ob der Einsatz von TTS
    unvermeidlich ist. Wenn man sich für die Variante mit den Sounddateien
    entscheidet, bietet VoiceXML folgendes Sprachkonstrukt an:</para>

    <para><example>
        <title>sounddatei.vxml</title>

        <screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;vxml version="2.0"&gt;
&lt;form&gt;
&lt;block&gt;&lt;prompt&gt;&lt;audio src="demo-thanks.gsm"&gt;Vielen Dank!&lt;/audio&gt;&lt;/prompt&gt;&lt;/block&gt;
&lt;/form&gt;
&lt;/vxml&gt;</screen>
      </example> Im Beispiel wird eine wohlbekannte gsm-Datei aus der Asterisk
    Demo abgespielt. Man beachte, dass sich sowohl die VoiceXML-Datei als auch
    die Sounddatei auf einem entfernten Webserver und nicht im lokalen
    Filesystem des Asterisk befinden. Das <token>&lt;audio&gt;</token> Element
    innerhalb des <token>&lt;prompt&gt;</token> Elements weist den
    Voicebrowser an, die Datei <filename>demo-thanks.gsm</filename> zu laden
    und abzuspielen. Falls aus technischen Problemen ein Abspielen der
    angegebenen Sounddatei nicht möglich sein sollte, wird der im
    <token>&lt;audio&gt;</token> Element vorhandene Text per TTS ausgegeben.
    Solange jedoch alles klappt, ist dieser Text ohne Bedeutung.</para>

    <para>Das Format der Sounddatei spielt aus VoiceXML-Sicht keine Rolle. Der
    zur Anwendung kommende Voicebrowser muss das Format allerdings
    unterstützen. Für eine Asterisk-basierte VoiceXML Lösung bietet sich daher
    das gsm-Format an. Im einfachsten Fall wird man mit dem
    <command>record</command> Kommando einen Text aufnehmen und die erzeugte
    Datei im Anschluß auf den Webserver hochladen. Wer jedoch auf ein
    professionelles Auftreten Wert legt, sollte seine Aufnahmen in guter
    Qualität über ein Tonstudio anfertigen lassen.</para>

    <para>Mit dem Hastenix Skript können Sie dieses Beispiel anhören, wenn Sie
    Ihren Dialplan wie folgt erweitern und danach die 4292 wählen:</para>

    <para><screen>;
; Hastenix Beispiel zum Abspielen von Sounddateien
;
exten =&gt; 4292,1,Answer
exten =&gt; 4292,2,AGI(hastenix.pl|http://hastenix.hawhaw.de/aaw/sounddatei.vxml)
exten =&gt; 4292,3,Hangup</screen></para>
  </section>

  <section id="voicexml-dtmf">
    <title>DTMF Eingabe</title>

    <para>Ein wesentlicher Bestandteil von VoiceXML ist das Thema
    Spracherkennung und die Definition von Grammatiken. Eine Sprachanwendung
    wird natürlich erst dann interaktiv, wenn der Anrufer durch eigene
    Eingaben in den Ablauf eingreifen kann. Mit den bisher behandelten
    Funktionen ließe sich ja gerade einmal eine Ansagemaschine
    realisieren.</para>

    <para>Da der Asterisk mit Bordmitteln jedoch keine Spracherkennung
    unterstützt , wollen wir auf dieses Thema nicht näher eingehen, sondern
    uns dem kleinen Bruder der Spracherkennung zuwenden: Der
    DTMF-Erkennung.</para>

    <para>Ein DTMF-Signal wird erzeugt, wenn der Anrufer während eines
    Sprachdialogs eine Taste seines Telefons drückt. In den vorherigen
    Kapiteln zum Thema Dialplan haben wir gesehen, dass der Asterisk
    hervorragend mit DTMF-Eingaben während einer Verbindung umgehen kann.
    Schreiben wir ein rudimentäres Sprachportal der Apfelmus GmbH einmal in
    VoiceXML-Schreibweise:</para>

    <para><example>
        <title>dtmf.vxml</title>

        <screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;vxml version="2.0"&gt;
&lt;form&gt;
&lt;block&gt;&lt;prompt&gt;Willkommen im Sprachportal der Apfelmus GmbH
&lt;break time="300ms"/&gt;&lt;/prompt&gt;&lt;/block&gt;
&lt;block&gt;&lt;prompt&gt;Für eine Beschreibung unserer neuen Produkte drücken Sie bitte die eins.
  &lt;break time="300ms"/&gt;&lt;/prompt&gt;&lt;/block&gt;
&lt;block&gt;&lt;prompt&gt;Für allgemeine Informationen über unsere Firma drücken Sie bitte die zwei.
  &lt;break time="300ms"/&gt;&lt;/prompt&gt;&lt;/block&gt;
&lt;field&gt;&lt;prompt timeout="10s"/&gt;&lt;noinput&gt;&lt;exit/&gt;&lt;/noinput&gt;&lt;/field&gt;
&lt;/form&gt;
&lt;link next="products.vxml" dtmf="1"&gt;&lt;/link&gt;
&lt;link next="info.vvxml" dtmf="2"&gt;&lt;/link&gt;
&lt;/vxml&gt;</screen>
      </example></para>

    <para>Die ersten Zeilen dieses Dokuments verstehen wir bereits. Nach den
    drei Ansageblöcken kommt aber jetzt ein <token>&lt;field&gt;</token>
    Element. Dieses Element signalisiert dem Voicebrowser, dass er jetzt auf
    eine Eingabe des Benutzers warten soll. Bei dem
    <token>&lt;noinput&gt;</token> Element handelt es sich um ein sogenanntes
    Event, das der Voicebrowser in bestimmten Situationen sendet. In unserem
    Fall sendet er es dann, wenn 10 Sekunden lang keine Eingabe erfolgte. Das
    <token>&lt;exit&gt;</token> Element überträgt die Kontrolle wieder an den
    Interpreter, was hier nichts anderes heisst, als dass die Verbindung
    beendet wird.</para>

    <para>Nach dem bisher gesagten würde der Voicebrowser anhand dieses
    Dokuments 3 Ansagen spielen, 10 Sekunden warten und dann die Verbindung
    beenden. Wenn da nicht noch die <token>&lt;link&gt;</token> Elemente am
    Ende des Dokuments wären! Hier wird nämlich dem Voicebrowser mitgeteilt
    was er tun soll, wenn er im Verlauf der Verbindung das Drücken der Taste 1
    bzw. 2 erkennt: Er soll in diesem Fall das aktuelle VoiceXML Dokument
    verlassen und ein neues VoiceXML Dokument laden und ausführen.</para>

    <para>Erwähnenswert ist noch die Position der <token>&lt;link&gt;</token>
    Elemente im Dokument. Je nach dem wo diese Elemente positioniert sind,
    entscheidet der Voicebrowser ob das Erkennung eines DTMF-Tones
    berücksichtigt werden soll oder nicht. In unserem Beispiel stehen die
    Links im Kontext des gesamten Dokuments. Somit muss der Voicebrowser
    während der gesamten Verbindung ein Ohr darauf haben, ob der Anrufer eine
    der Tasten 1 bzw. 2 gedrückt hat.</para>

    <para>Mit dem Hastenix Skript können Sie dieses Beispiel interaktiv
    testen, wenn Sie Ihren Dialplan erneut erweitern und danach die 4293
    wählen:</para>

    <para><screen>
;
; Hastenix Beispiel zur DTMF-Eingabe
;
exten =&gt; 4293,1,Answer
exten =&gt; 4293,2,AGI(hastenix.pl|http://hastenix.hawhaw.de/aaw/dtmf.vxml)
exten =&gt; 4293,3,Hangup</screen></para>
  </section>

  <section id="voicexml-sprachaufnahme">
    <title>Sprachaufnahme</title>

    <para>Im Laufe eines Sprachdialogs möchte man manchmal dem Anrufer die
    Gelegenheit geben eine Nachricht zu hinterlassen. Während die
    Voicemailfunktion des Asterisk aufgenommene Nachricht im lokalen
    Filesystem speichert, hat man mit VoiceXML die Möglichkeit die
    aufgenommene Spracheingabe auf den Webserver hochzuladen und dort zu
    verarbeiten.</para>

    <para>Erstellen wir also eine Beispielanwendung, bei welcher der Anrufer
    aufgefordert wird eine Nachricht zu hinterlassen und spielen wir ihm
    danach seine Worte noch einmal vor.</para>

    <section id="voicexml-upload">
      <title>Upload von Sprachaufnahmen zum Webserver</title>

      <para>Die Durchführung der Aufnahme und das anschließende Hochladen auf
      einen entfernten Webserver kann mit folgendem Dokument realisiert
      werden:</para>

      <para><example>
          <title>aufnahme-1.vxml</title>

          <screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;vxml version="2.0"&gt;
&lt;form&gt;
&lt;record name="aufnahme" beep="true"&gt;
&lt;prompt&gt;Bitte hinterlassen Sie Ihre Nachricht nach dem Piepton.&lt;/prompt&gt;
&lt;filled&gt;
&lt;submit next="aufnahme-2-vxml.php" enctype="multipart/form-data" method="post" namelist="aufnahme"/&gt;
&lt;/filled&gt;
&lt;catch event="connection.disconnect.hangup"&gt;
&lt;submit next="aufnahme-2-vxml.php" enctype="multipart/form-data" method="post" namelist="aufnahme"/&gt;
&lt;/catch&gt;
&lt;/record&gt;
&lt;/form&gt;
&lt;/vxml&gt;</screen>
        </example></para>

      <para>Das <token>&lt;record&gt;</token> Element ist wie das
      &lt;field&gt; Element ein Eingabeelement innerhalb eines
      <token>&lt;form&gt;</token> Elements. Die Angabe eines Namens ist hier
      notwendig, um die Aufnahme später zum Webserver abschicken zu können und
      um die empfangenen Daten dort weiter verarbeiten zu können. Darüber
      hinaus verdienen die folgenden optionalen Attribute Erwähnung:</para>

      <itemizedlist>
        <listitem>
          <para>beep (true/false): Wenn dieses Attribut auf "true" gesetzt
          wird, erzeugt der Voicebrowser einen kurzen Piepton bevor die
          Aufnahme beginnt.</para>
        </listitem>

        <listitem>
          <para>maxtime: Die Aufnahme endet wenn der im maxtime-Attribut
          angegebene Zeitwert überschritten wurde. Zeitwerte müssen in
          VoiceXML prinzipiell immer mit der richtigen Maßeinheit angegeben
          werden, z.B. "60s" oder "600ms".</para>
        </listitem>

        <listitem>
          <para>finalsilence: Hier kann man angeben nach wieviel Sekunden
          Stille die Aufnahme als beendet betrachtet werden soll. Hier gilt es
          einen vernünftigen Mittelwert zu finden. Zu kleine Werte beenden die
          Aufnahme vielleicht vorzeitig, weil der Anrufer nur mal Luft geholt
          oder kurz nachgedacht hat. Zu lange Werte spannen die Geduld des
          Anrufers unnötig auf die Probe, da er nach dem Ende seiner Ansprache
          keinen Fortschritt wahrnimmt. Die Voicebrowser haben normalerweise
          einen guten Mittelwert als Defaultwert fest voreingestellt, so dass
          man dieses Attribut nicht unbedingt setzen muss.<footnote>
              <para>Der Anrufer kann die Aufnahme auch durch das Senden eines
              DTMF-Tones beenden, nur sollte man ihm dies vorher
              mitteilen.</para>
            </footnote></para>
        </listitem>
      </itemizedlist>

      <para>Für das Absenden der Aufnahmedaten werden im obigen Dokument zwei
      Kriterien definiert:</para>

      <orderedlist>
        <listitem>
          <para>Der Anrufer sagt nichts mehr oder drückt eine Taste seines
          Telefons. In diesem Fall kommt das <token>&lt;filled&gt;</token>
          Element zum Zug und sendet die aufgenommenen Sprachdaten zum im
          <token>&lt;submit&gt;</token> Element angegebenen PHP-Skript.</para>
        </listitem>

        <listitem>
          <para>Der Anrufer legt nach seiner Ansprache auf. Auch in diesem
          Fall soll die Aufnahme nicht verloren gehen, sondern per
          <token>&lt;submit&gt;</token> zum Webserver übertragen werden. Man
          erreicht dies, indem man in einem <token>&lt;catch&gt;</token>
          Element das Event "connection.disconnect.hangup" fängt, welches die
          VoiceXML-Plattform aussendet, sobald sie das Auflegen des Anrufers
          erkannt hat.</para>
        </listitem>
      </orderedlist>

      <para>Man sieht, dass die <token>&lt;submit&gt;</token> Anweisung für
      beide Fälle völlig identisch ist. Im next-Attribut wird das empfangende
      Skript angegeben. Die Sendemethode sollte bei Aufnahmen immer "post",
      der encoding type immer "multipart/form-data" lauten. Im
      namelist-Atttribut ist genau der Name einzutragen, der innerhalb des
      <token>&lt;record&gt;</token> Element im name-Attribut angegeben
      wurde.</para>
    </section>

    <section id="voicexml-verarbeitung">
      <title>Verarbeitung von Sprachaufnahmen auf dem Webserver</title>

      <para>Wir haben im letzten Kapitel gesehen, dass die Sprachaufnahme mit
      der HTTP-Post Methode zu einem Skript namens
      <filename>aufnahme-2-vxml.php</filename> gesendet wird. Dieses Vorgehen
      ist vergleichbar mit dem Hochladen einer Datei vom Webbrowser aus. In
      beiden Fällen muß der Webserver Aktionen einleiten, um die empfangenen
      Daten zu verarbeiten. Dies kann auf unterschiedlichste Arten geschehen,
      je nach dem welche serverseitige Technologie zum Einsatz kommt. In
      unserem Beispiel verwenden wir ein kleines PHP-Skript:</para>

      <para><example>
          <title>aufnahme-2-vxml.php</title>

          <screen>&lt;?php
  echo '&lt;?xml version="1.0" encoding="UTF-8"?&gt;';

  $filename = $_FILES['aufnahme']['name'];
  move_uploaded_file($_FILES['aufnahme']['tmp_name'],
                     "./aufnahmen/" . $filename);
?&gt;

&lt;vxml version="2.0"&gt;
&lt;form&gt;
&lt;block&gt;&lt;prompt&gt;Ihre Nachricht war:&lt;break time="300ms"/&gt;&lt;/prompt&gt;&lt;/block&gt;
&lt;block&gt;&lt;prompt&gt;
&lt;audio src="./aufnahmen/&lt;?php echo $filename; ?&gt;"&gt;&lt;/audio&gt;
&lt;break time="300ms"/&gt;
&lt;/prompt&gt;&lt;/block&gt;
&lt;/form&gt;
&lt;/vxml&gt;</screen>
        </example></para>

      <para>Das Beispielscript speichert die empfangene Sounddatei im Pfad
      <filename>aufnahmen</filename> ab. Alternativ könnte man die Aufnahme
      natürlich auch in einer Datenbank abspeichern oder als Email versenden.
      Bei der obigen Variante sollte man allerdings darauf achten, dass der
      Webserver die erforderlichen Zugriffsrechte hat, um in das
      <filename>aufnahmen</filename>-Verzeichnis schreiben zu können.</para>

      <para>Damit der Anrufer seine aufgenommenen Worte hören kann, sendet der
      Webserver ein passendes VoiceXML Dokument zurück. Der Aufbau dieses
      Dokuments mit dem <token>&lt;audio&gt;</token> Element wurde schon im
      Kapitel "Abspielen von Sounddateien" behandelt.</para>

      <para>Mit dem Hastenix Skript können Sie dieses Beispiel interaktiv
      testen, indem Sie Ihren Dialplan einmal mehr erweitern und die 4294
      wählen:</para>

      <para><screen>;
; Hastenix Beispiel zur Sprachaufnahme
;
exten =&gt; 4294,1,Answer
exten =&gt; 4294,2,AGI(hastenix.pl|http://hastenix.hawhaw.de/aaw/aufnahme-1.vxml)
exten =&gt; 4294,3,Hangup</screen></para>

      <note>
        <para>Bevor Sie während des Tests eventuell unüberlegte Äußerungen
        machen: Seien Sie sich bewußt, dass Ihre Worte auf den HAWHAW-Server
        übertragen und dort wie oben beschrieben abgespeichert werden!</para>
      </note>
    </section>
  </section>

  <section id="voicexml-anrufweiterleitung">
    <title>Anrufweiterleitung</title>

    <para>Erinnern wir uns an das Kapitel zum Voicemailsystem des Asterisk und
    an die Einrichtung der verschiedenen Mailboxen für die Familie Meier.
    Nehmen wir einmal an der Asterisk der Familie Meier ist nur über eine
    Nummer von außen erreichbar, und die Mitglieder der Familie Meier wollen
    ein interaktives Anrufverteilsystem einsetzen. Das folgende Beispiel
    zeigt, wie so etwas mit VoiceXML realisiert werden könnte:</para>

    <para><example>
        <title>weiterleitung.vxml</title>

        <screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;vxml version="2.0"&gt;
&lt;form&gt;
&lt;block&gt;&lt;prompt&gt;Hier ist der Telefonanschluss der Familie Meier.&lt;break time="300ms"/&gt;&lt;/prompt&gt;&lt;/block&gt;
&lt;block&gt;&lt;prompt&gt;Druecken Sie die 1, um mit Horst Meier verbunden zu werden.&lt;break time="300ms"/&gt;&lt;/prompt&gt;&lt;/block&gt;
&lt;block&gt;&lt;prompt&gt;Druecken Sie die 2, um mit Eva Meier verbunden zu werden.&lt;break time="300ms"/&gt;&lt;/prompt&gt;&lt;/block&gt;
&lt;block&gt;&lt;prompt&gt;Druecken Sie die 3, um mit Peter Meier verbunden zu werden.&lt;break time="300ms"/&gt;&lt;/prompt&gt;&lt;/block&gt;
&lt;block&gt;&lt;prompt&gt;Oder druecken Sie die 4, um mit Lisa Meier verbunden zu werden.&lt;break time="300ms"/&gt;&lt;/prompt&gt;&lt;/block&gt;
&lt;field&gt;&lt;prompt timeout="10s"/&gt;&lt;noinput&gt;&lt;exit/&gt;&lt;/noinput&gt;&lt;/field&gt;
&lt;/form&gt;
&lt;link next="#transfer1" dtmf="1"&gt;&lt;/link&gt;
&lt;form id="transfer1"&gt;Man 
&lt;transfer dest="tel:200" bridge="false" /&gt;
&lt;/form&gt;
&lt;link next="#transfer2" dtmf="2"&gt;&lt;/link&gt;
&lt;form id="transfer2"&gt;
&lt;transfer dest="tel:201" bridge="false" /&gt;
&lt;/form&gt;
&lt;link next="#transfer3" dtmf="3"&gt;&lt;/link&gt;
&lt;form id="transfer3"&gt;
&lt;transfer dest="tel:202" bridge="false" /&gt;
&lt;/form&gt;
&lt;link next="#transfer4" dtmf="4"&gt;&lt;/link&gt;
&lt;form id="transfer4"&gt;
&lt;transfer dest="tel:203" bridge="false" /&gt;
&lt;/form&gt;
&lt;/vxml&gt;</screen>
      </example></para>

    <para>Am Anfang des Dokumentes gibt der Voicebrowser Instruktionen an den
    Anrufer, was dieser zu tun hat, um seinen gewünschten Gesprächspartner zu
    erreichen. Das <token>&lt;field&gt;</token> Element, welches nach 10
    Sekunden Untätigkeit die Verbindung beendet, kennen wir bereits aus dem
    Kapitel zur DTMF-Eingabe.</para>

    <para>Auch das <token>&lt;link&gt;</token> Element haben wir dort
    kennengelernt. Allerdings ist hier die Syntax nun ein klein wenig anders.
    Der Unterschied liegt im #-Zeichen. Ein next-Attribut ohne Lattenzaun
    bewirkt das Laden eines neuen VoiceXML Dokuments, während bei einem
    next-Attribut mit Lattenzaun ein anderer Dialogabschnitt innerhalb des
    selben Dokuments angesprungen wird. Kommt Ihnen das irgendwie bekannt vor?
    Bei HTML-Dokumenten gibt es beim <token>&lt;a&gt;</token> Element eine
    ähnliche Logik!</para>

    <para>Wie man in diesem Beispiel sieht, können durchaus mehrere
    <token>&lt;form&gt;</token> Elemente in einem VoiceXML Dokument
    existieren. Sie werden durch eine eindeutige ID unterschieden und über die
    DTMF-getriggerten <token>&lt;link&gt;</token> Elemente angesprungen. Die
    genaue Position der <token>&lt;link&gt;</token> Elemente im Dokument ist
    nur insofern von Bedeutung, als dass sie im Kontext des
    <token>&lt;vxml&gt;</token> Elements stehen und damit permanent aktiv
    sind. Man hätte die <token>&lt;link&gt;</token> Elemente aber auch zu
    einem Linkblock zusammenfassen können, ohne etwas an der Funktionalität zu
    ändern.</para>

    <para>Wenn nun durch das Erkennen eines DTMF-Tons eines der unteren
    <token>&lt;form&gt;</token> Element erreicht wurde, leitet der
    Voicebrowser den Anruf an die angegebene Destination weiter. Das
    dest-Attribut muß gemäß RFC 2806 (URLs for Telephone Calls) <ulink
    url="http://www.ietf.org/rfc/rfc2806.txt">http://www.ietf.org/rfc/rfc2806.txt</ulink>
    angegeben werden.</para>

    <para>Das Attribut <parameter>bridge="false"</parameter> bedeutet, dass
    sich der Voicebrowser nicht weiter um diese Verbindung kümmert, sondern
    mit der Weiterleitung des Anrufs an die angegebene Nummer seine
    Schuldigkeit getan hat.</para>

    <para>Mit dem Hastenix Skript können Sie auch dieses Beispiel interaktiv
    testen. Sie werden aber nur dann erfolgreich weitervermittelt werden, wenn
    Sie auf Ihrem Asterisk entsprechende interne Teilnehmer mit den Rufnummern
    200 bis 203 eingerichtet haben und die <varname>$DIALOUT</varname>
    Konfigurationsvariable so gesetzt haben, dass die Ausführung des
    <command>Dial</command> Kommandos erlaubt ist.</para>

    <para><screen>;
; Hastenix Beispiel zur Weitervermittlung
;
exten =&gt; 4295,1,Answer
exten =&gt; 4295,2,AGI(hastenix.pl|http://hastenix.hawhaw.de/aaw/weiterleitung.vxml)
exten =&gt; 4295,3,Hangup</screen></para>

    <warning>
      <para>Beachten Sie, dass es sich bei einem Anruf-Transfer um ein sehr
      mächtiges Feature handelt, das aber bei falscher Anwendung nicht
      ungefährlich ist! Machen Sie sich bewußt, dass mit dem
      <token>&lt;transfer&gt;</token> Element ein entfernter Webserver die
      Kontrolle darüber hat, welche abgehenden Verbindungen ein Voicebrowser
      aufbaut. Im Hastenix-Skript können Sie jegliche Nutzung des
      <token>&lt;transfer&gt;</token> Elements dadurch unterbinden, dass Sie
      die <varname>$DIALOUT</varname> Variable im Konfigurationsteil mit dem
      Befehl <command>Busy</command> vorbelegen.</para>
    </warning>
  </section>

  <section id="voicexml-fazit">
    <title>Fazit</title>

    <para>VoiceXML hat das Potential die Programmierung von Sprachdialogen auf
    dem Asterisk einmal wesentlich zu vereinfachen. An die Stelle
    komplizierter und asterisk-proprietärer Dialplansequenzen in der
    <filename>/etc/asterisk/extensions.conf</filename>, treten standardisierte
    XML-Dokumente, die auf beliebigen Webservern verteilt werden
    können.</para>

    <para>Komplexe Sprachanwendungen, die sich über viele VoiceXML Dokumente
    erstrecken, können leicht von einer Plattform auf eine andere portiert
    werden und müssen nicht dafür umprogrammiert werden.</para>

    <para>Das Thema VoiceXML ist recht komplex und erfordert eine intensive
    Einarbeitung in die zugrunde liegenden Standards. Wer sich unabhängig von
    einer Asterisk Implementierung einmal näher mit dem Thema beschäftigen
    will, der sei auf die umfangreichen Entwickler-Programme der diversen
    VoiceXML Provider verwiesen. Mehrere Firmen bieten kostenlose Developer
    Accounts zum Testen eigener VoiceXML-Anwendungen an. Besonders genannt
    seien hier die Firmen <ulink
    url="http://www.voxeo.com/"><citetitle>Voxeo</citetitle></ulink> und
    <ulink
    url="http://www.tellme.com/"><citetitle>Tellme</citetitle></ulink>.</para>
  </section>
</chapter>