<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
<section id="functions-odbc_function" lang="de" revision="$Revision: 1074 $">
  <!--
% Copyright (c) 2006 - 2008 by 
% Stefan Wintermeyer <stefan.wintermeyer@amooma.de>
% Philipp Kempgen <philipp.kempgen@amooma.de>
% Permission is granted to copy, distribute and/or modify this document
% under the terms of the GNU Free Documentation License, Version 1.2
% or any later version published by the Free Software Foundation
% with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
% Texts. A copy of the license is included in the section entitled "GNU
% Free Documentation License".
% Asterisk training and consulting is offered at http://www.amooma.de
-->

  <title><literal>ODBC_<replaceable>funktionsname</replaceable>()</literal><indexterm
      significance="preferred">
      <primary>Dialplan-Funktionen</primary>

      <secondary><code>ODBC_<replaceable>*</replaceable>()</code></secondary>
    </indexterm></title>

  <synopsis>ODBC_<replaceable>funktionsname</replaceable>(<replaceable>param</replaceable>)</synopsis>

  <important>
    <para>Diese Funktionsbeschreibung dient als Platzhalter für eigene, vom
    Anwender in der Datei <filename>func_odbc.conf</filename> definierte
    <literal>ODBC_<replaceable>...</replaceable>()</literal>-Funktionen.</para>
  </important>

  <simpara>In der Asterisk-Konfigurationsdatei
  <filename>func_odbc.conf</filename> können eigene Funktionen zum Lesen aus
  einer und zum Schreiben in eine ODBC<footnote>
      <para><ulink
      url="http://de.wikipedia.org/wiki/ODBC">http://de.wikipedia.org/wiki/ODBC</ulink></para>
    </footnote>-Datenbank definiert werden. Diese Funktionen stehen dann im
  Dialplan als normale Funktionen zur Verfügung.</simpara>

  <sidebar>
    <para>Dies ist keine allgemeine ODBC<indexterm>
        <primary>ODBC</primary>
      </indexterm>-Anleitung. Trotzdem sei kurz gesagt wie man es auf Debian
    installieren würde. Um Asterisk mit ODBC-Unterstützung zu kompilieren
    braucht man selbverständlich die Header-Dateien
    (<literal>unixodbc-dev</literal>). Wir gehen davon aus dass Sie Asterisk
    bereits kompiliert haben und jetzt noch ODBC<footnote>
        <para>genauer: unixODBC, <ulink
        url="http://www.unixodbc.org/">http://www.unixodbc.org/</ulink>,
        <ulink
        url="http://packages.debian.org/stable/unixodbc">http://packages.debian.org/stable/unixodbc</ulink></para>
      </footnote> nachinstallieren:<screen>debian:~# <command>aptitude install unixodbc</command></screen></para>

    <para>Danach noch den Treiber für die zu verwendende Datenbank-Software:
    <literal>libmyodbc</literal> für MySQL, <literal>odbc-postgresql</literal>
    für PostgreSQL, <literal>libsqliteodbc</literal> für SQLite,
    <literal>libmdbodbc</literal> für MS Access (MDB),
    <literal>tdsodbc</literal> für FreeTDS usw.:<screen>debian:~# <command>aptitude install libmyodbc</command></screen></para>

    <bridgehead id="func_odbc-odbcinst.ini">/etc/odbcinst.ini</bridgehead>

    <para>Erster Schritt: Den MySQL-ODBC-Treiber in der Datei <emphasis
    role="bold"><filename>/etc/odbcinst.ini</filename></emphasis>
    registrieren. Auf Debian-Systemen geschieht dies u.U. automatisch bei der
    Installation von <literal>libmyodbc</literal>. Bitte sehen Sie in der
    Datei nach ob der Eintrag bereits vorhanden ist.<footnote>
        <para>Alternatives Methode zum Abfragen der registrierten Treiber:
        <literal><command>odbcinst -q -d</command></literal></para>
      </footnote> Ansonsten läßt es sich folgendermaßen nachholen:</para>

    <screen>debian:~# <command>odbcinst -i -d -f /usr/share/libmyodbc/odbcinst.ini</command></screen>

    <para>Die Datei sollte danach etwa folgendermaßen
    aussehen:<programlisting>[MySQL]
Description   = MySQL driver
Driver        = /usr/lib/odbc/libmyodbc.so
Setup         = /usr/lib/odbc/libodbcmyS.so
CPTimeout     = 
CPReuse       = 
UsageCount    = 1</programlisting></para>

    <bridgehead id="func_odbc-odbc.ini">/etc/odbc.ini</bridgehead>

    <para>In der Datei <emphasis
    role="bold"><filename>/etc/odbc.ini</filename></emphasis> werden die
    einzelnen Datenquellen / Datenbank-Verbindungen eingetragen. Dabei erhält
    jede Datenquelle einen <quote>DSN</quote> (Data Source Name) Hier ein
    Beispiel<footnote>
        <para>Für weitere Beispiele siehe
        <filename>/usr/share/doc/libmyodbc/examples/odbc.ini</filename></para>
      </footnote><footnote>
        <para>Spezifische Optionen für den MySQL-ODBC-Treiber MyODBC kann man
        unter <ulink
        url="http://dev.mysql.com/doc/refman/5.1/de/myodbc-configuration-connection-parameters.html">http://dev.mysql.com/doc/refman/5.1/de/myodbc-configuration-connection-parameters.html</ulink>
        nachlesen.</para>
      </footnote>:<programlisting>[ODBC Data Sources]

meine_db_verbindung = Meine VoIP-Datenbank

[meine_db_verbindung]
Driver       = MySQL
Description  = Meine VoIP-Datenbank
Server       = localhost
Port         =
User         = root
Password     =
Database     = meine_asterisk_db
Option       = 3
Socket       = 
ReadOnly     = No</programlisting></para>

    <para>Wir gehen hier davon aus dass Sie selbständig in der Lage sind die
    Datenbank <literal>meine_asterisk_db</literal> auf dem MySQL-Server
    anzulegen, entsprechende Benutzerrechte zu definieren und Tabellen
    anzulegen.<footnote>
        <para>Weitere Informationen zu MyODBC-Datentypen: <ulink
        url="http://dev.mysql.com/doc/refman/5.1/de/myodbc-reference-datatypes.html">http://dev.mysql.com/doc/refman/5.1/de/myodbc-reference-datatypes.html</ulink>,
        Fehlercodes: <ulink
        url="http://dev.mysql.com/doc/refman/5.1/de/myodbc-reference-errorcodes.html">http://dev.mysql.com/doc/refman/5.1/de/myodbc-reference-errorcodes.html</ulink></para>
      </footnote></para>

    <bridgehead id="func_odbc-isql">isql</bridgehead>

    <para>Bitte prüfen Sie auf der Shell mit dem Tool <emphasis
    role="bold"><command>isql</command></emphasis> dass die Verbindung
    funktioniert:<screen>gemeinschaft:~# <command>isql meine_db_verbindung -v</command>
+---------------------------------------+
| Connected!                            |
|                                       |
| sql-statement                         |
| help [tablename]                      |
| quit                                  |
|                                       |
+---------------------------------------+
SQL&gt; </screen></para>
  </sidebar>

  <bridgehead
  id="func_odbc-res_odbc.conf">/etc/asterisk/res_odbc.conf</bridgehead>

  <para>Für Asterisk muß diese Datenquelle in der <emphasis
  role="bold"><filename>/etc/asterisk/res_odbc.conf</filename></emphasis><indexterm>
      <primary>res_odbc.conf</primary>
    </indexterm> eingetragen werden:<programlisting>[meine_db_verbindung]
dsn =&gt; meine_db_verbindung
;username =&gt; myuser
;password =&gt; mypass
pre-connect =&gt; yes
enabled =&gt; yes</programlisting></para>

  <para><parameter>pre-connect</parameter> besagt dass die Verbindung zu
  dieser Datenbank schon aufgebaut wird bevor sie von einer Funktion benötigt
  wird.</para>

  <para>Nach einem Neustart von Asterisk wird diese Datenquelle auf dem
  Asterisk-CLI angezeigt:<screen>*CLI&gt; <command>odbc show</command> 
Name: meine_db_verbindung
DSN: meine_db_verbindung
Pooled: no
Connected: yes</screen></para>

  <bridgehead
  id="func_odbc-func_odbc.conf">/etc/asterisk/func_odbc.conf</bridgehead>

  <para>Die einzelnen ODBC-Funktionen für Asterisk werden in der <emphasis
  role="bold"><filename>/etc/asterisk/func_odbc.conf</filename></emphasis><indexterm>
      <primary>func_odbc.conf</primary>
    </indexterm> definiert. Jeder Abschnitt definiert eine eigene Funktion.
  Funktionsnamen bestehen in Asterisk normalerweise immer aus Großbuchstaben.
  Hier hat man die Wahl das entweder so zu übernehmen oder Kleinbuchstaben zu
  verwenden. Dabei ist zu beachten dass im Dialplan bei den Funktionsnamen
  zwischen Groß- und Kleinschreibung unterschieden wird.</para>

  <para>Eine mit <literal>[BEISPIEL]</literal> definierte Funktion würde im
  Dialplan als <literal>ODBC_BEISPIEL()</literal> aufgerufen. Wer will kann
  durch Angabe von <literal>prefix=<replaceable>XYZ</replaceable></literal>
  auch ein anderes Präfix verwenden, im Dialplan hieße die Funktion dann
  <literal>XYZ_BEISPIEL()</literal>.</para>

  <para>Für jede Funktion zwingend notwendig ist die Angabe des ODBC-DSN mit
  dem Parameter <literal>dsn=<replaceable>Datenquelle</replaceable></literal>.
  Mit <literal>read=<replaceable>SQL-Abfrage</replaceable></literal> kann man
  die SQL-Abfrage zum Lesen angeben (ab Asterisk 1.6:
  <literal>readsql</literal>), mit
  <literal>write=<replaceable>SQL-Befehl</replaceable></literal> den
  SQL-Befehl zum Schreiben (ab Asterisk 1.6:
  <literal>writesql</literal>).</para>

  <note>
    <para>In Asterisk 1.4 sollte man für <literal>read</literal> nur solche
    Abfragen verwenden die nicht mehr als eine Ergebniszeile zurückliefern,
    denn auf die weiteren kann im Dialplan nicht zugegriffen werden. Ab
    Asterisk 1.6 gibt es den optionalen Parameter
    <literal>mode=multirow</literal>, siehe <xref
    linkend="functions-odbc_fetch" />.</para>
  </note>

  <bridgehead id="func_odbc-anti-exfreundin">Beispiel um Anrufe von
  Exfreundinnen nicht durchzustellen:</bridgehead>

  <programlisting>[ANTI_EXFREUNDIN]
dsn = meine_db_verbindung
read = SELECT COUNT(*) FROM `exfreundinnen` WHERE `callerid`='${SQL_ESC(${ARG1})}'</programlisting>

  <para>Die Argumente des Aufrufs im Dialplan werden hier als
  <code>${ARG1}</code>, <code>${ARG2}</code> usw. übergeben. Dabei ist wichtig
  Argumente (v.a. Strings) immer in einfachen Anführungszeichen zu schreiben
  und wie im Beispiel mit <code>SQL_ESC()</code> (<xref
  linkend="functions-sql_esc" />) zu maskieren.</para>

  <para>Die obige Funktion zum Lesen (<literal>read</literal>) würde im
  Dialplan folgendermaßen aufgerufen:<programlisting>20 =&gt; {
    <emphasis role="bold">Set(ARRAY(anz)=${ODBC_ANTI_EXFREUNDIN(${CALLERID(num)})})</emphasis>;
    Verbose(1,### ODBC-Ergebnis: ${anz});
    if ("${anz}" != "0") {
        Busy();
    }
    else {
        Dial(SIP/xyz);
    }
}</programlisting></para>

  <bridgehead id="func_odbc-inverssuche">Beispiel für Rückwärtssuche aus einer
  Kontaktliste:</bridgehead>

  <para><filename>func_odbc.conf</filename>:</para>

  <programlisting>[RUECKWAERTSSUCHE]
dsn = meine_db_verbindung
read = SELECT `vorname`, `nachname` FROM `kontakte` WHERE `callerid`='${SQL_ESC(${ARG1})}'</programlisting>

  <para>Dialplan:</para>

  <programlisting>21 =&gt; {
    <emphasis role="bold">Set(ARRAY(vn,nn)=${ODBC_RUECKWAERTSSUCHE(${CALLERID(num)})})</emphasis>;
    Verbose(1,### ODBC-Ergebnis: ${vn}\,${nn});
    Set(CALLERID(name)=${vn} ${nn});
}</programlisting>

  <tip>
    <para>Ab Asterisk 1.6 bietet es sich bei den
    <literal>ODBC_<replaceable>*</replaceable></literal>-Funktionen an statt
    mit <literal>ARRAY()</literal> mit <literal>HASH()</literal> (<xref
    linkend="functions-hash" />) zu arbeiten. Beispiel:<programlisting>Set(HASH(kontakt)=${ODBC_RUECKWAERTSSUCHE(${CALLERID(num)})});
Verbose(1,### Vorname  : ${HASH(kontakt,vorname)});
Verbose(1,### Nachname : ${HASH(kontakt,nachname)});</programlisting></para>
  </tip>

  <important>
    <para>Die u.a. Asterisk-Versionen und der interne Hilfetext sind nur ein
    Beispiel. Dieser Hilfetext würde von Asterisk für jede selbst-definierte
    ODBC-Funktion ausgegeben.</para>
  </important>

  <xi:include href="odbc_function-help.xml" xpointer="xpointer(/note/*)"
              xmlns:xi="http://www.w3.org/2001/XInclude" />

  <formalpara>
    <title>Siehe auch</title>

    <para><xref linkend="functions-odbc_sql" />, <xref
    linkend="functions-odbc_fetch" />, <xref linkend="functions-sql_esc" />,
    <xref linkend="functions-hash" />, <xref
    linkend="functions-array" /></para>
  </formalpara>
</section>
