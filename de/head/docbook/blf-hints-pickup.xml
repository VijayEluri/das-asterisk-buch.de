<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
<chapter id="blf-hints-pickup" lang="de" revision="$Revision$">
  <!--% Copyright (c) 2006 - 2008
% - Stefan Wintermeyer <stefan.wintermeyer@amooma.de>
% - Philipp Kempgen <philipp.kempgen@amooma.de>
% Permission is granted to copy, distribute and/or modify this document
% under the terms of the GNU Free Documentation License, Version 1.2
% or any later version published by the Free Software Foundation;
% with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
% Texts. A copy of the license is included in the section entitled "GNU
% Free Documentation License".
% Asterisk training and consulting is offered at http://www.amooma.de-->

  <chapterinfo>
    <author>
      <firstname>Philipp</firstname>

      <surname>Kempgen</surname>

      <email>philipp.kempgen@amooma.de</email>
    </author>
  </chapterinfo>

  <title>BLF, Hints, Pickup<indexterm>
      <primary>BLF</primary>
    </indexterm><indexterm>
      <primary>Besetztlampenfeld</primary>
    </indexterm><indexterm>
      <primary>Pickup</primary>
    </indexterm><indexterm>
      <primary>Hints</primary>
    </indexterm><indexterm>
      <primary>LEDs</primary>
    </indexterm><indexterm>
      <primary>Heranholen</primary>
    </indexterm><indexterm>
      <primary>Rufübernahme</primary>
    </indexterm></title>

  <formalpara id="blf-beschreibung">
    <title>Beschreibung des Leistungsmerkmals BLF</title>

    <para>Besetztlampenfelder (<foreignphrase lang="en">Busy Lamp
    Field</foreignphrase>, BLF) sind ein weit verbreitetes Feature
    traditioneller Telefonanlagen. Dabei handelt es sich um LEDs oder
    LCD-Anzeigen und zugehörige Tasten am Telefon, mit denen die Nebenstellen
    von einzelnen Kollegen oder ganzen Gruppen überwacht (im Sinne von
    <quote>beobachtet</quote>) werden. Klingelt ein überwachtes Telefon, dann
    blinkt am eigenen Apparat die entsprechende LED.<footnote>
        <para>Bei einigen Anlagen sieht man sogar die Rufnummer des Anrufers.
        Dies ist jedoch -- so viel sei vorab gesagt &#8211; bei Asterisk nicht
        möglich bzw. nur mit einem Patch möglich (siehe u. a. <ulink
        url="http://bugs.digium.com/view.php?id=5014"><citetitle>Asterisk Bug
        5014</citetitle></ulink>).</para>
      </footnote> Ist der überwachte Teilnehmer im Gespräch, so leuchtet die
    LED am überwachenden Gerät dauerhaft. Ansonsten ist die LED aus.<footnote>
        <para>Daneben gibt es je nach Anlage noch weitere "Blink-Kadenzen", z.
        B. ein langsameres Blinken, wenn der andere Teilnehmer sein Gespräch
        auf "Halten" gestellt hat.</para>
      </footnote>Was das Drücken der Taste bewirkt, hängt vom Status des
    anderen Teilnehmers ab. Ist der Kollege frei, so wird ein normaler Anruf
    aufgebaut. Wenn aber sein Telefon klingelt (eigene LED blinkt), so kann
    man durch Drücken der Taste<footnote>
        <para>Je nach Telefonanlage geht das nicht durch Tastendruck, sondern
        durch die (umständliche) Eingabe eines Feature-Codes
        (<code>*</code><replaceable>sonstwas</replaceable>).</para>
      </footnote> das eingehende Gespräch zum eigenen Apparat
    heranholen.</para>
  </formalpara>

  <para>Wir wollen uns im Folgenden damit beschäftigen, wie man diese
  Funktionen mit Asterisk für SIP-Telefone nachbauen kann.</para>

  <section id="blf-leds">
    <title>Ansteuerung der LEDs</title>

    <section id="blf-sip.conf">
      <title>sip.conf</title>

      <para>Zuerst sind bestimmte Einstellungen im Abschnitt
      <code>[general]</code> der <filename>sip.conf</filename>
      erforderlich:</para>

      <programlisting>[general]
allowsubscribe = yes
notifyringing = yes
notifyhold = yes
limitonpeers = yes</programlisting>

      <para>Auch in den Abschnitten der einzelnen SIP-Benutzer sind
      Einstellungen hinzuzufügen, nämlich <code>subscribecontext</code>
      und <code>call-limit</code>. <code>subscribecontext</code>
      besagt, in welchem Context Asterisk suchen soll, wenn dieser Benutzer
      den Status anderer Benutzer "abonnieren" will. In der Regel ist das der
      Context, in dem sich auch die internen Benutzer befinden.
      <code>call-limit</code> hat eigentlich eine andere Aufgabe,
      nämlich die Anzahl der gleichzeitigen Gespräche dieses Benutzers zu
      beschränken (wenn es auf einen Wert &gt; 0 gesetzt wird). Es dient hier
      aber auch dazu, dass Asterisk überhaupt die Anzahl der gleichzeitigen
      Gespräche dieses Benutzers mitzählt, was für den Status (frei/besetzt)
      wichtig ist. Es muss also auf einen beliebigen Wert &gt; 0 gesetzt
      werden, am besten mindestens auf 2, sonst hat man Probleme bei
      Transfers.</para>

      <para>Zudem sind (für das spätere Heranholen von Gesprächen) noch die
      zwei Parameter <code>callgroup</code><footnote>
          <para>siehe <xref linkend="sip-channel-callgroup" /></para>
        </footnote> und <code>pickupgroup</code><footnote>
          <para>siehe <xref linkend="sip-channel-pickupgroup" /></para>
        </footnote> von Bedeutung. Zum Beispiel darf ein Benutzer mit
      <code>pickupgroup=2</code> Gespräche von anderen Benutzern mit
      <code>callgroup=2</code> heranholen. Dies dient also der
      Rechteverwaltung. Da es allerdings nur 64 mögliche Gruppen gibt (0 bis
      63), ist diese Methode nur für kleine bis mittelgroße Installationen
      brauchbar. Bei großen Installationen setzt man für alle User die gleiche
      Gruppe und muss sich dann um die Rechteverwaltung selber kümmern (dazu
      später noch ein Hinweis).</para>

      <programlisting>[21]
type = friend
context = interne-benutzer
secret = 9847825134
host = dynamic
mailbox = 2000
<emphasis role="bold">subscribecontext = interne-benutzer</emphasis>
<emphasis role="bold">call-limit = 10</emphasis>
<emphasis role="bold">callgroup = 2</emphasis>
<emphasis role="bold">pickupgroup = 2</emphasis></programlisting>
    </section>

    <section id="blf-hints">
      <title>Hints<indexterm>
          <primary>Hints</primary>
        </indexterm></title>

      <para>Als Nächstes muss man Asterisk die Zuordnung zwischen Extensions
      und Benutzern (oder Geräten) mitteilen. Dies macht man im Dialplan mit
      sogenannten <quote><foreignphrase
      lang="en">Hints</foreignphrase></quote>. Wenn man in
      Dialplan-Prioritäten denkt, dann ist ein <code>hint</code> eine
      spezielle Priorität, die noch vor der Priorität <code>1</code>
      steht. Wichtig ist, dass sich die Hints in dem Context befinden, den man
      in der <filename>sip.conf</filename> (s. o.) mit
      <code>subscribecontext</code> angegeben hat, ansonsten werden die
      Status-Informationen nicht weitergeleitet. Das ist durchaus Absicht,
      damit man nicht per se von allen Telefonen aus alle weiteren überwachen
      kann. Durch unterschiedliche Contexte lässt sich also auch eine Art
      Berechtigungssystem bauen.<footnote>
          <para>Diese Methode eignet sich allerdings nicht so gut für
          datenbankgestützte <quote>Realtime</quote>-Installationen.</para>
        </footnote> Wir beschreiben hier anhand von Beispielen, wie ein Hint
      definiert wird. Je nachdem, ob Ihr Dialplan im
      <filename>extensions.conf</filename>-Format oder in AEL geschrieben ist,
      verwenden Sie die eine oder die andere Variante.</para>

      <table colsep="0" frame="none" pgwide="1" rowsep="0" tocentry="0">
        <title>Hints &#8211; Einfaches Beispiel</title>

        <tgroup cols="2">
          <colspec align="left" colnum="1" colwidth="5*" />

          <colspec align="left" colnum="2" colwidth="4*" />

          <thead valign="middle">
            <row>
              <entry
              align="center"><filename>extensions.conf</filename></entry>

              <entry
              align="center"><filename>extensions.ael</filename></entry>
            </row>
          </thead>

          <tbody valign="top">
            <row>
              <entry><programlisting>[interne-benutzer]

exten =&gt; 21,<emphasis role="bold">hint,SIP/21</emphasis>
exten =&gt; 21,1,Dial(SIP/${EXTEN},40)
exten =&gt; 21,n,VoiceMail(${EXTEN},u)

exten =&gt; 22,<emphasis role="bold">hint,SIP/22</emphasis>
exten =&gt; 22,1,Dial(SIP/${EXTEN},40)
exten =&gt; 22,n,VoiceMail(${EXTEN},u)</programlisting></entry>

              <entry><programlisting>context interne-benutzer {
  
  <emphasis role="bold">hint(SIP/21)</emphasis> 21 =&gt; {
    Dial(SIP/${EXTEN},40);
    VoiceMail(${EXTEN},u);
  }
  <emphasis role="bold">hint(SIP/22)</emphasis> 22 =&gt; {
    Dial(SIP/${EXTEN},40);
    VoiceMail(${EXTEN},u);
  }
}</programlisting></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <table colsep="0" frame="none" pgwide="1" rowsep="0" tocentry="0">
        <title>Hints &#8211; Beispiel mit Pattern (Asterisk 1.4)</title>

        <tgroup cols="2">
          <colspec align="left" colnum="1" colwidth="5*" />

          <colspec align="left" colnum="2" colwidth="4*" />

          <thead valign="middle">
            <row>
              <entry
              align="center"><filename>extensions.conf</filename></entry>

              <entry
              align="center"><filename>extensions.ael</filename></entry>
            </row>
          </thead>

          <tbody valign="top">
            <row>
              <entry><programlisting>[interne-benutzer]

exten =&gt; 21,<emphasis role="bold">hint,SIP/21</emphasis>
exten =&gt; 22,<emphasis role="bold">hint,SIP/22</emphasis>

exten =&gt; _2X,1,Dial(SIP/${EXTEN},40)
exten =&gt; _2X,n,VoiceMail(${EXTEN},u)</programlisting></entry>

              <entry><programlisting>context interne-benutzer {
  
  <emphasis role="bold">hint(SIP/21)</emphasis> 21 =&gt; {}
  <emphasis role="bold">hint(SIP/22)</emphasis> 22 =&gt; {}
  
  _2X =&gt; {
    Dial(SIP/${EXTEN},40);
    VoiceMail(${EXTEN},u);
  }
}</programlisting></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <important>
        <para>Beachten Sie hierbei, dass ein <code>hint</code> in
        Asterisk 1.4 nicht mit Pattern<footnote>
            <para><xref linkend="einleitung-regex" /></para>
          </footnote> geschrieben werden kann.<programlisting>exten =&gt; _2X,hint,SIP/${EXTEN}</programlisting>bzw.<programlisting>hint(SIP/${EXTEN}) _2X =&gt; {<replaceable>...</replaceable>}</programlisting>wäre
        also unzulässig.</para>

        <para>Ab Asterisk 1.6 ist diese Schreibweise möglich, auch wenn es
        anfänglich noch zu Problemen kam. Bitte beachten Sie aber, dass
        während der Interpretation eines Hints noch kein Channel besteht, was
        bedeutet, dass auch keine Channel-Variablen in der Hint-Definition zur
        Verfügung stehen &#8211; mit Ausnahme von
        <code>${EXTEN}</code>.</para>
      </important>

      <table colsep="0" frame="none" pgwide="1" rowsep="0" tocentry="0">
        <title>Hints &#8211; Beispiel mit Pattern (Asterisk 1.6)</title>

        <tgroup cols="2">
          <colspec align="left" colnum="1" colwidth="5*" />

          <colspec align="left" colnum="2" colwidth="4*" />

          <thead valign="middle">
            <row>
              <entry
              align="center"><filename>extensions.conf</filename></entry>

              <entry
              align="center"><filename>extensions.ael</filename></entry>
            </row>
          </thead>

          <tbody valign="top">
            <row>
              <entry><programlisting>[interne-benutzer]

exten =&gt; _2X,<emphasis role="bold">hint,SIP/${EXTEN}</emphasis>
exten =&gt; _2X,1,Dial(SIP/${EXTEN},40)
exten =&gt; _2X,n,VoiceMail(${EXTEN},u)</programlisting></entry>

              <entry><programlisting>context interne-benutzer {
  
  <emphasis role="bold">hint(SIP/${EXTEN})</emphasis> _2X =&gt; {
    Dial(SIP/${EXTEN},40);
    VoiceMail(${EXTEN},u);
  }
}</programlisting></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <table colsep="0" frame="none" pgwide="1" rowsep="0" tocentry="0">
        <title>Hints &#8211; Beispiel mit mehreren Benutzern in einem
        <code>hint</code></title>

        <tgroup cols="2">
          <colspec align="left" colnum="1" colwidth="5*" />

          <colspec align="left" colnum="2" colwidth="4*" />

          <thead valign="middle">
            <row>
              <entry
              align="center"><filename>extensions.conf</filename></entry>

              <entry
              align="center"><filename>extensions.ael</filename></entry>
            </row>
          </thead>

          <tbody valign="top">
            <row>
              <entry><programlisting>[interne-benutzer]

exten =&gt; 20,<emphasis role="bold">hint,SIP/21&amp;SIP/22</emphasis>

exten =&gt; 20,1,Dial(SIP/21&amp;SIP/22,40)</programlisting></entry>

              <entry><programlisting>context interne-benutzer {
  
  <emphasis role="bold">hint(SIP/21&amp;SIP/22)</emphasis> 20 =&gt; {}
  
  20 =&gt; {
    Dial(SIP/21&amp;SIP/22,40);
  }
}</programlisting></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <tip>
        <para>Der Übersichtlichkeit halber kann man alle Hints auch in einen
        eigenen Context legen und diesen überall dort mit <code>include =&gt;
        meine-hints</code> einbinden, wo er benötigt wird. Dies ist vor allem
        in Asterisk-Versionen vor 1.6 interessant.</para>
      </tip>

      <para>Danach müssen Sie Asterisk neu starten (<emphasis
      role="bold"><literal><command>/etc/init.d/asterisk
      reload</command></literal></emphasis> oder <emphasis
      role="bold"><literal><command>asterisk -rx 'module
      reload'</command></literal></emphasis>).</para>
    </section>
  </section>

  <section id="blf-subscriptions">
    <title>Verfahren für SIP-<foreignphrase
    lang="en">Subscriptions</foreignphrase></title>

    <note>
      <para>Dieser Abschnitt ist ein kleiner Exkurs für die
      Technikinteressierten. Für die Konfiguration ist er in der Regel nicht
      weiter von Bedeutung. Sie können also getrost zum nächsten Abschnitt
      springen.</para>
    </note>

    <para>Es gibt in SIP mehrere unterschiedlich Verfahren, wie man den Status
    einer Nebenstelle <quote>abonnieren</quote> kann. Die gebräuchlichste
    SIP-Erweiterung dafür ist <ulink
    url="http://tools.ietf.org/html/rfc4235"><citetitle><quote><foreignphrase
    lang="en">Dialog Event Package</foreignphrase></quote></citetitle> (RFC
    4235)</ulink>, an die sich u. a. auch die 3x0-Snoms halten. Dieser
    Standard basiert auf <ulink
    url="http://tools.ietf.org/html/rfc3265"><citetitle><quote><foreignphrase
    lang="en">SIP Event Notification</foreignphrase></quote></citetitle> (RFC
    3265)</ulink>. Dabei schickt das Telefon für jede zu überwachende
    Nebenstelle ein <literal>SUBSCRIBE</literal> an die Telefonanlage und
    erhält bei jeder Status-Änderung ein <literal>NOTIFY</literal>
    (<literal>PUBLISH</literal> wird von Asterisk noch nicht
    unterstützt). Der Hauptunterschied sind die unterschiedlichen
    (XML-)Formate im <quote><foreignphrase
    lang="en">Body</foreignphrase></quote> der <quote><foreignphrase
    lang="en">Notifications</foreignphrase></quote>.</para>

    <para>Die von Asterisk (mehr oder weniger) unterstützten Verfahren
    sind:</para>

    <table align="center" colsep="1" rowsep="1">
      <title>SIP-Subscriptions &#8211; Verfahren</title>

      <tgroup cols="3">
        <colspec align="left" colnum="1" colwidth="2*" />

        <colspec align="left" colnum="2" colwidth="2*" />

        <colspec align="left" colnum="3" colwidth="1*" />

        <thead>
          <row>
            <entry>Spezifikation</entry>

            <entry>MIME-Typ</entry>

            <entry>Geräte</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><ulink
            url="http://tools.ietf.org/html/rfc4235"><citetitle><foreignphrase
            lang="en">SIP Dialog Event Package</foreignphrase></citetitle>
            (RFC 4235)</ulink></entry>

            <entry><literal>application/dialog-info+xml</literal></entry>

            <entry>Snom, Linksys, Aastra, Polycom, Grandstream, Thomson,
            ...</entry>
          </row>

          <row>
            <entry><ulink
            url="http://tools.ietf.org/html/rfc3863"><citetitle><foreignphrase
            lang="en">Presence Information Data Format
            (PIDF)</foreignphrase></citetitle> (RFC 3863)</ulink></entry>

            <entry><literal>application/pidf+xml</literal></entry>

            <entry>CounterPath<footnote>
                <para>früher Xten</para>
              </footnote> <ulink
            url="http://www.counterpath.net/eyebeam.html">EyeBeam</ulink>
            etc., Cisco</entry>
          </row>

          <row>
            <entry>Vor-Version von RFC 3863 (PIDF, s. o.), XPIDF, CPIM mit
            Microsoft-Ergänzung<footnote>
                <para><ulink
                url="http://msdn.microsoft.com/en-us/library/cc246193.aspx"><citetitle><foreignphrase
                lang="en">XPIDF Presence Format
                Example</foreignphrase></citetitle></ulink>, <ulink
                url="http://msdn.microsoft.com/en-us/library/cc246202.aspx"><citetitle><foreignphrase
                lang="en">XPIDF Presence Document
                Format</foreignphrase></citetitle></ulink>, <ulink
                url="http://softlab-pro-web.technion.ac.il/projects/WatchMe/documents/RTC.doc"><citetitle><foreignphrase
                lang="en">Microsoft Real Time Communication (RTC)
                Client</foreignphrase></citetitle></ulink></para>
              </footnote></entry>

            <entry><literal>application/xpidf+xml</literal></entry>

            <entry>Microsoft RTC/LCS, MSN Messenger, Polycom</entry>
          </row>

          <row>
            <entry>Vor-Version von RFC 3863 (PIDF, s. o.), XPIDF, CPIM</entry>

            <entry><literal>application/cpim-pidf+xml</literal></entry>

            <entry>?</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para><literal>xpidf+xml</literal> und <literal>cpim-pidf+xml</literal>
    sind übrigens sehr ähnlich.</para>
  </section>

  <section id="blf-telefon-konfiguration-snom">
    <title>Konfiguration der Telefone für BLF</title>

    <para>Nun müssen noch die überwachenden Telefone konfiguriert werden. Wie
    das genau geht, hängt natürlich vom jeweiligen Modell ab und kann im
    Handbuch<footnote>
        <para>z. B. <ulink
        url="http://wiki.snom.com/"><citetitle>Snom-Wiki</citetitle></ulink></para>
      </footnote> nachgelesen werden. Wir zeigen es hier exemplarisch für ein
    Snom 360.</para>

    <para>Melden Sie sich wie gewohnt mit einem Webbrowser am Snom an, und
    gehen Sie in das Untermenü <quote>Funktionstasten</quote>. Dort belegen
    Sie die Funktionstaste Ihrer Wahl (im Beispiel die P6) mit der Funktion
    <quote>Ziel</quote>/<quote>Nebenstelle</quote><footnote>
        <para>Die Bezeichnung <quote>Ziel</quote> wurde in einer der neueren
        Firmware-Versionen in <quote>Nebenstelle</quote> geändert. Ansonsten
        ist die weitere hier beschriebene Funktionalität gleich.</para>
      </footnote> und tragen die zu überwachende Extension ein, also z. B. am
    Telefon des Benutzers <code>21</code> die <code>22</code> und
    <code>23</code> und umgekehrt.</para>

    <para>Die Bezeichnung <quote>Kontext</quote> werden Sie vom Snom schon
    kennen. Damit ist einer der 12 möglichen SIP-Accounts gemeint. Im
    Normalfall hat man seinen Account als den ersten konfiguriert und wählt
    diesen hier aus.</para>

    <screenshot>
      <screeninfo>Snom &#8211; Konfiguration Leitungsüberwachung</screeninfo>

      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="bilder/snom-hint1.png" />
        </imageobject>

        <imageobject role="html">
          <imagedata fileref="bilder/snom-hint1.html.jpg" />
        </imageobject>
      </mediaobject>
    </screenshot>

    <para>Nachdem die Einstellungen gespeichert wurden, ändert das Telefon den
    Eintrag automatisch in eine passende SIP-URI der Form
    <code>&lt;sip:21@<replaceable>x.x.x.x</replaceable>;user=phone&gt;</code>
    ab. <replaceable>x.x.x.x</replaceable> ist die IP-Adresse der
    Telefonanlage. (Der Zusatz <code>;user=phone</code> ist nicht von
    Bedeutung.)</para>

    <screenshot>
      <screeninfo>Snom &#8211; Konfiguration Leitungsüberwachung
      Ziel/Nebenstelle</screeninfo>

      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="bilder/snom-hint2.png" />
        </imageobject>

        <imageobject role="html">
          <imagedata fileref="bilder/snom-hint2.html.jpg" />
        </imageobject>
      </mediaobject>
    </screenshot>

    <para>Je nach Firmware-Version muss jetzt noch das Telefon neu gestartet
    werden.<footnote>
        <para>Der Telefon-Neustart nach einem Asterisk-Neustart ist für die
        saubere Anmeldung der Subscription des Telefons notwendig &#8211;
        jedenfalls solange Asterisk noch keine <quote>persistent
        subscriptions</quote>, also das Fortbestehen von Status-Abonnements
        über einen Reload hinweg, unterstützt.</para>
      </footnote></para>
  </section>

  <section id="blf-test">
    <title>Test der Hints</title>

    <para>Jetzt können wir überprüfen, ob alles richtig konfiguriert wurde.
    Dazu geben Sie im Asterisk-CLI den Befehl <literal><command>core show
    hints</command></literal> ein:<footnote>
        <para>Die Ausgabe wurde hier aus Platzgründen etwas verkürzt.</para>
      </footnote></para>

    <screen>*CLI&gt; <emphasis role="bold"><command>core show hints</command></emphasis>
    -= Registered Asterisk Dial Plan Hints =-
   21         : SIP/21        State:Unavailable     Watchers  0
   22         : SIP/22        State:Unavailable     Watchers  0
----------------
- 2 hints registered</screen>

    <para>Im obigen Beispiel wird deutlich, dass die zu überwachenden Telefone
    noch nicht am Asterisk-Server angemeldet sind
    (<literal>Unavailable</literal>). Ebenso hat auch noch kein überwachendes
    Telefon den Status dieser Extensions abonniert (0
    <literal>Watchers</literal>). Letzteres wird auch durch die Auflistung der
    aktiven <foreignphrase lang="en">Subscriptions</foreignphrase> bestätigt,
    die durch das Kommando <literal><command>sip show
    subscriptions</command></literal> ausgegeben wird:<footnote>
        <para>Die Ausgabe wurde hier aus Platzgründen etwas verkürzt.</para>
      </footnote></para>

    <screen>*CLI&gt; <emphasis role="bold"><command>sip show subscriptions</command></emphasis>
Peer          User   Call ID      Extension   Last state    Type
0 active SIP subscriptions</screen>

    <para>Nachdem sich das überwachende Telefon angemeldet hat, setzen wir den
    Befehl erneut ab:</para>

    <screen>*CLI&gt; <emphasis role="bold"><command>sip show subscriptions</command></emphasis>
Peer          User   Call ID      Extension   Last state    Type
192.168.0.2   21     815d944554e  22          Unavailable   dialog-info+xml
1 active SIP subscription</screen>

    <para>Hier wird deutlich, dass der User <code>21</code> die
    Extension <code>22</code> überwacht. Wenn sich das überwachte
    Telefon bei Asterisk anmeldet, dann erscheint im CLI folgende
    Zeile:<screen>Extension Changed 22 new state Idle for Notify User 21</screen></para>

    <para>Setzen Sie den Befehl <literal><command>core show
    hints</command></literal> erneut ab:</para>

    <screen>*CLI&gt; <emphasis role="bold"><command>core show hints</command></emphasis>
    -= Registered Asterisk Dial Plan Hints =-
   21         : SIP/21        State:Idle            Watchers  0
   22         : SIP/22        State:Idle            Watchers  1
----------------
- 2 hints registered</screen>

    <para>Im Gegensatz zu vorher sieht man, dass das Telefon einen definierten
    Zustand hat (<literal>Idle</literal>) und zudem ein weiteres Telefon den
    Zustand überwacht (<literal>Watchers 1</literal>). Die Konfiguration ist
    nun komplett, Asterisk meldet einen Statuswechsel der überwachten
    Extension sofort an das überwachende Telefon. Befindet sich das überwachte
    Telefon im Gespräch, leuchtet die LED dauerhaft. Wird das überwachte
    Telefon angerufen, blinkt die LED. Ohne Aktivität ist auch die LED aus.
    Die Status-Wechsel werden ebenfalls auf der Konsole gemeldet:</para>

    <screen>Extension Changed 22 new state Ringing for Notify User 21
Extension Changed 22 new state InUse for Notify User 21
Extension Changed 22 new state Idle for Notify User 21</screen>
  </section>

  <section id="blf-pickup">
    <title>Heranholen eines Anrufs (<quote>Pickup</quote>)<indexterm>
        <primary>Pickup</primary>
      </indexterm></title>

    <para>In der bisherigen Konfiguration werden Gespräche des überwachten
    Teilnehmers nur angezeigt. Wir wollen aber auch die Möglichkeit schaffen,
    ein Gespräch heranholen zu können, das an einem anderen Apparat
    eingeht.<footnote>
        <para>Die Telefonanlagen-Funktion <foreignphrase
        lang="en">Pickup</foreignphrase> wird im Deutschen meist als
        <emphasis>Heranholen</emphasis> oder <emphasis>Rufübernahme</emphasis>
        bezeichnet.</para>
      </footnote></para>

    <para>Man unterscheidet dabei zwischen dem gezielten Heranholen eines
    Anrufs von einem einzelnen Benutzer (<foreignphrase lang="en">Directed
    Pickup</foreignphrase>) und dem Heranholen eines Anrufs von einer
    Benutzergruppe (<foreignphrase lang="en">Group Pickup</foreignphrase>).
    Hier betrachten wir zunächst den ersten, einfacheren Fall.</para>

    <section id="blf-pickup-extensions.conf">
      <title>extensions.conf für Pickup</title>

      <para>Für das Pickup ist es notwendig, noch einen weiteren Eintrag in
      der <filename>extensions.conf</filename> hinzuzufügen:</para>

      <programlisting>[interne-benutzer]

; ...

; Gesprächsübernahme (PickUp)
<emphasis role="bold">exten =&gt; _*8X.,1,Set(nst=${EXTEN:2})
exten =&gt; _*8X.,n,Verbose(1,${CALLERID(num)} will Anruf von ${nst} holen)
exten =&gt; _*8X.,n,Pickup(${nst}@interne-benutzer)</emphasis></programlisting>

      <para>bzw. <filename>extensions.ael</filename>:</para>

      <programlisting>context interne-benutzer {
  
  // ...
  
  // Gesprächsübernahme (PickUp)
  <emphasis role="bold">_*8X. =&gt; {
    Set(nst=${EXTEN:2});
    Verbose(1,${CALLERID(num)} will Anruf von ${nst} holen);</emphasis>
    // hier könnte eine Berechtigungsprüfung eingebaut werden
    <emphasis role="bold">Pickup(${nst}@interne-benutzer);
  }</emphasis>
}</programlisting>

      <para>Damit haben wir in Asterisk eine Extension definiert, die besagt,
      dass beim Wählen von
      <code>*8</code><replaceable>&lt;Nebenstelle&gt;</replaceable>
      (also z. B. <code>*821</code>) der Anruf herangeholt wird, der
      gerade auf dieser <replaceable>&lt;Nebenstelle&gt;</replaceable> (z. B.
      <code>21</code>) im Context <code>interne-benutzer</code>
      klingelt.<footnote>
          <para>Zur Beschreibung der Applikation <code>Pickup()</code>
          siehe auch: <xref linkend="applications-pickup" /></para>
        </footnote><footnote>
          <para>Die Applikation <code>Pickup()</code> darf nicht
          verwechselt werden mit der Bristuff-Applikation
          <code>PickUp()</code> bzw. <code>DPickup()</code>,
          <code>PickUp2()</code> oder anderen Applikationen ähnlichen
          Namens, die in den diversen Internet-Foren usw. als Patches
          herumgeistern, auch wenn sie ungefähr das Gleiche bewirken.</para>
        </footnote></para>
    </section>

    <section id="blf-pickup-telefon">
      <title>Konfiguration des Telefons für Pickup<indexterm>
          <primary>Snom</primary>

          <secondary>Pickup</secondary>
        </indexterm></title>

      <para>Dem Snom-Telefon muss jetzt noch mitgeteilt werden, welche Nummer
      zur Gesprächsübernahme gewählt werden muss. Anstatt wie oben beschrieben
      (<xref linkend="blf-telefon-konfiguration-snom" />) bei
      <quote>Ziel</quote>/<quote>Nebenstelle</quote> nur die zu überwachende
      Nummer einzutragen, tragen Sie nun die Nummer gefolgt von einem
      <quote><code>|</code></quote> (Pipe-Symbol) und der oben
      definierten Zeichekette <quote><code>*8</code></quote> für das
      Pickup ein &#8211; also für obiges Beispiel
      <quote><code>21|*8</code></quote>. Das Telefon wandelt dies wieder
      in die passende SIP-URI um. Das Snom wird durch diesen Zusatz, der
      streng genommen nicht zur SIP-URI gehört, angewiesen, zum Heranholen
      <code>*8</code> vor der Nebenstellennummer zu wählen, obwohl es
      ihm von Asterisk in der Status-Benachrichtigung nicht so mitgeteilt
      wird.<footnote>
          <para>Das wird vermutlich in neueren Versionen von Asterisk behoben,
          siehe <ulink
          url="http://bugs.digium.com/view.php?id=5014"><citetitle>Asterisk
          Bug 5014</citetitle></ulink>.</para>
        </footnote> (Eine detaillierte technische Beschreibung, wie das Snom
      auf verschiedene Formen der SIP-<literal>NOTIFY</literal>-Nachrichten
      reagiert, finden Sie unter <ulink
      url="http://wiki.snom.com/Features/Call_Pick-Up">http://wiki.snom.com/Features/Call_Pick-Up</ulink>.)
      Andere Telefone haben ähnliche Mechanismen (Grandstream z. B.
      <code>**</code> statt <code>*8</code>, dafür muss man
      gegebenenfalls die in diesem Kapitel beschriebenen Extensions
      anpassen).</para>

      <para>Jetzt können Sie am überwachenden Telefon einfach die Anrufe
      annehmen, die am überwachten Telefon eingehen, indem Sie die zur
      blinkenden LED passende Taste drücken.</para>

      <note>
        <para>Um die Anzeige- und Übernahme-Funktionalität korrekt zu nutzen,
        müssen Sie in den <quote>Erweiterten Einstellungen</quote> des Snoms
        zwei Einstellungen anpassen. Das Setting <quote>Dialog-Info Call
        Pickup</quote> muss aktiviert sein, und <quote>Pakete vom Registrar
        filtern</quote> muss deaktiviert werden. Die erweiterten Einstellungen
        sind nur im Admin-Modus des Telefons verfügbar.</para>
      </note>

      <note>
        <para>Es wäre natürlich auch schön, wenn man sehen könnte, wer gerade
        auf der überwachten Leitung anruft, bevor man den Anruf entgegennimmt.
        Dies bietet Asterisk von sich aus leider nicht an. Im Internet gibt es
        aber diverse Patches, die auch das ermöglichen.</para>
      </note>

      <para>Sollen die erläuterten Einstellungen in Form einer automatischen
      Konfiguration ins Snom geladen werden, müssen beispielsweise folgende
      Parameter in der gerätespezifischen Konfiguration
      stehen:<programlisting>filter_registrar: off
callpickup_dialoginfo: on
fkey5: dest 22|*8
fkey6: dest 23|*8</programlisting><note>
          <para>Die Funktionstasten sind 0-indiziert. Um wie im Beispiel die
          Funktionstaste 6 zu belegen, muss der Parameter
          <code>fkey5</code> gesetzt werden usw. Die Funktionstaste 1
          wird mit <code>fkey0</code> angesprochen.</para>
        </note></para>
    </section>

    <section id="blf-group-pickup">
      <title>Heranholen von einer Gruppe</title>

      <para>Das Heranholen eines Anrufs von einer Gruppe von Teilnehmern
      (<foreignphrase lang="en">group pickup</foreignphrase>) ist sehr ähnlich
      und schnell beschrieben. Entweder baut man sich Pickup-Extensions wie z.
      B. die folgende:</para>

      <programlisting>context interne-benutzer {
  
  // Verkaufsabteilung
  hint(SIP/21&amp;SIP/22&amp;SIP/23) 20 =&gt; {
    Dial(SIP/21&amp;SIP/22&amp;SIP/23,40);
  }
  
  // Gesprächsübernahme (PickUp) von der Gruppe Verkauf
  <emphasis role="bold">_*820 =&gt; {
    Verbose(1,${CALLERID(num)} will Anruf von Gruppe Verkauf holen);
    Pickup(21@interne-benutzer&amp;22@interne-benutzer&amp;23@interne-benutzer);
  }</emphasis>
}</programlisting>

      <para>Als zu überwachende Nebenstelle würde man dann am Telefon die
      <code>20</code> eintragen (Snom: <code>20|*8</code>).</para>

      <para>Als gute Alternative bietet sich die
      <code>PICKUPMARK</code>-Funktionalität der
      <code>Pickup()</code>-Applikation (<xref
      linkend="applications-pickup" />) an, mit der man flexibler ist.
      Beispiel:</para>

      <programlisting>context interne-benutzer {
  
  // Verkaufsmitarbeiter
  _2X =&gt; {
    <emphasis role="bold">Set(__PICKUPMARK=verkauf);</emphasis>
    Dial(SIP/${EXTEN},40);
  }
  hint(SIP/21) 21 =&gt; {}
  hint(SIP/22) 22 =&gt; {}
  hint(SIP/23) 23 =&gt; {}
  
  // Verkaufsabteilung
  hint(SIP/21&amp;SIP/22&amp;SIP/23) 20 =&gt; {
    <emphasis role="bold">Set(__PICKUPMARK=verkauf);</emphasis>
    Dial(SIP/21&amp;SIP/22&amp;SIP/23,40);
  }
  
  // Gesprächsübernahme von der Gruppe Verkauf
  _*820 =&gt; {
    Verbose(1,${CALLERID(num)} will Anruf von Gruppe Verkauf holen);
    <emphasis role="bold">Pickup(verkauf@PICKUPMARK);</emphasis>
  }
}</programlisting>

      <para>Will man keine Extra-Nebenstelle (im obigen Beispiel die
      <code>20</code>) für die Pickup-Gruppe verbrauchen, so bietet sich
      für fortgeschrittene Anwender z. B. folgende Konfiguration an:</para>

      <programlisting>context interne-benutzer {
  
  // Verkaufsmitarbeiter
  _2X =&gt; {
    <emphasis role="bold">Set(__PICKUPMARK=200);</emphasis>
    // welcher Mitarbeiter zu welcher Pickup-Gruppe gehört, ließe sich
    // z. B. über ein ausgefeiltes AGI-Skript setzen
    Dial(SIP/${EXTEN}<emphasis role="bold">&amp;Local/**${PICKUPMARK}</emphasis>,40);
  }
  hint(SIP/21) 21 =&gt; {}
  hint(SIP/22) 22 =&gt; {}
  hint(SIP/23) 23 =&gt; {}
  
  // Pickup-Gruppen
  _**X. =&gt; {
    Verbose(1,Es klingelt in Pickup-Gruppe ${EXTEN:2});
  }
  <emphasis role="bold">hint(SIP/21&amp;SIP/22&amp;SIP/23) **200 =&gt; {}</emphasis>
  
  // Gesprächsübernahme direkt
  _*8X. =&gt; {
    Set(nst=${EXTEN:2});
    Verbose(1,${CALLERID(num)} will Anruf von ${nst} holen);
    // hier könnte eine Berechtigungsprüfung eingebaut werden
    Pickup(${nst}@interne-benutzer);
  }
  
  // Gesprächsübernahme von einer Gruppe
  <emphasis role="bold">_*8**X.</emphasis> =&gt; {
    Set(pmark=${EXTEN:4});
    Verbose(1,${CALLERID(num)} will Anruf von Pickup-Gruppe ${pmark} holen);
    // hier könnte eine Berechtigungsprüfung eingebaut werden
    <emphasis role="bold">Pickup(${pmark}@PICKUPMARK);</emphasis>
  }
}</programlisting>

      <para>Als zu überwachende Nebenstelle würde man dann am Telefon die
      <code>**200</code> eintragen (Snom:
      <code>**200|*8</code>).</para>
    </section>
  </section>

  <section id="blf-device-state">
    <title>Gezielte Ansteuerung der LEDs</title>

    <subtitle>DEVICE_STATE()<indexterm>
        <primary>DEVICE_STATE()</primary>
      </indexterm></subtitle>

    <para>Wie man über Hints Extensions mit dem Status von SIP-Benutzern
    verknüpfen kann, haben Sie schon gelernt. Zur Erinnerung:</para>

    <table colsep="0" frame="none" pgwide="1" rowsep="0" tocentry="0">
      <title>Hints für SIP-Benutzer</title>

      <tgroup cols="2">
        <colspec align="left" colnum="1" colwidth="5*" />

        <colspec align="left" colnum="2" colwidth="4*" />

        <thead valign="middle">
          <row>
            <entry align="center"><filename>extensions.conf</filename></entry>

            <entry align="center"><filename>extensions.ael</filename></entry>
          </row>
        </thead>

        <tbody valign="top">
          <row>
            <entry><programlisting>exten =&gt; 21,<emphasis role="bold">hint,SIP/21</emphasis></programlisting></entry>

            <entry><programlisting><emphasis role="bold">hint(SIP/21)</emphasis> 21 =&gt; {}</programlisting></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>Seit Asterisk 1.6 kann man über Hints aber Extensions auch mit dem
    Status von <literal>MeetMe</literal>-Konferenzräumen verbinden:</para>

    <table colsep="0" frame="none" pgwide="1" rowsep="0" tocentry="0">
      <title>Hints für MeetMe-Konferenzräume<indexterm>
          <primary>Hints</primary>

          <secondary>MeetMe</secondary>
        </indexterm></title>

      <indexterm>
        <primary>Hints</primary>

        <secondary>MeetMe</secondary>
      </indexterm>

      <indexterm>
        <primary>MeetMe</primary>

        <secondary>Hints</secondary>
      </indexterm>

      <tgroup cols="2">
        <colspec align="left" colnum="1" colwidth="5*" />

        <colspec align="left" colnum="2" colwidth="4*" />

        <thead valign="middle">
          <row>
            <entry align="center"><filename>extensions.conf</filename></entry>

            <entry align="center"><filename>extensions.ael</filename></entry>
          </row>
        </thead>

        <tbody valign="top">
          <row>
            <entry><programlisting>exten =&gt; 881,<emphasis role="bold">hint,MeetMe:885</emphasis>
exten =&gt; 881,1,MeetMe(885)</programlisting></entry>

            <entry><programlisting><emphasis role="bold">hint(MeetMe:885)</emphasis> 881 =&gt; {
  MeetMe(885);
}</programlisting></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>Der Hint im Beispiel oben schafft die Verknüpfung zwischen der
    Extension <code>881</code> mit dem Status des
    <literal>MeetMe</literal>-Konferenzraums <code>885</code>. Die
    Nummern sind hier mit Absicht unterschiedlich gewählt; in Wirklichkeit
    werden sie häufig gleich sein. Man könnte jetzt am Telefon eine Taste mit
    der Nebenstelle <code>881</code> belegen. Dann würde die LED den
    Status des Konferenzraums anzeigen.</para>

    <para>Das aber nur als kleiner Exkurs, da es gerade thematisch passt. Noch
    interessanter ist, dass man ab Asterisk 1.6 über Hints Extensions auch mit
    eigenen, <quote>virtuellen Geräten</quote> assoziieren kann. Die
    Schreibweise ist fast genauso:</para>

    <table colsep="0" frame="none" pgwide="1" rowsep="0" tocentry="0">
      <title>Hints für virtuelle Geräte<indexterm>
          <primary>Hints</primary>

          <secondary>Custom</secondary>
        </indexterm></title>

      <tgroup cols="2">
        <colspec align="left" colnum="1" colwidth="5*" />

        <colspec align="left" colnum="2" colwidth="4*" />

        <thead valign="middle">
          <row>
            <entry align="center"><filename>extensions.conf</filename></entry>

            <entry align="center"><filename>extensions.ael</filename></entry>
          </row>
        </thead>

        <tbody valign="top">
          <row>
            <entry><programlisting>exten =&gt; 99,<emphasis role="bold">hint,Custom:mein-status</emphasis></programlisting></entry>

            <entry><programlisting><emphasis role="bold">hint(Custom:mein-status)</emphasis> 99 =&gt; {}</programlisting></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>Den Status dieser <quote><foreignphrase lang="en">Custom
    Devices</foreignphrase></quote> kann man ganz frei mit der Funktion
    <code>DEVICE_STATE()</code><footnote>
        <para>Die Funktion hieß zeitweilig <code>DEVSTATE()</code>.
        Damit ist ebenfalls <code>DEVICE_STATE()</code> gemeint. Sie
        darf allerdings nicht verwechselt werden mit der Applikation
        <code>DevState()</code> oder anderen Funktionen oder
        Applikationen ähnlichen Namens, die in den diversen Internet-Foren
        usw. herumgeistern, auch wenn sie ungefähr das Gleiche
        bewirken.</para>
      </footnote> von einer beliebigen anderen Stelle im Dialplan aus
    festlegen.</para>

    <programlisting>Set(DEVICE_STATE(Custom:mein-status)=INUSE);</programlisting>

    <para>An ein Telefon, das den Status der Extension abonniert hat, wird
    dann die jeweilige Benachrichtigung geschickt. Die möglichen Werte und die
    übliche Anzeige am Telefon sind:</para>

    <table colsep="1" rowsep="1" tocentry="0">
      <title><foreignphrase lang="en">Device States</foreignphrase></title>

      <tgroup cols="3">
        <colspec align="left" colnum="1" colwidth="2*" />

        <colspec align="left" colnum="2" colwidth="3*" />

        <colspec align="left" colnum="3" colwidth="2*" />

        <thead valign="middle">
          <row>
            <entry>Wert</entry>

            <entry>Bedeutung</entry>

            <entry>LED<footnote>
                <para>Die Anzeige hängt vom jeweiligen Endgerät ab.</para>
              </footnote></entry>
          </row>
        </thead>

        <tbody valign="top">
          <row>
            <entry><literal>UNKNOWN</literal></entry>

            <entry>unbekannt, nicht angemeldet</entry>

            <entry>aus</entry>
          </row>

          <row>
            <entry><literal>UNAVAILABLE</literal></entry>

            <entry>nicht erreichbar</entry>

            <entry>aus</entry>
          </row>

          <row>
            <entry><literal>NOT_INUSE</literal></entry>

            <entry>frei</entry>

            <entry>aus</entry>
          </row>

          <row>
            <entry><literal>INUSE</literal></entry>

            <entry>im Gespräch</entry>

            <entry>leuchtet dauerhaft</entry>
          </row>

          <row>
            <entry><literal>BUSY</literal></entry>

            <entry>im Gespräch bzw. besetzt</entry>

            <entry>leuchtet dauerhaft</entry>
          </row>

          <row>
            <entry><literal>RINGING</literal></entry>

            <entry>klingelt</entry>

            <entry>blinkt</entry>
          </row>

          <row>
            <entry><literal>RINGINUSE</literal></entry>

            <entry>im Gespräch und klingelt (anklopfen)</entry>

            <entry>blinkt</entry>
          </row>

          <row>
            <entry><literal>ONHOLD</literal></entry>

            <entry>auf <quote>halten</quote></entry>

            <entry>blinkt langsam</entry>
          </row>

          <row>
            <entry><literal>INVALID</literal></entry>

            <entry>ungültig</entry>

            <entry>aus</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>Nach einem Restart von Asterisk, wenn der Status eines
    <code>Custom</code>-<foreignphrase lang="en">Devices</foreignphrase>
    noch nicht gesetzt wurde, hat das <emphasis>Device</emphasis> initial den
    Status <literal>UNKNOWN</literal>.</para>

    <para>Nachdem ein Telefon über die obige beispielhafte Extension
    <code>99</code> den Status von <code>Custom:mein-status</code>
    abonniert hat, kann man, um die Funktionsweise zu testen, den Wählplan z.
    B. um folgenden Code erweitern:</para>

    <programlisting>hint(Custom:mein-status) 99 =&gt; {}

*91 =&gt; {
  Set(DEVICE_STATE(Custom:mein-status)=RINGING);
}
*92 =&gt; {
  Set(DEVICE_STATE(Custom:mein-status)=INUSE);
}
*93 =&gt; {
  Set(DEVICE_STATE(Custom:mein-status)=NOT_INUSE);
}
*94 =&gt; {
  if ("${DEVICE_STATE(Custom:mein-status)}" = "INUSE") {
    Set(DEVICE_STATE(Custom:mein-status)=NOT_INUSE);
  }
  else {
    Set(DEVICE_STATE(Custom:mein-status)=INUSE);
  }
}</programlisting>

    <para>Nun können die verschiedenen Device-States getestet werden, z. B.
    kann man die LED mit <code>*91</code> blinken oder mit
    <code>*92</code> dauerhaft leuchten lassen sowie mit
    <code>*93</code> wieder deaktivieren oder mit <code>*94</code>
    abwechselnd an- und ausschalten. Ist die Funktionsweise einmal
    sichergestellt, sind der sinnvollen (oder unsinnigen) Anwendung dieses
    Features keine Grenzen mehr gesetzt; man könnte damit z. B. anzeigen, ob
    man gerade als Mitglied in eine Queue eingeloggt ist oder ob der
    Rasensprenger gerade läuft.</para>

    <para>Natürlich taucht der Hint auch in der Ausgabe von
    <literal><command>core show hints</command></literal> zusammen mit den
    anderen Hints auf:</para>

    <programlisting>*CLI&gt; <emphasis role="bold"><command>core show hints</command></emphasis> 
    -= Registered Asterisk Dial Plan Hints =-
  99@test              : Custom:mein-status  State:InUse         Watchers  0
  21@interne-benutzer  : SIP/21              State:Unavailable   Watchers  0
  22@interne-benutzer  : SIP/22              State:Unavailable   Watchers  0
----------------
- 1 hints registered</programlisting>

    <para>Hilfreich ist auch der CLI-Befehl <literal><command>devstate
    list</command></literal>, mit dem man den Status aller gesetzten
    <literal>Custom</literal>-Hints ausgeben kann:</para>

    <programlisting>*CLI&gt; <emphasis role="bold"><command>devstate list</command></emphasis> 
---------------------------------------------------------------------
--- Custom Device States --------------------------------------------
---------------------------------------------------------------------
---
--- Name: 'Custom:mein-status'  State: 'INUSE'
---
---------------------------------------------------------------------
---------------------------------------------------------------------</programlisting>

    <para>Mit <command><literal>devstate change
    </literal><replaceable>device</replaceable>
    <replaceable>state</replaceable></command> lässt sich der Status vom CLI
    aus setzen:</para>

    <programlisting>*CLI&gt; <emphasis role="bold"><command>devstate change Custom:mein-status RINGING</command></emphasis>
Changing mein-status to RINGING
*CLI&gt; <emphasis role="bold"><command>devstate list</command></emphasis> 
---------------------------------------------------------------------
--- Custom Device States -------------------------------------------
---------------------------------------------------------------------
---
--- Name: 'Custom:mein-status'  State: 'RINGING'
---
---------------------------------------------------------------------
---------------------------------------------------------------------</programlisting>
  </section>
</chapter>
