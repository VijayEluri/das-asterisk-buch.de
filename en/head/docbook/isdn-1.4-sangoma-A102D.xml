<?xml version="1.0" encoding="ISO-8859-1"?>
<section id="isdn-1.4-sangoma-A102D.html" lang="en" revision="$Revision:473 $">
  <!--% Copyright (c) 2006 - 2007 by 
% Stefan Wintermeyer <sw@amooma.de>
% Permission is granted to copy, distribute and/or modify this document
% under the terms of the GNU Free Documentation License, Version 1.2
% or any later version published by the Free Software Foundation;
% with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
% Texts. A copy of the license is included in the section entitled "GNU
% Free Documentation License".
% translated from the German by Stephen Bosch <sbosch@vodacomm.ca>
% Asterisk training and consulting is offered at http://www.amooma.de-->

  <title>Installing the Sangoma A102D T1/E1/J1 2-port ISDN card</title>

  <indexterm>
    <primary>Sangoma ISDN installation</primary>
  </indexterm>

  <para>In this example, we will walk through the process for installing and
  configuring a Sangoma A102D T1/E1/J1 2-port ISDN card, configure the card to
  loop back to itself, and place some test calls over the T1 PRI.</para>

  <para>The Sangoma cards are sold as a series with a common architecture, so
  the same instructions apply whether the card you are installing has 1 or 8
  ports. The initial installation procedure closely follows a standard
  Asterisk install, except that the Sangoma WANPIPE drivers do some patching
  to Zaptel. For this reason, parts of the base install instructions are
  repeated here. Nevertheless, it's important that you follow these
  instructions, and follow them carefully. Following the instructions will
  ensure that the configuration works as intended.</para>

  <para>Though the process can seem daunting, much of it is automated, and in
  all but the most particular installations, the defaults are
  sufficient.</para>

  <para>We assume a freshly installed Debian GNU/Linux 4.0 (a.k.a Etch). You
  can obtain an ISO image for the net-based install of x86 Debian Linux at
  <ulink
  url="http://www.debian.org/releases/etch/debian-installer/">http://www.debian.org/releases/etch/debian-installer/</ulink>.
  A Debian GNU/Linux installation manual may be found at <ulink
  url="http://www.debian.org/releases/etch/i386/">http://www.debian.org/releases/etch/i386/</ulink>.</para>

  <para><emphasis>Before starting, please log in as root.</emphasis><note>
      <para>For the sake of brevity, verbose output has been trimmed.
      Editorial omissions are indicated with <code>[...]</code>.</para>
    </note></para>

  <para>Update the Debian package listing with <command>apt-get
  update</command>:<screen>debian:~# apt-get update
Ign cdrom://[Debian GNU/Linux 4.0 r0 _Etch_ - Official i386 NETINST Binary-1 20070407-11:29] etch Release.gpg
Ign cdrom://[Debian GNU/Linux 4.0 r0 _Etch_ - Official i386 NETINST Binary-1 20070407-11:29] etch Release
Ign cdrom://[Debian GNU/Linux 4.0 r0 _Etch_ - Official i386 NETINST Binary-1 20070407-11:29] etch/contrib Packages/DiffIndex
Ign cdrom://[Debian GNU/Linux 4.0 r0 _Etch_ - Official i386 NETINST Binary-1 20070407-11:29] etch/main Packages/DiffIndex
Get:1 http://security.debian.org etch/updates Release.gpg [189B]      
Get:2 http://ftp.debian.org etch Release.gpg [378B]   
Hit http://security.debian.org etch/updates Release
Hit http://ftp.debian.org etch Release        
Ign http://security.debian.org etch/updates/main Packages/DiffIndex
Ign http://ftp.debian.org etch/main Packages/DiffIndex
Ign http://security.debian.org etch/updates/contrib Packages/DiffIndex
Ign http://security.debian.org etch/updates/main Sources/DiffIndex
Ign http://ftp.debian.org etch/main Sources/DiffIndex
Ign http://security.debian.org etch/updates/contrib Sources/DiffIndex
Hit http://security.debian.org etch/updates/main Packages
Hit http://ftp.debian.org etch/main Packages   
Hit http://security.debian.org etch/updates/contrib Packages
Hit http://ftp.debian.org etch/main Sources    
Hit http://security.debian.org etch/updates/main Sources
Hit http://security.debian.org etch/updates/contrib Sources
Fetched 2B in 1s (1B/s)  
Reading package lists... Done
debian:~# </screen></para>

  <para>Now update all the currently installed packages with <command>apt-get
  -y upgrade</command>:<screen>debian:~# apt-get -y upgrade
Reading package lists... Done
Building dependency tree... Done
0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
debian:~# </screen></para>

  <para>Just in case the upgrade installed a new kernel we have to reboot the
  system with <command>shutdown -r now</command>:<screen>debian:~# shutdown -r now

Broadcast message from root@debian (pts/0) (Fri May  4 19:43:09 2007):

The system is going down for reboot NOW!
</screen></para>

  <para>After the reboot we have to login again as root.</para>

  <para>A few more packages are needed to satisfy Asterisk build dependencies.
  Do <command>apt-get -y install build-essential libncurses5-dev libcurl3-dev
  libvorbis-dev libspeex-dev unixodbc unixodbc-dev libiksemel-dev
  linux-headers-`uname -r`.</command></para>

  <screen>debian:~# apt-get -y install build-essential libncurses5-dev libcurl3-dev libvorbis-dev libspeex-dev unixodbc unixodbc-dev libiksemel-dev linux-headers-`uname -r`
Reading package lists... Done
Building dependency tree... Done
The following extra packages will be installed:
  binutils ca-certificates comerr-dev cpp cpp-4.1 defoma dpkg-dev fontconfig
  fontconfig-config g++ g++-4.1 gcc gcc-4.1 libaudio2 libc6-dev libcurl3
  libcurl3-openssl-dev libexpat1 libfontconfig1 libfreetype6 libice6
  libidn11-dev libiksemel3 libjpeg62 libkadm55 libkrb5-dev liblcms1 libltdl3
  libltdl3-dev libmng1 libodbcinstq1c2 libogg-dev libogg0 libpng12-0 libqt3-mt
  libsm6 libspeex1 libssl-dev libssp0 libstdc++6-4.1-dev libvorbis0a
  libvorbisenc2 libvorbisfile3 libx11-6 libx11-data libxau6 libxcursor1
  libxdmcp6 libxext6 libxfixes3 libxft2 libxi6 libxinerama1 libxrandr2
  libxrender1 libxt6 linux-headers-2.6.18-4 linux-kbuild-2.6.18
  linux-kernel-headers make odbcinst1debian1 openssl pkg-config ttf-dejavu
  x11-common zlib1g-dev
Suggested packages:
  binutils-doc doc-base cpp-doc gcc-4.1-locales defoma-doc psfontmgr
  x-ttcidfont-conf dfontmgr debian-keyring gcc-4.1-doc lib64stdc++6
  manpages-dev autoconf automake1.9 libtool flex bison gdb gcc-doc
  libc6-dev-amd64 lib64gcc1 lib64ssp0 nas glibc-doc libcurl3-dbg
  libfreetype6-dev krb5-doc liblcms-utils libtool-doc libqt3-mt-psql
  libqt3-mt-mysql libqt3-mt-odbc speex libstdc++6-4.1-doc make-doc-non-dfsg
  libgnome-dev libmyodbc odbc-postgresql libct1 libqt3-mt-dev
Recommended packages:
  libft-perl bzip2 libmudflap0-dev libgl1-mesa-glx libgl1 libglu1-mesa libglu1
  libxmu6
The following NEW packages will be installed:
  binutils build-essential ca-certificates comerr-dev cpp cpp-4.1 defoma
  dpkg-dev fontconfig fontconfig-config g++ g++-4.1 gcc gcc-4.1 libaudio2
  libc6-dev libcurl3 libcurl3-dev libcurl3-openssl-dev libexpat1
  libfontconfig1 libfreetype6 libice6 libidn11-dev libiksemel-dev libiksemel3
  libjpeg62 libkadm55 libkrb5-dev liblcms1 libltdl3 libltdl3-dev libmng1
  libncurses5-dev libodbcinstq1c2 libogg-dev libogg0 libpng12-0 libqt3-mt
  libsm6 libspeex-dev libspeex1 libssl-dev libssp0 libstdc++6-4.1-dev
  libvorbis-dev libvorbis0a libvorbisenc2 libvorbisfile3 libx11-6 libx11-data
  libxau6 libxcursor1 libxdmcp6 libxext6 libxfixes3 libxft2 libxi6
  libxinerama1 libxrandr2 libxrender1 libxt6 linux-headers-2.6.18-4
  linux-headers-2.6.18-4-686 linux-kbuild-2.6.18 linux-kernel-headers make
  odbcinst1debian1 openssl pkg-config ttf-dejavu unixodbc unixodbc-dev
  x11-common zlib1g-dev
0 upgraded, 75 newly installed, 0 to remove and 0 not upgraded.
Need to get 23.1MB/38.1MB of archives.
After unpacking 137MB of additional disk space will be used.
Get:1 http://ftp.debian.org etch/main libice6 1:1.0.1-2 [42.6kB]
Get:2 http://ftp.debian.org etch/main libsm6 1:1.0.1-3 [18.0kB]

[...]

Setting up libvorbis-dev (1.1.2.dfsg-1.2) ...
Setting up linux-headers-2.6.18-4 (2.6.18.dfsg.1-12) ...
Setting up linux-kbuild-2.6.18 (2.6.18-1) ...
Setting up linux-headers-2.6.18-4-686 (2.6.18.dfsg.1-12) ...
Setting up unixodbc-dev (2.2.11-13) ...
Setting up libstdc++6-4.1-dev (4.1.1-21) ...
Setting up g++-4.1 (4.1.1-21) ...
Setting up g++ (4.1.1-15) ...

Setting up build-essential (11.3) ...
debian:~# </screen>

  <para>Now change into the <filename>/usr/src</filename> directory with
  <command>cd /usr/src</command>:<screen>debian:~# cd /usr/src
debian:/usr/src#</screen></para>

  <para>Find the Asterisk sources you need at the official homepage:<ulink
  url="http://www.asterisk.org/"><citetitle>
  http://www.asterisk.org/</citetitle></ulink>. Take care to use only a
  <emphasis role="bold">stable</emphasis>, <emphasis
  role="bold">current</emphasis> version and not a development version.
  Download it to <filename>/usr/src</filename> with <command>wget
  http://ftp.digium.com/pub/asterisk/asterisk-1.4-current.tar.gz</command>:</para>

  <screen>debian:/usr/src# wget http://ftp.digium.com/pub/asterisk/asterisk-1.4-current.tar.gz
--13:03:47--  http://ftp.digium.com/pub/asterisk/asterisk-1.4-current.tar.gz
           =&gt; `asterisk-1.4-current.tar.gz'
Resolving ftp.digium.com... 216.27.40.102, 69.16.138.164
Connecting to ftp.digium.com|216.27.40.102|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 17,081,631 (16M) [application/x-gzip]

100%[====================================&gt;] 17,081,631   263.92K/s    ETA 00:00

13:04:56 (244.60 KB/s) - `asterisk-1.4-current.tar.gz' saved [17081631/17081631]

debian:/usr/src#</screen>

  <para>You will need the current Zaptel drivers as well. Get them with
  <command>wget
  http://ftp.digium.com/pub/zaptel/zaptel-1.4-current.tar.gz</command>:<screen>debian:/usr/src# wget http://ftp.digium.com/pub/zaptel/zaptel-1.4-current.tar.gz
--13:06:49--  http://ftp.digium.com/pub/zaptel/zaptel-1.4-current.tar.gz
           =&gt; `zaptel-1.4-current.tar.gz'
Resolving ftp.digium.com... 216.27.40.102, 69.16.138.164
Connecting to ftp.digium.com|216.27.40.102|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 2,839,262 (2.7M) [application/x-gzip]

100%[====================================&gt;] 2,839,262    263.92K/s    ETA 00:00

13:06:59 (260.09 KB/s) - `zaptel-1.4-current.tar.gz' saved [2839262/2839262]

debian:/usr/src#</screen></para>

  <para>You will also need the libpri package. Get it with <command>wget
  http://ftp.digium.com/pub/libpri/releases/libpri-1.4.1.tar.gz</command>:</para>

  <para><screen>debian:/usr/src# wget http://ftp.digium.com/pub/libpri/releases/libpri-1.4.1.tar.gz
--09:48:17--  http://ftp.digium.com/pub/libpri/releases/libpri-1.4.1.tar.gz
           =&gt; `libpri-1.4.1.tar.gz'
Resolving ftp.digium.com... 216.27.40.102
Connecting to ftp.digium.com|216.27.40.102|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 81,178 (79K) [application/x-gzip]

100%[====================================&gt;] 81,178       233.06K/s

09:48:23 (232.02 KB/s) - `libpri-1.4.1.tar.gz' saved [81178/81178]

debian:/usr/src#
</screen>Get the current Sangoma wanpipe driver set at <ulink
  url="???">ftp://ftp.sangoma.com/linux/current_wanpipe</ulink>. In this
  example, <command>wget
  ftp://ftp.sangoma.com/linux/current_wanpipe/wanpipe-2.3.4-13.tgz</command>:</para>

  <para><screen>debian:/usr/src# wget ftp://ftp.sangoma.com/linux/current_wanpipe/wanpipe-2.3.4-13.tgz
--09:40:07--  ftp://ftp.sangoma.com/linux/current_wanpipe/wanpipe-2.3.4-13.tgz
           =&gt; `wanpipe-2.3.4-13.tgz'
Resolving ftp.sangoma.com... 64.34.169.116
Connecting to ftp.sangoma.com|64.34.169.116|:21... connected.
Logging in as anonymous ... Logged in!
==&gt; SYST ... done.    ==&gt; PWD ... done.
==&gt; TYPE I ... done.  ==&gt; CWD /linux/current_wanpipe ... done.
==&gt; PASV ... done.    ==&gt; RETR wanpipe-2.3.4-13.tgz ... done.
Length: 10,088,497 (9.6M) (unauthoritative)

100%[====================================&gt;] 10,088,497   303.15K/s    ETA 00:00

09:40:40 (300.96 KB/s) - `wanpipe-2.3.4-13.tgz' saved [10088497]

debian:/usr/src#
</screen></para>

  <para>Unpack all the compressed tar archives with <command>tar xvzf
  asterisk-1.4-current.tar.gz &amp;&amp; tar xvzf zaptel-1.4-current.tar.gz
  &amp;&amp; tar xvzf libpri-1.4.1.tar.gz &amp;&amp; tar xvzf
  wanpipe-2.3.4-13.tgz</command>:<screen>debian:/usr/src# tar xvzf asterisk-1.4-current.tar.gz &amp;&amp; tar xvzf zaptel-1.4-current.tar.gz &amp;&amp; tar xvzf libpri-1.4.1.tar.gz &amp;&amp; tar xvzf wanpipe-2.3.4-13.tgz
asterisk-1.4.9/
asterisk-1.4.9/sample.call
asterisk-1.4.9/missing
asterisk-1.4.9/configs/
asterisk-1.4.9/configs/rpt.conf.sample
asterisk-1.4.9/configs/features.conf.sample
asterisk-1.4.9/configs/cdr_custom.conf.sample
asterisk-1.4.9/configs/res_pgsql.conf.sample
asterisk-1.4.9/configs/agents.conf.sample

[...]

zaptel-1.4.4/
zaptel-1.4.4/build_tools/
zaptel-1.4.4/build_tools/install_prereq
zaptel-1.4.4/build_tools/make_version
zaptel-1.4.4/build_tools/genmodconf
zaptel-1.4.4/build_tools/make_firmware_object
zaptel-1.4.4/build_tools/make_svn_branch_name
zaptel-1.4.4/build_tools/menuselect-deps.in
zaptel-1.4.4/build_tools/genudevrules
zaptel-1.4.4/build_tools/make_version_h
zaptel-1.4.4/build_tools/make_tree

[...]

libpri-1.4.1/
libpri-1.4.1/pri_timers.h
libpri-1.4.1/.version
libpri-1.4.1/README
libpri-1.4.1/copy_string.c
libpri-1.4.1/LICENSE
libpri-1.4.1/prisched.c
libpri-1.4.1/ChangeLog

[...]

wanpipe-2.3.4-13/
wanpipe-2.3.4-13/doc/
wanpipe-2.3.4-13/doc/README-1.install
wanpipe-2.3.4-13/doc/README-2.config
wanpipe-2.3.4-13/doc/README-3.operation
wanpipe-2.3.4-13/doc/README-4.debugging
wanpipe-2.3.4-13/doc/README.adsl
wanpipe-2.3.4-13/doc/README.atm

[...]

wanpipe-2.3.4-13/wan_ec/OCT6126-128S.ima
wanpipe-2.3.4-13/wan_ec/OCT6116-32S.ima
wanpipe-2.3.4-13/wan_ec/OCT6116-64S.ima
wanpipe-2.3.4-13/wan_ec/OCT6116-256S.ima
wanpipe-2.3.4-13/ChangeLog.stable.bak
debian:/usr/src#                   </screen></para>

  <remark>Asterisk 1.4 is the first version of Asterisk that uses the standard
  Unix/Linux autoconf mechanism.</remark>

  <para><important>
      <para>Asterisk is a very dynamic project; as such, the version numbers
      in the examples depicted below will increase frequently and over time.
      Documentation is by its nature static and it is not always possible to
      keep version numbers current. We ask that you keep this in mind and
      notify us of changes.</para>
    </important>We build the Zaptel drivers first. Change into the Zaptel
  directory with <command>cd zaptel-1.4.4</command> and build it with
  <command>./configure &amp;&amp; make &amp;&amp; make
  install</command>:<screen>debian:/usr/src/zaptel-1.4.4# ./configure &amp;&amp; make &amp;&amp; make install
checking for gcc... gcc
checking for C compiler default output file name... a.out
checking whether the C compiler works... yes
checking whether we are cross compiling... no
checking for suffix of executables...
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes

[...]

make[2]: Entering directory `/usr/src/zaptel-1.4.4/menuselect'
make[3]: Entering directory `/usr/src/zaptel-1.4.4/menuselect/mxml'
gcc -O -Wall   -c mxml-attr.c
gcc -O -Wall   -c mxml-entity.c
gcc -O -Wall   -c mxml-file.c
gcc -O -Wall   -c mxml-index.c
gcc -O -Wall   -c mxml-node.c
gcc -O -Wall   -c mxml-search.c

[...]

install -d /etc/udev/rules.d
build_tools/genudevrules &gt; /etc/udev/rules.d/zaptel.rules
for x in pciradio.ko tor2.ko torisa.ko wcfxo.ko wct1xxp.ko wctdm.ko wctdm24xxp.ko wcte11xp.ko wcusb.ko zaptel.ko ztd-eth.ko ztd-loc.ko ztdummy.ko ztdynamic.ko zttranscode.ko wcte12xp.ko wct4xxp/wct4xxp.ko wctc4xxp/wctc4xxp.ko xpp/xpp_usb.ko xpp/xpd_fxo.ko xpp/xpd_fxs.ko xpp/xpp.ko; do \
                rm -f /lib/modules/2.6.18-4-686/extra/$x ; \
                rm -f /lib/modules/2.6.18-4-686/misc/$x ; \
                rm -f /lib/modules/2.6.18-4-686/zaptel/$x ; \
        done;
make -C /lib/modules/2.6.18-4-686/build SUBDIRS=/usr/src/zaptel-1.4.4 INSTALL_MOD_PATH= INSTALL_MOD_DIR=misc modules_install
make[1]: Entering directory `/usr/src/linux-headers-2.6.18-4-686'
  INSTALL /usr/src/zaptel-1.4.4/pciradio.ko
  INSTALL /usr/src/zaptel-1.4.4/tor2.ko
  INSTALL /usr/src/zaptel-1.4.4/torisa.ko
  INSTALL /usr/src/zaptel-1.4.4/wcfxo.ko

[...]

Building /etc/modprobe.d/zaptel...
***
*** WARNING:
*** If you had custom settings in /etc/modprobe.d/zaptel,
*** they have been moved to /etc/modprobe.d/zaptel.bak.
***
*** In the future, do not edit /etc/modprobe.d/zaptel, but
*** instead put your changes in another file
*** in the same directory so that they will not
*** be overwritten by future Zaptel updates.
***
debian:/usr/src/zaptel-1.4.4#
</screen></para>

  <para>Next, change to the libpri source directory with <command>cd
  /usr/src/libpri-1.4.1</command> and build it with <command>make &amp;&amp;
  make install</command>:</para>

  <para><screen>debian:/usr/src/zaptel-1.4.4# cd /usr/src/libpri-1.4.1
debian:/usr/src/libpri-1.4.1# make &amp;&amp; make install
CC=gcc ./mkdep -Wall -Werror -Wstrict-prototypes -Wmissing-prototypes -g   `ls *.c`
gcc -Wall -Werror -Wstrict-prototypes -Wmissing-prototypes -g     -c -o copy_string.o copy_string.c
gcc -Wall -Werror -Wstrict-prototypes -Wmissing-prototypes -g     -c -o pri.o pri.c
gcc -Wall -Werror -Wstrict-prototypes -Wmissing-prototypes -g     -c -o q921.o q921.c
gcc -Wall -Werror -Wstrict-prototypes -Wmissing-prototypes -g     -c -o prisched.o prisched.c
gcc -Wall -Werror -Wstrict-prototypes -Wmissing-prototypes -g     -c -o q931.o q931.c
gcc -Wall -Werror -Wstrict-prototypes -Wmissing-prototypes -g     -c -o pri_facility.o pri_facility.c
ar rcs libpri.a copy_string.o pri.o q921.o prisched.o q931.o pri_facility.o
ranlib libpri.a
gcc -fPIC -Wall -Werror -Wstrict-prototypes -Wmissing-prototypes -g   -o copy_string.lo -c copy_string.c
gcc -fPIC -Wall -Werror -Wstrict-prototypes -Wmissing-prototypes -g   -o pri.lo -c pri.c
gcc -fPIC -Wall -Werror -Wstrict-prototypes -Wmissing-prototypes -g   -o q921.lo -c q921.c
gcc -fPIC -Wall -Werror -Wstrict-prototypes -Wmissing-prototypes -g   -o prisched.lo -c prisched.c
gcc -fPIC -Wall -Werror -Wstrict-prototypes -Wmissing-prototypes -g   -o q931.lo -c q931.c
gcc -fPIC -Wall -Werror -Wstrict-prototypes -Wmissing-prototypes -g   -o pri_facility.lo -c pri_facility.c
gcc -shared -Wl,-hlibpri.so.1.0 -o libpri.so.1.0 copy_string.lo pri.lo q921.lo prisched.lo q931.lo pri_facility.lo
/sbin/ldconfig -n .
ln -sf libpri.so.1.0 libpri.so
ln -sf libpri.so.1.0 libpri.so.1
mkdir -p /usr/lib
mkdir -p /usr/include
install -m 644 libpri.h /usr/include
install -m 755 libpri.so.1.0 /usr/lib
if [ -x /usr/sbin/sestatus ] &amp;&amp; ( /usr/sbin/sestatus | grep "SELinux status:" | grep -q "enabled"); then /sbin/restorecon -v /usr/lib/libpri.so.1.0; fi
( cd /usr/lib ; ln -sf libpri.so.1.0 libpri.so ; ln -sf libpri.so.1.0 libpri.so.1 )
install -m 644 libpri.a /usr/lib
if test $(id -u) = 0; then /sbin/ldconfig -n /usr/lib; fi
debian:/usr/src/libpri-1.4.1#
</screen>Now we can build Asterisk. Enter the Asterisk source directory with
  <command>cd /usr/src/asterisk-1.4.2</command> and build it with
  <command>./configure &amp;&amp; make &amp;&amp; make
  install</command>:<screen>debian:/usr/src/libpri-1.4.1# cd /usr/src/asterisk-1.4.9/
debian:/usr/src/asterisk-1.4.9# ./configure &amp;&amp; make &amp;&amp; make install
checking build system type... i686-pc-linux-gnu
checking host system type... i686-pc-linux-gnu
checking for gcc... gcc
checking for C compiler default output file name... a.out
checking whether the C compiler works... yes
checking whether we are cross compiling... no
checking for suffix of executables...
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes

[...]

make[1]: Leaving directory `/usr/src/asterisk-1.4.9/funcs'
make[1]: Entering directory `/usr/src/asterisk-1.4.9/main'
for x in ; do /usr/bin/install -c -m 755 $x /usr/lib/asterisk/modules ; done
make[1]: Leaving directory `/usr/src/asterisk-1.4.9/main'
 +---- Asterisk Installation Complete -------+
 +                                           +
 +    YOU MUST READ THE SECURITY DOCUMENT    +
 +                                           +
 + Asterisk has successfully been installed. +
 + If you would like to install the sample   +
 + configuration files (overwriting any      +
 + existing config files), run:              +
 +                                           +
 +               make samples                +
 +                                           +
 +-----------------  or ---------------------+
 +                                           +
 + You can go ahead and install the asterisk +
 + program documentation now or later run:   +
 +                                           +
 +              make progdocs                +
 +                                           +
 + **Note** This requires that you have      +
 + doxygen installed on your local system    +
 +-------------------------------------------+
debian:/usr/src/asterisk-1.4.9# </screen></para>

  <para>Asterisk is now installed, but we're not finished yet. Essential
  configuration files in <filename>/etc/asterisk</filename> do not yet exist.
  Rather than start from scratch, we install a set of sample configuration
  files with <command>make samples</command>:</para>

  <screen>debian:/usr/src/asterisk-1.4.9# make samples
mkdir -p /etc/asterisk
for x in configs/*.adsi; do \
                if [ ! -f /etc/asterisk/$x ]; then \
                        /usr/bin/install -c -m 644 $x /etc/asterisk/`/usr/bin/basename $x` ; \
                fi ; \
        done

[...]

mkdir -p /var/spool/asterisk/voicemail/default/1234/INBOX
build_tools/make_sample_voicemail //var/lib/asterisk //var/spool/asterisk
debian:/usr/src/asterisk-1.4.9#</screen>

  <para>Done! Asterisk is ready to go! Check the installed version with
  <command>asterisk -V</command> (uppercase V):<screen>debian:/usr/src/asterisk-1.4.9# asterisk -V
Asterisk 1.4.9
debian:/usr/src/asterisk-1.4.9# </screen>Now it is time to install
  wanpipe.</para>

  <section>
    <title>Installing WANPIPE</title>

    <para>The Sangoma cards use Sangoma's WANPIPE driver layer, which patches
    Zaptel. An installation script automatically detects and configures cards.
    If needed, it can also generate a zapata.conf file.</para>

    <para>WANPIPE requires that flex and byacc be installed. Do this with
    <command>apt-get install flex byacc</command>:</para>

    <para><screen>debian:/usr/src/asterisk-1.4.9# apt-get install flex byacc
Reading package lists... Done
Building dependency tree... Done
Suggested packages:
  bison
The following NEW packages will be installed:
  byacc flex
0 upgraded, 2 newly installed, 0 to remove and 8 not upgraded.
Need to get 352kB of archives.
After unpacking 1516kB of additional disk space will be used.
Get:1 http://debian.yorku.ca etch/main flex 2.5.33-11 [310kB]
Get:2 http://debian.yorku.ca etch/main byacc 20050813-1 [42.1kB]
Fetched 352kB in 1s (241kB/s)
Preconfiguring packages ...
Selecting previously deselected package flex.
(Reading database ... 93308 files and directories currently installed.)
Unpacking flex (from .../flex_2.5.33-11_i386.deb) ...
Selecting previously deselected package byacc.
Unpacking byacc (from .../byacc_20050813-1_i386.deb) ...
Setting up flex (2.5.33-11) ...

Setting up byacc (20050813-1) ...

debian:/usr/src/asterisk-1.4.9#
</screen></para>

    <para><tip>
        <para>It is a good idea to make symbolic links to the install sources,
        like so: <command>cd /usr/src &amp;&amp; ln -s /usr/src/zaptel-1.4.4
        zaptel &amp;&amp; ln -s /usr/src/asterisk-1.4.9 asterisk &amp;&amp; ln
        -s /usr/src/libpri-1.4.1 libpri</command> ... and so on, modifying the
        targets to match your source packages. This is because the wanpipe
        script looks for directories without version numbers by default.
        Having the symbolic links means you don't have to remember the exact
        directory names :)</para>
      </tip>The installer wraps a series of scripts which compile, install and
    configure the wanpipe modules, as well as configuring the PRI interface
    and generating <filename>zapata.conf</filename>, if so desired. For our
    example, we have divided the process into sections for a better overview.
    Most of these scripts can also be run individually after
    installation.</para>

    <para>Change into the wanpipe directory with <command>cd
    /usr/src/wanpipe-2.3.4-13</command>, and run <command>./Setup
    install</command>:</para>

    <section>
      <title>WANPIPE modules</title>

      <para><screen>debian:/usr/src/asterisk-1.4.9# cd /usr/src/wanpipe-2.3.4-13
debian:/usr/src/wanpipe-2.3.4-13# ./Setup install</screen></para>

      <para>The installation script runs and the following screen
      appears:</para>

      <para><screen>ARGS:

        ----------------------------------------------------------
                  WAN Router v2.3.4-13 Installation Script
            Copyright (c) 1995-2007, Sangoma Technologies Inc.
        ----------------------------------------------------------

WANPIPE INSTALLATION

You are about to install WANPIPE Multi-Protocol WAN Router into your
system. This script will examine your system, then install, create
and/or modify necessary files and directories.

You must have the full Linux source code in /lib/modules/2.6.18-4-686/build
directory and development system (i.e. GNU C compiler and utilities)
installed in order to be able to install this product.

The automatic WANPIPE kernel module compilation option will compile all
necessary WANPIPE drivers: thus, no need to re-compile the kernel.

Previously patched kernels can now be upgraded to the latest
WANPIPE release: thus, no need for a fresh kernel install.

Please read WanpipeInstallation.(pdf/txt) and
Release Notes before proceeding with the installation.

Would you like to install WAN Router now? (y/n)
</screen>Press <keycap>y</keycap> to continue. The installer checks for
      prerequisites:</para>

      <para><screen>        ----------------------------------------------------------
                  WAN Router v2.3.4-13 Installation Script
            Copyright (c) 1995-2007, Sangoma Technologies Inc.
        ----------------------------------------------------------

Fixing file permissions...

Verifying files and fixing permissions ...Done
Checking for C developement tools ...(gcc) OK
Checking for C++ developement tools ...OK
Checking for Make utility ...OK
Checking for ncurses library ... OK
Checking for Perl developement tools ...OK
Checking for AWK ...OK
Checking for FLEX ...OK
Checking for Patch ...OK
Checking for libtermcap-devel...OK
Checking for yacc...Checking for yacc...OK

Press [Enter] to continue...
</screen>Press enter to proceed:</para>

      <para><screen>        ----------------------------------------------------------
                  WAN Router v2.3.4-13 Installation Script
            Copyright (c) 1995-2007, Sangoma Technologies Inc.
        ----------------------------------------------------------


UPDATING WANPIPE DEVICE DRIVERS: LINUX KERNEL

To integrate WANPIPE Multiprotocol WAN Router (and WAN drivers
included with this package) into the Linux kernel, the kernel has
to be 'patched' or 'upgraded'.

Patching/Upgrading will update ONLY WANPIPE source
files located in the Linux kernel.

If the kernel has already been patched with old WANPIPE
drivers you'll be prompted to upgrade to the current version.

IMPORTANT:
It is always recommended to say YES to UPGRADE option,
this way we make sure that the latest WANPIPE driver
sources are in the linux kernel tree.

Would you like update/upgrade wanpipe drivers? (y/n)
</screen>Press <keycap>y</keycap> and enter to continue. You will be prompted
      for pathnames and file locations. Where Linux libraries and modules are
      concerned, the defaults are usually correct (it is normally not
      necessary to change this unless you are deliberately compiling for a
      kernel other than the one you are currently running):</para>

      <para><screen>        ----------------------------------------------------------
                  WAN Router v2.3.4-13 Installation Script
            Copyright (c) 1995-2007, Sangoma Technologies Inc.
        ----------------------------------------------------------


Please specify absolute path name of your linux directory

        (Press Enter for Default: /lib/modules/2.6.18-4-686/build)


Setting linux directory to /lib/modules/2.6.18-4-686/build


Upgrading WANPIPE kernel documentation ...Done.


Upgrading WANPIPE kernel headers ...Done.

Upgrading WANPIPE kernel drivers ...Done.

WANPIPE device drivers upgraded successfully!

Press [Enter] to continue...
</screen>The next step is compiling the kernel modules:</para>

      <para><screen>        ----------------------------------------------------------
                  WAN Router v2.3.4-13 Installation Script
            Copyright (c) 1995-2007, Sangoma Technologies Inc.
        ----------------------------------------------------------

WANPIPE KERNEL DRIVER COMPILATION

The next step in WANPIPE installation involves compiling WANPIPE kernel
modules.  The setup is able to compile all WANPIPE and API drivers.

        Therefore, NO kernel recompilation is necessary :)

Default Compilation:
--------------------
  WANPIPE drivers will include following standard WAN
  protocols:  Frame Relay, CHDLC, PPP, X25 and ADSL
Custom Compilation:
------------------
  Customise WANPIPE driver compilation to add only the
  protocols that you need.  This way one can reduce
  the size of the WANPIPE kernel drivers.

Refer to the WanpipeInstallation.(pdf/txt) documentation.

Proceed to build WANPIPE kernel modules ? (y/n)
</screen>Press <keycap>y</keycap> and enter to continue with the
      installation:</para>

      <para><screen>        ----------------------------------------------------------
                  WAN Router v2.3.4-13 Installation Script
            Copyright (c) 1995-2007, Sangoma Technologies Inc.
        ----------------------------------------------------------


        Please Select Compilation Mode

1. WAN Protocols Support (Default)
       Protocols: Frame Relay, CHDLC, PPP, ATM, X25, ADSL, TDM API

2. TDM Voice (Zaptel) Support Only
       Protocols: TDMV (Zaptel), TDM API on AFT adatpers.

3. TDM Voice (Zaptel) + WAN Protocol Support

4. SMG (SS7) (Default for SMG install)

5. SMG (SS7) + TDM Voice (Zaptel)

6. TDM API (FreeSwitch Default)
       Protocols: TDM API on AFT adapters.

7. Custom Compilation Mode
       Specify protocols to be added into the WANPIPE
       kernel drivers.

Please select (1,2,3,4,5,6 or 7) [Default: 1]:</screen>In almost all cases, it
      is only necessary to select option 2. Option 1 is for data only; option
      3 combines both TDM voice and data protocol support. For the purposes of
      this example, however, we are configuring only TDM voice support.</para>

      <para>Choose option 2. You are prompted for paths to Zaptel:</para>

      <para><screen>Please specify absolute path to Zaptel source directory

[default:/usr/src/zaptel]

&lt;specify path:&gt; Warning: /usr/src/zaptel does not exist
</screen><note>
          <para>If you created the symbolic links as suggested above, you will
          not see the warning message.</para>
        </note>Enter the pathname
      <filename>/usr/src/zaptel-1.4.4</filename>:</para>

      <para><screen>/usr/src/zaptel-1.4.4
Enabling the TDM Voice Asterisk Support


Enable TDMV DCHAN Native HDLC Support &amp; Patch Zaptel ? (y/n)</screen>HDLC
      (High-Level Data Link Control) is a link-layer protocol used here for
      ISDN D-channel communications. Because the Sangoma cards include a
      hardware HDLC controller, you have the option of running that in place
      of the HDLC stack included in Zaptel. Press <keycap>y</keycap> and enter
      to continue:</para>

      <para><screen>   Zaptel DCHAN Patch successful

Recompile/reinstall zaptel (recommended) ? (y/n)                     </screen>Press
      y and enter to continue:</para>

      <para><screen>
   Removing current Zaptel compilation(make clean)...OK
   Recompiling/reinstalling Zaptel(make install)...OK

Checking for UDEV Zaptel compatibility...   UDEV rules not found/or not used
Enabling the AFT TE1 Support

        Supported WAN Protocols:

Press [Enter] to continue...

- API Socket
        Support for X25, HDLC, CHDLC and Frame Relay API
        socket development.

Press [Enter] to continue...

- AFT TE1 Support
        Support for AFT TE1 Cards.
        Protocols: Frame Relay
                   PPP
                   CHDLC
        API:       HDLC (Raw)
                   Transparent Bitstreaming

Press [Enter] to continue...


- TDM Voice Hardware Support for Asterisk PBX Software
        Hardware Support for Asterisk PBX Software over
        S514 T1/E1 Cards.

Press [Enter] to continue...


WARNING: Module installation dir mismatch!
         Linux source name  = 2.6.18
         Current image name = 2.6.18-4-686

  If you are building wanpipe modules for the
  currently running image, use the 2.6.18-4-686
  directory (i.e. select 'y')

Install modules for current image: 2.6.18-4-686 ? (y/n)
</screen>At this point you should press <keycap>y</keycap> and enter, then
      watch the output for errors:</para>

      <para><screen>Installing modules for kernel: 2.6.18-4-686 !


Checking for SMP support ...Enabled.

Checking current processor type ...i686

Wan Update Flags:  -DAF_WANPIPE_2612_FORCE_UPDATE -DWANPIPE_MOD_266_FORCE_UPDATE


--------------------------------------------------
CFLAGS: gcc -Wp,-MD,.wanpipe.o.d -nostdinc -iwithprefix include -D__LINUX__ -Dlinux -D__KERNEL__ -I/lib/modules/2.6.18-4-686/build/include  -DMODULE   -DAF_WANPIPE_2612_FORCE_UPDATE -DWANPIPE_MOD_266_FORCE_UPDATE  -4.1 -m32 -Wall -Wundef -Wstrict-prototypes -Wno-trigraphs -fno-strict-aliasing -fno-common -Os -pipe -msoft-float -mpreferred-stack-boundary=2  -march=i686 -mregparm=3 -ffreestanding -I/lib/modules/2.6.18-4-686/build/include/asm-i386/mach-default -fomit-frame-pointer  -fno-stack-protector -Wdeclaration-after-statement -Wno-pointer-sign -D__KERNEL__ -Iinclude  -include include/linux/autoconf.h
--------------------------------------------------

Checking for REGPARM kernel option ...Enabled.

Compiling General WANPIPE Driver for 2.6.X Kernel .....Done.


WAN HWEC module enabled and compiled!
Linking Wanpipe Driver and protocols ...Done.

Updating Kernel Modules ...Done.

Visually Confirm that driver compilation was successful! (y/n)
</screen></para>

      <para>No errors! We confirm by pressing <keycap>y</keycap> and
      enter.</para>
    </section>

    <section>
      <title>Driver boot scripts and configuration</title>

      <para>Next, the installer configures the WANPIPE drivers to start at
      boot time. For both of the following prompts, press <keycap>y</keycap>
      and enter:</para>

      <para><screen>        ----------------------------------------------------------
                  WAN Router v2.3.4-13 Installation Script
            Copyright (c) 1995-2007, Sangoma Technologies Inc.
        ----------------------------------------------------------


WANPIPE BOOTSTRAP CONFIGURATION

Your system uses System V -style initialization scripts.  You have an option
to add router start-up script to those scripts so that the router will start
automatically when system enters multi-user mode and shut down when it enters
single-user mode or when it is halted.

i.e. By selecting this option WANPIPE will startup on system bootup and
     stop on system shutdown.

Would you like to install WANPIPE start-up scripts? (y/n) y

         WANPIPE Setup for boot startup
Would you like to auto-execute ztcfg after wanrouter start? (y/n) y
Press [Enter] to continue...</screen>The following prompts ask you where you
      want to put the wanpipe configuration files. You should accept the
      defaults unless you have a specific and good reason to choose something
      else, since the defaults follow the Linux FHS (File Hierarchy Standard).
      In other words, unless you know exactly what you are doing and why,
      leave them as is:</para>

      <para><screen>        ----------------------------------------------------------
                  WAN Router v2.3.4-13 Installation Script
            Copyright (c) 1995-2007, Sangoma Technologies Inc.
        ----------------------------------------------------------

WANPIPE META CONFIGURATION

There are two configuration files associated with WANPIPE.

1) /usr/src/wanpipe-2.3.4-13/wanrouter.rc:
        - defines locations of important files such as lock
          and configuration files as well as start/stop
          order of multiple WANPIPE devices.
2) /usr/src/wanpipe-2.3.4-13/wanpipe1.conf:
        - main configuration file for each WANPIPE device.
        - defines interfaces, hardware and protocol information.
        - this file can be created using the 'wancfg' GUI
          utility or manually based on sample files located
          in /etc/wanpipe/samples.

Please read the WanpipeInstallation.(pdf/txt) manual for further
information.

Press [Enter] to continue...

Please specify a desired location for WANPIPE configuration files.

        (Press Enter for Default: /etc/wanpipe)

&lt;specify path:&gt;

Please specify a desired location for WANPIPE interface files.

        (Press Enter for Default: /etc/wanpipe/interfaces)

&lt;specify path:&gt;


Please specify a location for WANPIPE binary, firmware files.

        (Press Enter for Default: /etc/wanpipe/firmware)

&lt;specify path:&gt;</screen></para>

      <para>With the paths specified, we can proceed to install the
      utilities.</para>
    </section>

    <section>
      <title>WANPIPE utilities</title>

      <para><screen>        ----------------------------------------------------------
                  WAN Router v2.3.4-12 Installation Script
            Copyright (c) 1995-2007, Sangoma Technologies Inc.
        ----------------------------------------------------------

WANPIPE UTILITIES SETUP

WANPIPE utilities are used to:
        1) create WANPIPE configuration files.
                (/usr/sbin/wancfg)
        2) create configuration files for Zaptel and Asterisk
                (/usr/sbin/wancfg_zaptel)
        3) start,stop,restart individual/all devices and interfaces.
                (/usr/sbin/wanrouter)
        4) debug line, protocol and driver problems.
                (/usr/sbin/wanpipemon)
        5) configure the optional onboard FT1 CSU/DSU (S508/S5143).
                (/usr/sbin/cfgft1)
        6) aid in WANPIPE API development
                (/etc/wanpipe/api)

Refer to the WanpipeInstallation.(pdf/txt) for more information.

Press [Enter] to continue...</screen></para>

      <para>Press enter after the information page and wait for the utilities
      to build:</para>

      <para><screen>Compiling WANPIPE Utilities ...Done.


Compiling WANPIPE WanCfg Utility ...
Done.


Compiling WANPIPE Misc Utilities ...Done.


Compiling WANPIPE LibSangoma TDM API library ...Done.


Compiling WANPIPE API Development Utilities ...Done.


Compiling WANPIPE HWEC Utilities ...Done.

        WANPIPE Environment Setup Complete !!!

Press [Enter] to continue...</screen></para>

      <para>When the compile is done, press enter and wait while the utilities
      are installed.</para>

      <para><screen>Installing WANPIPE Files ... !
Installing  WANPIPE Utilities in /usr/sbin
Installing wanrouter.rc in /etc/wanpipe
Installing wanpipe libraries in /etc/wanpipe
Installing firmware in /etc/wanpipe/firmware
Installing documentation in /usr/share/doc/wanpipe
Installing sample api code in /etc/wanpipe/api
Installing driver headers in /etc/wanpipe/api/include/linux
Installing Hardware Echo Cancel Utilites
Press [Enter] to continue...</screen>There are ample opportunities to
      interrupt the process :) Press enter again:</para>

      <para><screen>        ----------------------------------------------------------
                  WAN Router v2.3.4-12 Installation Script
            Copyright (c) 1995-2007, Sangoma Technologies Inc.
        ----------------------------------------------------------

WANPIPE INSTALLATON: COMPLETE

WAN Router installation is now complete. WANPIPE kernel drivers
and configuration/debug utilities have been compiled and installed.

        1) Proceed to configure the WANPIPE drivers using the
           /usr/sbin/wancfg GUI configurator.
        2) Use the /usr/sbin/wanrouter startup scrip to start and stop
           the router.
        3) Use /usr/sbin/cfgft1 to configure the (optional) onboard
           CSU/DSU.
        4) The temporary wanpipe directory can now be deleted
        5) To uninstall WANPIPE package run ./Setup remove

Please read WanpipeInstallation.(pdf/txt) manual for further instructions.

IMPORTANT:
---------
HOTPLUG Conflicts with WANPIPE
  The HOTPLUG Service should be disabled because it
  conflicts with Wanpipe interface startup.
  The HOTPLUG can conflict with startup of TDMV drivers.
  Please read the README.faq on how to prevent this.

IMPORTANT:
---------
The Linux Kernel and Modules in /lib/modules/2.6.18-4-686/build:
        DO NOT have to be manually recompiled!

WANPIPE kernel modules are already installed :)</screen></para>

      <para>The WANPIPE installation is now complete. The next step in the
      process configures Zaptel and gets everything ready to work with
      Asterisk.</para>
    </section>

    <section>
      <title>Zaptel configuration</title>

      <para>The final script is the Zaptel configuration script, which prompts
      you for settings for each port on the card. In our example, the card has
      two ports, so we will have to enter configuration information twice. For
      cards with more or fewer ports, the installation process changes
      accordingly.</para>

      <para>We will configure port 1 in the same way as we would if connecting
      it to the PSTN. Port 2 will simulate a PSTN connection for our loopback
      test; as a result, the configuration is a little different.</para>

      <para><screen>

Wanpipe / Zaptel Configuration
==============================

wancfg_zaptel configurator can create all wanpipe devices
for ZAPTEL as well as /etc/zaptel.conf file.
Optionally: wancfg_zaptel can also create Asterisk zapata.conf
-----------------------------------------------------
Would you like to configure wanpipe devices for ZAPTEL? (y/n) y

###################################################################
#    Sangoma Wanpipe:  Zaptel/SMG/TDMAPI Configuration Script     #
#                           v2.4                                  #
#                  Sangoma Technologies Inc.                      #
#                     Copyright(c) 2007.                          #
###################################################################

Would you like to generate /etc/asterisk/zapata.conf
 1. YES
 2. NO
[1-2]:1</screen></para>

      <para>Press <keycap>1</keycap> and enter.</para>

      <para><screen>---------------------------------------------
Configuring T1/E1 cards [A101/A102/A104/A108]
---------------------------------------------
[...]
A102 detected on slot:11 bus:0</screen></para>

      <para>Good news! The card is detected.</para>

      <para><screen>-----------------------------------------------------------
Configuring port 1 on A102 slot:11 bus:0.
-----------------------------------------------------------

Select media type for A102 on port 1 [slot:11 bus:0 span:1]
 1. T1
 2. E1
 3. Unused
 4. Exit
[1-4]:1
</screen>We are configuring a T1. Press <keycap>1</keycap> and enter.</para>

      <para><screen>Select clock for A102 on port 1 [slot:11 bus:0 span:1]
 1. NORMAL
 2. MASTER
[1-2]:1
</screen>In most installations, you will be taking the clock from the PSTN, so
      here we choose 1.</para>

      <para><screen>Select signalling type for 102 on port 1 [slot:11 bus:0 span:1]
 1. PRI CPE
 2. PRI NET
 3. E &amp; M
 4. E &amp; M Wink
 5. FXS - Loop Start
 6. FXS - Ground Start
 7. FXS - Kewl Start
 8. FX0 - Loop Start
 9. FX0 - Ground Start
 10. FX0 - Kewl Start
[1-10]:1
</screen>We are configuring PRI CPE<footnote>
          <para>Customer Premises Equipment.</para>
        </footnote>, so press <keycap>1</keycap> and enter.</para>

      <para><screen>Select switchtype for 102 on port 1
 1. National ISDN 2
 2. Nortel DMS100
 3. AT&amp;T 4ESS
 4. Lucent 5ESS
 5. EuroISDN
 6. Old National ISDN 1
 7. Q.SIG
[1-7]:1</screen>While, in theory, ISDN is a standard, we all know that there
      is usually a gap between the theory and practice. The official standard
      protocol implementation is National ISDN 2, and this will work for most
      installations. Manufacturers have been known to extend specifications
      with their own "enhancements"; if you <emphasis>know</emphasis> that you
      are connecting your equipment to a Nortel DMS100 or Lucent 5ESS, by all
      means, choose those options; however, National ISDN 2 has a good chance
      of working with those switches also.<footnote>
          <para>Sometimes, National ISDN 2 will work better even on a Nortel
          DMS 100. The best option depends on how the switch has been
          programmed, and there's often no way to find out except by trial and
          error.</para>
        </footnote> Option 1 is an appropriate choice.</para>

      <para><screen>Select dialplan context for A102 on port 1
 1. from-pstn
 2. from-internal
 3. Custom
[1-3]:1</screen>The script suggests some names for the dialplan contexts. It
      needs this information for configuring <filename>zapata.conf</filename>.
      Choose 1.</para>

      <para><screen>Port 1 on A102 configuration complete...
Press any key to continue:</screen></para>

      <para>Port 1 is done! Now we configure port 2. We want to simulate the
      PSTN side, so the settings will be different. This is also useful if you
      plan on connecting two PBXs through a private PRI - one side will have
      to play the role of the carrier.</para>

      <para><screen>-----------------------------------------------------------
Configuring port 2 on A102 slot:11 bus:0.
-----------------------------------------------------------

Select media type for A102 on port 2 [slot:11 bus:0 span:2]
 1. T1
 2. E1
 3. Unused
 4. Exit
[1-4, ENTER='T1']:1</screen></para>

      <para>This part is the same as for port 1. It is still a T1.</para>

      <para><screen>Select clock for A102 on port 2 [slot:11 bus:0 span:2]
 1. NORMAL
 2. MASTER
[1-2, ENTER='NORMAL']:2</screen></para>

      <para>The clock settings are different from port 1. We want port 2 to
      generate the clock signal, so we choose option 2, and now the script
      asks us whether that signal is to be generated spontaneously or whether
      it should be taken from another port on the card:</para>

      <para><screen>Clock synchronisation options for 102 on port 2 [slot:11 bus:0 span:2]
 Free run: Use internal oscillator on card [default]
 Port N: Sync with clock from port N

Select clock source 102 on port 2 [slot:11 bus:0 span:2]
 1. Free run
 2. Port 1
[1-2, ENTER='Free run']:1</screen></para>

      <para>In general, when configuring a port as the master, it is okay to
      choose "free run".</para>

      <para><screen>Select signalling type for 102 on port 2 [slot:11 bus:0 span:2]
 1. PRI CPE
 2. PRI NET
 3. E &amp; M
 4. E &amp; M Wink
 5. FXS - Loop Start
 6. FXS - Ground Start
 7. FXS - Kewl Start
 8. FX0 - Loop Start
 9. FX0 - Ground Start
 10. FX0 - Kewl Start
[1-10, ENTER='PRI CPE']:2</screen></para>

      <para>We can recognize this prompt from our configuration of port 1, but
      this time, we choose PRI NET, because this port will be playing the
      network role.</para>

      <para><screen>Select switchtype for 102 on port 2
 1. National ISDN 2
 2. Nortel DMS100
 3. AT&amp;T 4ESS
 4. Lucent 5ESS
 5. EuroISDN
 6. Old National ISDN 1
 7. Q.SIG
[1-7, ENTER='National ISDN 2']:1</screen></para>

      <para>Again, choose option 1 (National ISDN 2). Next:</para>

      <para><screen>Select dialplan context for A102 on port 2
 1. from-pstn
 2. from-internal
 3. Custom
[1-3, ENTER='from-pstn']:2</screen></para>

      <para>This is the final prompt. Choose option 2; our test calls will be
      coming from internal devices over the T1.<footnote>
          <para>It's also simpler for the purposes of demonstration to use the
          defaults.</para>
        </footnote></para>

      <para>Port 2 is done:</para>

      <para><screen>Port 2 on A102 configuration complete...
Press any key to continue:

T1/E1 card configuration complete.
Press any key to continue:</screen>And now the card is ready:</para>

      <para><screen>###################################################################
#                             SUMMARY                             #
###################################################################

  2 T1/E1 port(s) detected, 2 configured
  0 analog card(s) detected, 0 configured

Configurator has created the following files:
        1. Wanpipe config files in /etc/wanpipe
        2. Zaptel config file /etc/zaptel.conf
        3. Zapata config file /etc/asterisk/zapata.conf


Your original configuration files will be saved to:
        1. /etc/zaptel.conf.bak
        2. /etc/asterisk/zapata.conf.bak


Your configuration has been saved in /etc/wanpipe/debug-2007-07-27.tgz.
When requesting support, email this file to techdesk@sangoma.com

Press any key to continue:
</screen></para>

      <para>Save the changes and start everything up:</para>

      <para><screen>Zaptel and Wanpipe configuration complete: choose action
 1. Save cfg: Restart Asterisk &amp; Wanpipe now
 2. Save cfg: Restart Asterisk &amp; Wanpipe when convenient
 3. Save cfg: Stop Asterisk &amp; Wanpipe now
 4. Save cfg: Stop Asterisk &amp; Wanpipe when convenient
 5. Do not save cfg: Exit
[1-5]:1
</screen><note>
          <para>At this point, Asterisk will not do much of anything because
          we haven't yet written a dialplan, but the drivers are built and the
          card is configured.</para>
        </note></para>

      <para>You should see some output similar to this:</para>

      <para><screen>Stopping Asterisk...
Unable to connect to remote asterisk (does /var/run/asterisk.ctl exist?)
Error executing command:
asterisk -rx "stop now"


Stopping Wanpipe...


Unloading Zaptel modules...

Removing old configuration files...

Copying new Wanpipe configuration files...

Copying new Zaptel configuration file (/etc/zaptel.conf)...

Copying new chan_zap configuration files (/etc/asterisk/zapata.conf)...

Starting Wanpipe...

Starting WAN Router...
Loading WAN drivers: wanpipe done.
Starting up device: wanpipe1
--&gt; Loading ec image OCT6116-64S.ima...
Starting up device: wanpipe2
Configuring interfaces: w1g1
done.
Configuring interfaces: w2g1
done.

Loading Zaptel...

Zaptel Version: 1.4.4
Echo Canceller: MG2
Configuration
======================

SPAN 1: ESF/B8ZS Build-out: 0 db (CSU)/0-133 feet (DSX-1)
SPAN 2: ESF/B8ZS Build-out: 0 db (CSU)/0-133 feet (DSX-1)

48 channels configured.


Would you like to execute 'ztcfg' each time wanrouter starts?
 1. YES
 2. NO
[1-2]:1
</screen></para>

      <para>Press 1 and enter; Asterisk starts. If we see it list all the
      channels on the card, the installation was successful:</para>

      <para><screen>
Starting Asterisk...

Listing Asterisk channels...

   Chan Extension  Context         Language   MOH Interpret
 pseudo            from-internal              default
      1            from-pstn                  default
      2            from-pstn                  default
      3            from-pstn                  default
      4            from-pstn                  default
      5            from-pstn                  default
      6            from-pstn                  default
      7            from-pstn                  default
      8            from-pstn                  default
      9            from-pstn                  default
     10            from-pstn                  default
     11            from-pstn                  default
     12            from-pstn                  default
     13            from-pstn                  default
     14            from-pstn                  default
     15            from-pstn                  default
     16            from-pstn                  default
     17            from-pstn                  default
     18            from-pstn                  default
     19            from-pstn                  default
     20            from-pstn                  default
     21            from-pstn                  default
     22            from-pstn                  default
     23            from-pstn                  default
     25            from-internal              default
     26            from-internal              default
     27            from-internal              default
     28            from-internal              default
     29            from-internal              default
     30            from-internal              default
     31            from-internal              default
     32            from-internal              default
     33            from-internal              default
     34            from-internal              default
     35            from-internal              default
     36            from-internal              default
     37            from-internal              default
     38            from-internal              default
     39            from-internal              default
     40            from-internal              default
     41            from-internal              default
     42            from-internal              default
     43            from-internal              default
     44            from-internal              default
     45            from-internal              default
     46            from-internal              default
     47            from-internal              default
[Jul 27 17:31:04] WARNING[22643]: pbx.c:6238 ast_context_verify_includes: Context 'ael-local' tries includes nonexistent context 'ael-parkedcalls'
[Jul 27 17:31:04] WARNING[22643]: pbx.c:6238 ast_context_verify_includes: Context 'ael-dundi-e164-local' tries includes nonexistent context 'ael-dundi-e164-canonical'
[Jul 27 17:31:04] WARNING[22643]: pbx.c:6238 ast_context_verify_includes: Context 'ael-dundi-e164-local' tries includes nonexistent context 'ael-dundi-e164-customers'
[Jul 27 17:31:04] WARNING[22643]: pbx.c:6238 ast_context_verify_includes: Context 'ael-dundi-e164-local' tries includes nonexistent context 'ael-dundi-e164-via-pstn'

Type "asterisk -r" to connect to Asterisk console

debian:/usr/src/wanpipe# </screen></para>

      <para></para>
    </section>
  </section>

  <section>
    <title>Start-up and shutdown scripts</title>

    <para>To make sure that Asterisk starts automatically at boot time and
    shuts down cleanly during shutdown or reboot, we need init scripts.
    Install them from the <filename>/usr/src/asterisk-1.4.2</filename>
    directory with <command>make config</command>:<screen>debian:/usr/src/asterisk-1.4.2# make config
 Adding system startup for /etc/init.d/asterisk ...
   /etc/rc2.d/K91asterisk -&gt; ../init.d/asterisk
   /etc/rc3.d/K91asterisk -&gt; ../init.d/asterisk
   /etc/rc4.d/K91asterisk -&gt; ../init.d/asterisk
   /etc/rc5.d/K91asterisk -&gt; ../init.d/asterisk
   /etc/rc2.d/S10asterisk -&gt; ../init.d/asterisk
   /etc/rc3.d/S10asterisk -&gt; ../init.d/asterisk
   /etc/rc4.d/S10asterisk -&gt; ../init.d/asterisk
   /etc/rc5.d/S10asterisk -&gt; ../init.d/asterisk
debian:/usr/src/asterisk-1.4.2#</screen></para>

    <para>The <filename>ztdummy</filename> kernel module must also start at
    boot time; add it to <filename>/etc/modules</filename> with <command>echo
    "ztdummy" &gt;&gt; /etc/modules</command>:<screen>debian:/usr/src/asterisk-1.4.2# echo "ztdummy" &gt;&gt; /etc/modules
debian:/usr/src/asterisk-1.4.2# </screen></para>
  </section>
</section>