<?xml version="1.0" encoding="UTF-8"?>
<chapter id="kapitel-installation" lang="de" revision="$Revision:473 $">
  <!--% Copyright (c) 2006 - 2007 by
% Stefan Wintermeyer <sw@amooma.de>
% Permission is granted to copy, distribute and/or modify this document
% under the terms of the GNU Free Documentation License, Version 1.2
% or any later version published by the Free Software Foundation;
% with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
% Texts. A copy of the license is included in the section entitled "GNU
% Free Documentation License".
% Asterisk training and consulting is offered at http://www.amooma.de-->

  <title>Installation and "Hello World"</title>

  <section id="installation-einleitung">
    <title id="Einleitung">Introduction</title>

    <para>It is a common prejudice -- not entirely unjustifiable -- among the
    Asterisk-uninitiated that it takes at least two or three days of studying
    web pages and documentation before it's possible to get an Asterisk server
    to do anything at all. For many people interested in Asterisk, this is
    daunting. If you don't like delving into the theoretical underpinnings of
    a complicated piece of software like Asterisk and would rather see
    something practical and working as soon as possible, this chapter is the
    place to start. By following the instructions here you'll have your first
    working Asterisk system up in 30 minutes -- we promise!</para>

    <para>Most programming textbooks begin with a sample program that prints
    <quote>Hello World</quote> on the screen. The purpose is to teach the
    basic form and syntax of the programming language and to give the learning
    programmer the early confidence needed to tackle the more challenging
    tasks to follow. This chapter introducing you to Asterisk is written in
    that spirit.</para>
  </section>

  <section id="minimale-telefonanlage">
    <title id="Eine-Minimal-Telefonanlage">A simple PBX system</title>

    <para>What does the simplest PBX system look like? It needs only two
    telephones and a <quote>black box</quote> connecting them to each other.
    In this case, the <quote>black box</quote> is a conventional PC on which
    we will install Asterisk; the two telephones are what we call
    "softphones", so named because they are implemented entirely in software.
    We'll install those softphones on a PC as well. As such, the requirements
    for the following example are themselves simple: all you need is a typical
    PC where you can install a current Linux distribution.<footnote>
        <para>Our <quote>Hello World</quote> is even more fun if you have more
        than one computer connected by a local area network. You can use one
        computer as the Asterisk server and the others for the
        softphones.</para>
      </footnote></para>

    <section id="min-telefonanlage-aufgabe">
      <title id="Aufgabe">Objectives</title>

      <itemizedlist>
        <listitem>
          <para>Transform a regular PC with a freshly installed Linux
          distribution into a mini-PBX.</para>
        </listitem>

        <listitem>
          <para>Install and configure two VoIP telephones and assign them
          extension numbers 2000 and 2001</para>
        </listitem>

        <listitem>
          <para>Call extension 2001 from 2000 and vice-versa.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section id="min-telefonanlage-voraussetzungen">
      <title id="Voraussetzungen">Requirements</title>

      <para>You will need a reasonably modern PC with sufficient memory.
      Though it's possible to install Asterisk on older hardware, the process
      will take longer and our 30 minute promise won't apply. (Working with
      older hardware can also be frustrating.) As a minimum, you should have a
      500 MHz Pentium-class system with at least 512 MB RAM and at least 20 GB
      of hard disk. Asterisk will run on any current Linux distribution. These
      are available in retail stores, through mail order, or, if you have a
      broadband connection, by downloading them from the Internet.<footnote>
          <para>Here are URLs for a few of the more popular
          distributions:</para>

          <itemizedlist>
            <listitem>
              <simpara>Debian: <ulink
              url="http://www.debian.org"><citetitle>http://www.debian.org</citetitle></ulink></simpara>
            </listitem>

            <listitem>
              <simpara>SuSE Linux (Open SuSE): <ulink
              url="http://www.opensuse.org"><citetitle>http://www.opensuse.org</citetitle></ulink></simpara>
            </listitem>

            <listitem>
              <para>Gentoo: <ulink
              url="???"><citetitle>http://www.gentoo.org</citetitle></ulink></para>
            </listitem>

            <listitem>
              <simpara>Fedora (Redhat): <ulink
              url="http://www.fedora.org"><citetitle>http://www.fedora.org</citetitle></ulink></simpara>
            </listitem>

            <listitem>
              <para>Ubuntu: <ulink
              url="???"><citetitle>http://www.ubuntu.org</citetitle></ulink></para>
            </listitem>
          </itemizedlist>
        </footnote></para>

      <para>Make sure the distribution you use is current.</para>

      <para>The example details below assume you are using a Debian
      Linux<footnote>
          <para>The current Debian <quote>stable</quote>.</para>
        </footnote>distribution. The individual configuration instructions are
      entered on the command line.<footnote>
          <para>You will need to call up a console window (such as xterm or
          konsole) if you are using a window manager.</para>
        </footnote></para>
    </section>

    <section id="welche-version">
      <title>Which Asterisk version?</title>

      <indexterm>
        <primary>Versionsempfehlung</primary>
      </indexterm>

      <para>Asterisk Version 1.4 was released in late 2006 and may be
      considered stable. This book will focus primarily on 1.4; except where
      otherwise noted, commands described here may also be used with Asterisk
      1.2.</para>
    </section>

    <section id="welche-linux-distribution">
      <title>Which Linux distribution is best for Asterisk?</title>

      <para>Any discussion about the most appropriate Linux distribution for
      Asterisk quickly acquires a religious tone. The author chose Debian, but
      we've allowed space for installation instructions specific to other
      distributions in the Appendix because we fundamentally support user
      choice. Unfortunately, later chapters go into considerable technical
      detail and it simply isn't possible to include examples for each of the
      distributions specifically referenced in this book, let alone the myriad
      distributions available. For this reason, unless otherwise noted, assume
      that we are using Debian in the examples.</para>

      <section id="warum-kein-rpm-oder-apt">
        <title>Why don't we use Asterisk packages with apt-get or rpm?</title>

        <indexterm>
          <primary>rpm</primary>
        </indexterm>

        <indexterm>
          <primary>apt-get</primary>
        </indexterm>

        <para>There's a really simple reason for this: currency.</para>

        <para>As of this writing, no Linux distribution has even a half-way
        current version of Asterisk in its stable tree. The Asterisk project
        is extremely active and ever-changing. It just doesn't make sense to
        install a 1.0 version when 1.4 has been in release for over a year and
        is simply better in nearly every respect.</para>

        <note>
          <para>It is true that packages have certain advantages, and they can
          make updating much easier. We hope that package-based installs will
          make more sense in future.</para>
        </note>

        <para>In return for the work of compiling the source packages you'll
        be rewarded with the knowledge that your Asterisk system is the most
        current it can be, and you won't be at the mercy of the package
        maintainers for your specific distribution.</para>
      </section>

      <section id="installation-aus-den-aktuellen-asterisk-sourcen">
        <title>Installing from current Asterisk sources</title>

        <para>You can find Asterisk installation instructions for many of the
        more widely used Linux distributions in the Appendix. Use these
        instructions (see <xref
        linkend="installationsanleitungen-asterisk-1.4" />) to install your
        preferred Linux distribution. In the book, we assume a Debian
        installation (see <xref linkend="installation-1.4-debian-4.0" />).
        Return to the next section when you've finished installing
        Linux.</para>
      </section>
    </section>

    <section id="asterisk-konfigurieren">
      <title id="Server-konfigurieren">Configure the Asterisk server</title>

      <para>You will find all of the Asterisk configuration files for a
      standard install in the <filename>/etc/asterisk</filename>
      directory:</para>

      <screen>debian:/usr/src# cd /etc/asterisk 
debian:/etc/asterisk# ls
adsi.conf           cdr_tds.conf     indications.conf  privacy.conf
adtranvofr.conf     codecs.conf      logger.conf       queues.conf
agents.conf         dnsmgr.conf      manager.conf      res_odbc.conf
alarmreceiver.conf  dundi.conf       meetme.conf       rpt.conf
alsa.conf           enum.conf        mgcp.conf         rtp.conf
asterisk.adsi       extconfig.conf   misdn.conf        sip.conf
asterisk.conf       extensions.ael   modem.conf        sip_notify.conf
cdr.conf            extensions.conf  modules.conf      skinny.conf
cdr_custom.conf     features.conf    musiconhold.conf  telcordia-1.adsi
cdr_manager.conf    festival.conf    osp.conf          voicemail.conf
cdr_odbc.conf       iax.conf         oss.conf          vpb.conf
cdr_pgsql.conf      iaxprov.conf     phone.conf        zapata.conf
debian:/etc/asterisk#</screen>

      <para>Yes, this is a pretty hefty list, but don't let it scare you off.
      For our mini-PBX, we only need to worry about two specific files. First,
      we need to move the files created with <command>make samples</command>
      to <filename>/etc/asterisk/backup/</filename> (so that we might retrieve
      them for later use; it is generally a good practice to copy original
      files to a backup directory when you are making changes):</para>

      <screen>debian:/etc/asterisk# mkdir backup
debian:/etc/asterisk# mv sip.conf backup/
debian:/etc/asterisk# mv extensions.conf backup/
debian:/etc/asterisk# </screen>

      <para>Using your favorite editor<footnote>
          <para>If you haven't yet chosen a favorite editor, we recommend
          <command>nano</command>. In Debian Linux this is installed (as the
          root user) with the command <command>apt-get -y install
          nano</command>. You then edit files by invoking <command>nano
          filename</command>. Nano provides a menu of its most important
          commands at the bottom of the screen.</para>
        </footnote>create a new <filename>/etc/asterisk/sip.conf</filename>
      and enter the following:<footnote>
          <para>The simple passwords depicted here are, of course, only for
          testing and demonstration purposes. For actual production
          installations, you should use much stronger passwords.</para>
        </footnote></para>

      <programlisting>[general]
port = 5060
bindaddr = 0.0.0.0
context = others

[2000]
type=friend
context=my-phones
secret=1234
host=dynamic

[2001]
type=friend
context=my-phones
secret=1234
host=dynamic</programlisting>

      <para>We write a very simple dialplan in
      <filename>/etc/asterisk/extensions.conf</filename>:</para>

      <programlisting>[others]

[my-phones]
exten =&gt; 2000,1,Dial(SIP/2000)
exten =&gt; 2001,1,Dial(SIP/2001)</programlisting>

      <para>Are we serious? These few lines are enough to configure a PBX? The
      conventional wisdom says that Asterisk is unfathomably complex. Let's
      give it a try! Start Asterisk with the shell command <command>asterisk
      -c</command>:</para>

      <screen>debian:/etc/asterisk# asterisk -c
Asterisk 1.4.2, Copyright (C) 1999 - 2005 Digium.
Written by Mark Spencer &lt;markster@digium.com&gt;
=========================================================================
[ Booting...Nov 20 18:59:28 NOTICE[14937]: cdr.c:1185 do_reload: CDR 
simple logging enabled.
.........................................................................
............................................... ]
Asterisk Ready.
*CLI&gt; </screen>

      <para>When Asterisk is started this way we also get a console that lets
      us communicate with the running Asterisk process. What we see now is the
      Asterisk CLI (command line interface) which lets us interactively
      control Asterisk. Our first action will be to stop Asterisk immediately
      with the command <command>stop now</command>:</para>

      <screen>*CLI&gt; stop now
debian:/etc/asterisk#</screen>
    </section>

    <section id="sip-telefon-konfigurieren">
      <title id="sip-telefone-konfigurieren">Configure the SIP phones</title>

      <indexterm>
        <primary>Telefon</primary>

        <secondary>SIP-Telefon konfigurieren</secondary>
      </indexterm>

      <para>Now we must connect two SIP phones to the mini-PBX. If you don't
      have any physical phones, you can use software phones
      (<quote>softphones</quote>) which you can download from the
      Internet.<warning>
          <para>If you intend to use a single test PC for these examples, you
          will have to set the SIP port on the softphone to 5061, since
          Asterisk will already be using the standard SIP port 5060 for its
          own SIP connections!</para>
        </warning><tip>
          <para>Set both the Registrar and Proxy addresses in the SIP phones
          to the IP address of your Asterisk server. Some phones won't accept
          any blank fields, even if the fields aren't needed for your
          situation. Set them to "bla" if necessary. Sadly, there's no hard
          and fast rule here - sometimes a little trial and error is
          unavoidable.</para>
        </tip>For the user configuration on the phone, use the extension
      information we set in <filename>/etc/asterisk/sip.conf</filename>. SIP
      extension 2000 must be configured this way:</para>

      <itemizedlist>
        <listitem>
          <para>User: 2000</para>
        </listitem>

        <listitem>
          <para>Password: 1234</para>
        </listitem>

        <listitem>
          <para>SIP-Registrar: IP address of your Asterisk server</para>
        </listitem>

        <listitem>
          <para>SIP-Proxy: IP address of your Asterisk server</para>
        </listitem>
      </itemizedlist>

      <para>If you don't know the address of your Asterisk server (and
      assuming it has one network card and one IP address) you can find it
      with this command:</para>

      <screen>debian:/etc/asterisk# ifconfig | grep Bcast | sed s/Bcast.*//
          inet addr:23.3.19.73</screen>

      <para>In this case, the IP address is
      <computeroutput>23.3.19.73</computeroutput>.</para>

      <para>Now we start Asterisk again but, this time, with more verbose
      console logging so that we can see what it is doing when we try to place
      a call. We do this by adding the parameters
      <parameter>-vvvvvc</parameter> after the command (the 5 v's mean
      <quote>verbosity level 5</quote>). This will let us see when the SIP
      phone registers with the PBX::</para>

      <screen>debian:/etc/asterisk# asterisk -vvvvvc
[...]
Asterisk Ready.
*CLI&gt;</screen>

      <para>Once you've configured your SIP phones, it's time to register them
      with the server. To be absolutely sure, turn the phone off and then on
      again (or, in the case of a softphone, close and open the application).
      This can require a bit of patience; some SIP phones are rather slow and
      can take up to a few minutes to finish rebooting. If all goes well, we
      should see the phones registering with Asterisk:</para>

      <screen>*CLI&gt;     -- Registered SIP '2000' at 87.143.3.144 port 5060 
expires 120 -- Unregistered SIP '2000'

*CLI&gt;     -- Registered SIP '2001' at 87.143.3.145 port 5060 
expires 120 -- Unregistered SIP '2001'</screen>

      <para>Once the phones are registered, we can make some calls. This part
      is easy - using extension 2000, dial 2001. If you are able to have a
      conversation, you've succeeded! Your first mini-PBX with Asterisk is
      working.<tip>
          <para>If you miss the registration message in all the excitement,
          you can check to see if your phones have registered by entering
          <command>sip show peers</command> in the Asterisk CLI. This will
          give you a list of all the configured and registered SIP phones.
          With <command>sip show peer 2000</command> you will get much more
          detailed information about SIP extension 2000.</para>
        </tip></para>

      <para>You can stop Asterisk at any time by typing <command>stop
      now</command> in the Asterisk CLI.</para>
    </section>

    <section id="min-anlage-ab">
      <title id="anrufbeantworter">An answering machine</title>

      <indexterm>
        <primary>Anrufbeantworter</primary>

        <secondary>Einfaches Beispiel.</secondary>
      </indexterm>

      <para>Asterisk comes complete with a built-in voicemail module but it
      has to be configured in
      <filename>/etc/asterisk/voicemail.conf</filename> before we can use it.
      As a first step (which you should make a routine) we copy the default
      files into our previously created backup directory:</para>

      <screen>debian:/# cd /etc/asterisk
debian:/etc/asterisk# mv voicemail.conf backup/</screen>

      <para>Now we can create a new
      <filename>/etc/asterisk/voicemail.conf</filename> and type the following
      into it:</para>

      <programlisting>[general]
format = wav

[default]
2000 =&gt; 4711,Joe Bloggs,joeb@megacorp.biz
2001 =&gt; 0815,Darlene Doe,dard@megacorp.biz</programlisting>

      <para>We've just configured two default mailboxes (yes, it
      <emphasis>is</emphasis> that simple). We're not quite done yet, though.
      We need to add a few more lines in
      <filename>/etc/asterisk/extensions.conf</filename> to tie these
      mailboxes to our phones and make them accessible. Make sure to add the
      <parameter>",20"</parameter> at the end of the <command>Dial()</command>
      command:</para>

      <programlisting>[others]

[my-phones]
exten =&gt; 2000,1,Dial(SIP/2000,20)
exten =&gt; 2000,2,VoiceMail(2000,u)

exten =&gt; 2001,1,Dial(SIP/2001,20)
exten =&gt; 2001,2,VoiceMail(2001,u)

exten =&gt; 2999,1,VoiceMailMain(${CALLERID(num)},s)</programlisting>

      <para>Done! Now just start Asterisk with <command>asterisk
      -vvvvvc</command><tip>
          <para>In a running Asterisk console, the command
          <command>reload</command> is sufficient.</para>
        </tip>and make a call to the extension 2000. After 20 seconds (the
      reason for the "20" at the end of the <command>Dial()</command>
      command), the call is sent to voicemail. If extension 2000 is busy, the
      call goes directly to voicemail. You can check for messages at extension
      2000 by dialling 2999, which will send you to the voicemail retrieval
      menu.</para>

      <para>For more details on configuring voicemail (such as adding password
      security or a description of the voicemail menu) see <xref
      linkend="kapitel-voicemail" />.</para>
    </section>

    <section id="min-anlage-erklaerung">
      <title id="zusammenfassung">What did we just do?</title>

      <para>With this success under our belts, let's go through the
      configuration files line by line, beginning with
      <filename>/etc/asterisk/sip.conf</filename>. This will help us
      understand what Asterisk is doing and why.</para>

      <programlisting>[general]
port = 5060
bindaddr = 0.0.0.0
context = others</programlisting>

      <para>In the first section, called [general], we set global
      configuration values. The standard port for SIP connections is 5060. The
      <code>bindaddr = 0.0.0.0</code> value tells Asterisk to listen for
      connections on <emphasis>all</emphasis> the IP addresses configured on
      the system. Most systems will have only a single IP address. If you have
      multiple physical or virtual interfaces configured or even multiple
      instances of Asterisk running and you want to decide which IP addresses
      Asterisk will accept connections on, you can specify those addresses
      with the <code>bindaddr</code> value.</para>

      <para>The context value is special and needs a bit more explanation, so
      we'll go into that in more detail elsewhere in the book. As you go
      through the instructions and examples, you'll become more comfortable
      with the idea of <quote>context</quote> as it applies to Asterisk and
      learn how to employ it.</para>

      <programlisting>[2001]
type=friend
context=my-phones
secret=1234
host=dynamic</programlisting>

      <para>The <code>[2001]</code> section defines parameters for the 2001
      SIP extension. We use a number by convention; though most people expect
      extensions to have numbers, SIP extensions can also be defined with an
      alphanumeric identifier -- for example, <code>[Reception-1]</code>. The
      parameter <parameter>type=friend</parameter> simply means that this SIP
      extension can both accept and make calls.<footnote>
          <para>The entry <code>type=</code> has three possible values (we'll
          address these in a later chapter):</para>

          <itemizedlist>
            <listitem>
              <para><code>friend</code>: can make and accept calls.</para>
            </listitem>

            <listitem>
              <para><code>peer</code>: can only make calls.</para>
            </listitem>

            <listitem>
              <para><code>user</code>: can only accept calls.</para>
            </listitem>
          </itemizedlist>
        </footnote></para>

      <para>Again we encounter that ominous value, <code>context</code>. We
      are calling the context <code>my-phones</code> in
      <filename>/etc/asterisk/extensions.conf</filename>; When we look at that
      next, the application of contexts should become clearer.</para>

      <para>The <code>secret</code> value sets a password for the SIP
      extension. We use this to prevent an unauthorized device from
      registering as extension 2001. It's best to use numbers here, since it's
      also easier to enter numbers with most telephone sets. The term
      <code>host=dynamic</code> tells Asterisk that it doesn't matter if the
      IP address of the SIP extension 2001 changes.</para>

      <section id="min-anlage-extensions.conf">
        <title id="extensions.conf">extensions.conf - the Asterisk
        dialplan</title>

        <para>The <filename>/etc/asterisk/extensions.conf</filename> -- known
        as the <quote>dialplan</quote> -- is the heart of every Asterisk
        configuration (see also <xref linkend="kapitel-programmieren" />). In
        a sense, you can equate them with a switchboard used in early
        telephone systems. The dialplan determines which phones can make calls
        to other phones, and how.</para>

        <para>The dialplan is divided into contexts.</para>

        <para><programlisting>[others]</programlisting>The first section of
        the configuration is the context <code>[<code>others]</code></code>.
        As we are not using it in this example, it can be
        empty.<programlisting>[my-phones]
exten =&gt; 2000,1,Dial(SIP/2000,20)
exten =&gt; 2000,2,VoiceMail(2000,u)
</programlisting>Asterisk <emphasis>always</emphasis> uses a context when
        handling a call from one phone to another. The context name is limited
        only by your imagination but must be consistent across configuration
        files. This means that if you refer to a context
        <code>my-phones</code> in <filename>/etc/asterisk/sip.conf</filename>,
        you must use the same name <filename>in the relevant part of
        /etc/asterisk/extensions.conf</filename>! This context is critical to
        the operation of the phone! It determines what extension numbers can
        be dialled and which actions will be allowed.<important>
            <para>The context of the phone you are calling
            <emphasis>to</emphasis> is irrelevant here. Understanding this
            distinction is vital for successful configuration.</para>
          </important></para>

        <para>The syntax of a dialplan entry always follows this
        convention:<programlisting>exten =&gt; Number,Priority,Application</programlisting></para>

        <para>When a number is dialled, Asterisk checks to see if it matches a
        dialplan entry. If a match is found, that entry is read and executed.
        If there is more than one applicable entry for a dialled number,
        Asterisk will execute the entry with the priority <code>1</code>
        first. The third parameter ("<code>Application</code>") defines what
        Asterisk actually does with the call.</para>

        <para>Based on our sample configuration (see above), this is what
        happens when we make a call from extension 2001 to extension
        2000:</para>

        <itemizedlist>
          <listitem>
            <para>Asterisk looks up the context for the
            <emphasis>calling</emphasis> extension (2001) in
            <filename>/etc/asterisk/sip.conf</filename>. In our example, this
            context is <code>[my-phones]</code>. Asterisk uses this context to
            decide which set of entries in<filename>
            /etc/asterisk/extensions.conf</filename> it should use.</para>
          </listitem>

          <listitem>
            <para>Having found the context <code>[my-phones]</code> in
            <filename>/etc/asterisk/extensions.conf</filename>, Asterisk
            executes the entries matching the dialled number, 2000, in order
            of priority. Our example has two matching lines.</para>
          </listitem>

          <listitem>
            <para>The matching entry with the priority <code>1</code> is
            executed first, no matter the physical order of the entries. Here,
            the entry with priority <code>1</code> has the command
            <code><command>Dial(SIP/2000,20)</command></code>. The
            <command><application>Dial()</application></command><application>
            application is run with the parameters given; it looks for the
            entry for 2000 in
            </application><filename>/etc/asterisk/sip.conf</filename> and
            rings it for 20 seconds (hence the "<code>,20</code>" after
            <code>SIP/2000</code>).</para>
          </listitem>

          <listitem>
            <para>If the SIP extension 2000 is not answered within 20 seconds,
            <command>Dial()</command> completes and the priority is increased
            by 1.</para>
          </listitem>

          <listitem>
            <para>The matching entry with the next priority -- <code>exten
            =&gt; 2000,2,VoiceMail(2000,u)</code> -- is now executed. Asterisk
            runs the <command>VoiceMail()</command> application with the
            parameters <code><code>"2000"</code></code> and <code>"u"</code>.
            The <code>"2000"</code> is for the mailbox number as configured in
            <filename>/etc/asterisk/voicemail.conf</filename>; the
            "<code>u</code>" tells Asterisk to use the standard "unavailable"
            message. By now you've probably figured out that we picked a
            number for simplicity's sake; we could just as easily have used
            <code>5555</code> or <code>joebloggs</code>.</para>
          </listitem>
        </itemizedlist>

        <para>Of course, voicemail is no good unless you can retrieve messages
        others have left for you. We enable access with this
        entry:<programlisting>exten =&gt; 2999,1,VoiceMailMain(${CALLERID(num)},s)</programlisting></para>

        <para>Ah -- our first exposure to a dialplan function in Asterisk! We
        call the application <command>VoiceMailMain()</command> with the
        function <parameter><code>${CALLERID(num)}</code></parameter> as a
        parameter. The <parameter><code>${CALLERID(num)}</code></parameter>
        function returns the number of the calling party. In this way,
        <command>VoiceMailMain()</command> always knows to retrieve messages
        for the phone from which it was called. If the parameter is not
        supplied, it will ask the caller for the mailbox number. The
        "<code>,s</code>" parameter tells <command>VoiceMailMain()</command>
        not to ask the caller for a password.</para>
      </section>

      <section id="min-anlage-voicemail.conf">
        <title id="voicemail.conf">voicemail.conf - The voicemail
        system</title>

        <para>The voicemail module (see also <xref
        linkend="kapitel-voicemail" />) is configured in
        <filename>/etc/asterisk/voicemail.conf</filename> in much the same way
        as the dialplan
        (<filename>/etc/asterisk/extensions.conf</filename>):</para>

        <programlisting>[general]
format = wav

[default]
2000 =&gt; 4711,Joe Bloggs,joeb@megacorp.biz
2001 =&gt; 0815,Darlene Doe,dard@megacorp.biz</programlisting>

        <para>The <code>[general]</code> section is where define global
        parameters, such as the file format used for saving the voice
        messages, are defined. Actual mailboxes are defined in a context
        called <code>[default]</code>; here you see the lines defining the
        mailboxes for extension <code>2000</code> and <code>2001</code>,
        complete with passwords (<code>4711</code> and <code>0815</code>).
        After the password, there is a field for the name of the mailbox owner
        and that person's e-mail address. Messages are attached as WAV-format
        files to an e-mail and sent to the intended recipient..</para>
      </section>
    </section>

    <section id="min-anlage-festnetz">
      <title id="festnetz-outgoing">Calling the public telephone
      network</title>

      <para>Right now, you're probably thinking that it's nice that we have a
      working telephone system but, what good is it if you can't make calls to
      the big wide world? With your permission, an additional 10 minutes of
      your time, and an Internet connection, we will solve that problem too.
      You will need an account with a SIP telephony provider.</para>

      <para>Jetzt konfigurieren wir Asterisk so, dass Sie mit den Telefonen
      2000 und 2001 ins deutsche Festnetz telefonieren können. Als Erstes muss
      der Provider-Account in der <filename>/etc/asterisk/sip.conf</filename>
      eingetragen werden:</para>

      <programlisting>[general]
port = 5060
bindaddr = 0.0.0.0
context = others

register =&gt; 5587572:UHDZJD@mein-voip-provider.de/5587572
;              ^       ^       ^                    ^
;              |       |       |                    |
;             User Passwort  Provider              User

[2000]
type=friend
context=my-phones
secret=1234
host=dynamic

[2001]
type=friend
context=my-phones
secret=1234
host=dynamic

[ext-sip-account]
type=friend
context=von-voip-provider
username=5587572
fromuser=5587572
secret=UHDZJD
host=mein-voip-provider.de
fromdomain=mein-voip-provider.de
qualify=yes
insecure=very
nat=yes</programlisting>

      <para>Den Usernamen (im Beispiel <parameter>5587572</parameter>) und Ihr
      Passwort (im Beispiel <parameter>UHDZJD</parameter>) können Sie der
      SIP-Provider-Webseite entnehmen. Damit kann Asterisk diesen Account
      benutzen. Allerdings müssen wir jetzt noch in der
      <filename>/etc/asterisk/extensions.conf</filename> eine Regel zum
      Rauswählen einfügen:</para>

      <programlisting>[others]

[my-phones]
exten =&gt; 2000,1,Dial(SIP/2000,20)
exten =&gt; 2000,2,VoiceMail(2000,u)

exten =&gt; 2001,1,Dial(SIP/2001,20)
exten =&gt; 2001,2,VoiceMail(2001,u)

exten =&gt; 2999,1,VoiceMailMain(${CALLERID(num)},s)

exten =&gt; _0[1-9].,1,Dial(SIP/${EXTEN}@ext-sip-account)</programlisting>

      <para>Nachdem die Einträge in den Konfigurationsdateien erstellt sind,
      starten Sie Asterisk, wie bekannt, mit <command>asterisk
      -vvvvvc</command> in das CLI und warten ein paar Sekunden, bis sich
      eines der SIP-Telefone angemeldet hat. Danach einfach eine beliebige
      Nummer im deutschen Festnetz (mit Vorwahl) wählen und warten (im CLI
      können Sie beobachten, was passiert). Nach kurzer Zeit hören Sie auch
      schon das Freizeichen und können mit einem Festnetz-Teilnehmer
      telefonieren. Wie die obige Konfiguration genau funktioniert, wird an
      dieser Stelle noch nicht verraten.<footnote>
          <para>Nur so viel an dieser Stelle: Die Variable
          <code>${EXTEN}</code> enthält die vom Benutzer gewählte Nummer
          (siehe <xref linkend="kapitel-programmieren" />).</para>
        </footnote></para>
    </section>

    <section id="festnetz-incoming">
      <title>Gespräche vom öffentlichen Netz entgegennehmen</title>

      <para>Der letzte Schritt ist ein kleiner. Wir wollen über unsere
      Rufnummer beim VoIP-Provider auf dem Telefon mit der Nummer
      <parameter>2000</parameter> angerufen werden können. Dazu müssen wir nur
      noch einen weiteren Context in die Konfigurationsdatei
      <filename>/etc/asterisk/extensions.conf</filename>
      hinzufügen:<programlisting>[others]

[my-phones]
exten =&gt; 2000,1,Dial(SIP/2000,20)
exten =&gt; 2000,2,VoiceMail(2000,u)

exten =&gt; 2001,1,Dial(SIP/2001,20)
exten =&gt; 2001,2,VoiceMail(2001,u)

exten =&gt; 2999,1,VoiceMailMain(${CALLERID(num)},s)

exten =&gt; _0[1-9].,1,Dial(SIP/${EXTEN}@ext-sip-account)

[von-voip-provider]
exten =&gt; 5587572,1,Dial(SIP/2000)</programlisting></para>

      <para>Fertig! :-)</para>

      <para>Die <parameter>5587572</parameter> ist Ihre interne Rufnummer bei
      Ihrem VoIP-Provider. Bitte schauen Sie auf der Webseite des Providers in
      Ihren Kundendaten diese Nummer nach. Dass die Rufnummer hier dieselbe
      ist wie der Username, ist prinzipiell Zufall.</para>

      <para>Wer will kann natürlich ganz einfach mit der folgenden Variante
      noch eine Voicemailbox für Gespräche die vom SIP-Provider kommen
      aktivieren:<programlisting>[others]

[my-phones]
exten =&gt; 2000,1,Dial(SIP/2000,20)
exten =&gt; 2000,2,VoiceMail(2000,u)

exten =&gt; 2001,1,Dial(SIP/2001,20)
exten =&gt; 2001,2,VoiceMail(2001,u)

exten =&gt; 2999,1,VoiceMailMain(${CALLERID(num)},s)

exten =&gt; _0[1-9].,1,Dial(SIP/${EXTEN}@ext-sip-account)

[von-voip-provider]
exten =&gt; 5587572,1,Dial(SIP/2000,20)
exten =&gt; 5587572,2,VoiceMail(2000,u)</programlisting></para>

      <para>In diesem Einführungs-Kapitel wollte ich Ihnen zeigen, wie schnell
      und einfach man mit Asterisk eine funktionierende Telefonanlage aufbauen
      kann. Im verbleibenden Teil des Buches gehen wir tiefer in die Details
      und ich zeige Ihnen, was man mit Asterisk alles machen kann.</para>
    </section>
  </section>
</chapter>