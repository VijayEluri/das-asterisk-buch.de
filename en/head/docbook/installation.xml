<?xml version="1.0" encoding="ISO-8859-1"?>
<chapter id="kapitel-installation" lang="de" revision="$Revision:473 $">
  <!--% Copyright (c) 2006 - 2008 by
% Stefan Wintermeyer <sw@amooma.de>
% Permission is granted to copy, distribute and/or modify this document
% under the terms of the GNU Free Documentation License, Version 1.2
% or any later version published by the Free Software Foundation;
% with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
% Texts. A copy of the license is included in the section entitled "GNU
% Free Documentation License".-->

  <!--% translated from the German by Stephen Bosch <sbosch@vodacomm.ca>-->

  <!--% Asterisk training and consulting is offered at http://www.amooma.de-->

  <title>Installation and "Hello World"</title>

  <section id="installation-einleitung">
    <title id="Einleitung">Introduction</title>

    <para>It is a common prejudice &#8211; not entirely unjustifiable &#8211;
    among the Asterisk-uninitiated that it takes at least two or three days of
    studying web pages and documentation before it's possible to get an
    Asterisk server to do anything at all. For many people interested in
    Asterisk, this is daunting. If you don't like delving into the theoretical
    underpinnings of a complicated piece of software like Asterisk and would
    rather see something practical and working as soon as possible, this
    chapter is the place to start. In contrast to the rest of the book, this
    chapter should be read, and the examples followed, in sequence.<important>
        <para>The subject of this book is Asterisk, and not Linux; we are
        assuming that you have basic Linux administration skills. You should
        understand how to use a text editor and how to configure a network
        adapter. Commands are to be executed as the superuser
        <emphasis>root</emphasis> unless otherwise noted.</para>
      </important></para>

    <section id="Asterisk-1.4-oder-1.6">
      <title>Asterisk 1.4 or 1.6?</title>

      <para>For the purposes of this introduction, it doesn't matter. All the
      basics described here apply to both versions. For production
      installations, the more stable version is recommended, so these examples
      feature Asterisk 1.4. If you are reading this in 2010 or even later,
      feel free to install Asterisk 1.6.</para>
    </section>
  </section>

  <section id="Asterisk-auf-dem-Server-installieren">
    <title>Installing Asterisk on the server</title>

    <para>On choosing a Linux distribution or an Asterisk version, opinions
    (as is so often the case in the open source world) diverge. Some stick
    with distribution-specific packages (e.g. .rpm or .deb) and others compile
    Asterisk from source. For the examples in this chapter, either approach
    should be okay, but not so for the rest of the book. If you're not sure,
    install from sources. The reason is simple: the versions found in
    distribution packages are almost never current..<footnote>
        <para>You can't really blame the distributors for this. New versions
        of Asterisk come out almost every month. No distributor on Earth could
        match that pace.</para>
      </footnote>Refer to the Appendix <xref
    linkend="installationsanleitungen-asterisk-1.4" />, and install Asterisk
    1.4.x on a fresh install of <link
    linkend="installation-1.4-debian-4.0">Debian Linux</link> or even <link
    linkend="installation-1.4-knoppix-5.1">Knoppix</link>. For the purposes of
    practice, you might consider doing this in an x86 virtual machine
    (<emphasis>e.g.</emphasis> <ulink
    url="http://www.vmware.com/">VMware</ulink>). In either case, be it a
    physical server or a virtual machine, the system should have sound card
    and an output device (<emphasis>e.g.</emphasis> speakers).<warning>
        <para>Should you decide to try the install with a different
        distribution or with a different installation method and run into
        problems, try following the method described here first. It is often
        easier to work with a tested installation recipe than it would be to
        find the errors in a configuration or environment not covered
        here.</para>
      </warning></para>
  </section>

  <section id="hello-world-im-cli">
    <title id="Eine-Minimal-Telefonanlage">Calling "Hello World" from
    CLI</title>

    <para>In this first example, we will create a simple "Hello World"
    dialplan and call it from the Asterisk console, or CLI (Command Line
    Interface).</para>

    <section>
      <title>Configure Asterisk</title>

      <para>After a standard install you should find these files in the
      <filename>/etc/asterisk/</filename> directory:</para>

      <screen>debian:/usr/src# cd /etc/asterisk 
debian:/etc/asterisk# ls
adsi.conf           cdr_tds.conf     indications.conf  privacy.conf
adtranvofr.conf     codecs.conf      logger.conf       queues.conf
agents.conf         dnsmgr.conf      manager.conf      res_odbc.conf
alarmreceiver.conf  dundi.conf       meetme.conf       rpt.conf
alsa.conf           enum.conf        mgcp.conf         rtp.conf
asterisk.adsi       extconfig.conf   misdn.conf        sip.conf
asterisk.conf       extensions.ael   modem.conf        sip_notify.conf
cdr.conf            extensions.conf  modules.conf      skinny.conf
cdr_custom.conf     features.conf    musiconhold.conf  telcordia-1.adsi
cdr_manager.conf    festival.conf    osp.conf          voicemail.conf
cdr_odbc.conf       iax.conf         oss.conf          vpb.conf
cdr_pgsql.conf      iaxprov.conf     phone.conf        zapata.conf
debian:/etc/asterisk#</screen>

      <para>That's a long list, but no fear &#8211; we only care about one of
      them &#8211; <filename>extensions.conf</filename> &#8211; for our "Hello
      World" example. To keep things simple we'll move the sample
      <filename>extensions.conf</filename> file created by <command>make
      samples</command> to <filename>/var/tmp/asterisk-etc-backup/</filename>
      (so that we can retrieve it later if required):</para>

      <screen>debian:/etc/asterisk# mkdir -p /var/tmp/asterisk-etc-backup
debian:/etc/asterisk# mv extensions.* /var/tmp/asterisk-etc-backup/
debian:/etc/asterisk# </screen>

      <para>Using your favorite console text editor<footnote>
          <para>If you don't have one, I recommend <command>nano</command>.
          Installing it in Debian is easy as superuser with <command>apt-get
          -y install nano</command>. Open the file you want to edit with
          <command>nano &lt;filename</command>&gt;. The most important
          commands are displayed in the bottom portion of the screen.</para>
        </footnote>enter the following text into
      <filename>/etc/asterisk/extensions.conf</filename>:</para>

      <programlisting>[default]
exten =&gt; 1001,1,Answer()
exten =&gt; 1001,2,Playback(hello-world)
exten =&gt; 1001,3,Hangup()
</programlisting>
    </section>

    <section id="asterisk-konfigurieren">
      <title id="Server-konfigurieren">Start Asterisk and call "Hello
      World"</title>

      <para>These four lines are enough? I thought Asterisk was supposed to be
      complicated. Let's try it! Start Asterisk with the command
      <command>asterisk -c</command> (the <command>-c</command> switch gives
      us the console):</para>

      <screen>debian:/etc/asterisk# asterisk -c
Asterisk 1.4.2, Copyright (C) 1999 - 2005 Digium.
Written by Mark Spencer &lt;markster@digium.com&gt;
=========================================================================
[ Booting...Nov 20 18:59:28 NOTICE[14937]: cdr.c:1185 do_reload: CDR 
simple logging enabled.
.........................................................................
............................................... ]
Asterisk Ready.
*CLI&gt; </screen>

      <para>With this console, you can operate a running Asterisk server and
      give it commands interactively and in real-time. Let's try generating a
      call to our "Hello World" extension with <command>console dial
      1001</command>:<screen>*CLI&gt; console dial 1001
*CLI&gt;  &lt;&lt; Console call has been answered &gt;&gt; 
 &lt;&lt; Hangup on console &gt;&gt; 

*CLI&gt;</screen></para>

      <para>The command <command>console dial 1001</command> calls extension
      1001. This extension answers and plays the
      <filename>hello-world.gsm</filename> sound file from the
      <filename>/var/lib/asterisk/sounds/</filename> directory.<note>
          <para><command>console dial</command> behaves like a very simple
          telephone. You can use it call an extension and listen to it via the
          sound card.</para>
        </note></para>

      <section>
        <title>What is an extension?</title>

        <para>An extension is a programming unit in a dialplan. Every
        extension consists of at least one line, written in the
        format:<programlisting>exten =&gt; extension_name,priority,application</programlisting></para>

        <para>Here, priority describes the sequence of the individual
        extension elements. Our extension 1001 has three
        priorities:<programlisting>exten =&gt; 1001,1,Answer()
exten =&gt; 1001,2,Playback(hello-world)
exten =&gt; 1001,3,Hangup()
</programlisting></para>

        <para>The applications are self-explanatory:<itemizedlist>
            <listitem>
              <para><command>Answer()</command></para>

              <para>Answers and opens a new Asterisk channel (see <link
              linkend="applikationen-answer">Hilfetext zu
              Answer()</link>).</para>
            </listitem>

            <listitem>
              <para><command>Playback(hello-world)</command></para>

              <para>Plays the file <filename>hello-world.gsm</filename> in the
              current channel (see <link
              linkend="applikationen-playback">Hilfetext zu
              Playback()</link>).</para>
            </listitem>

            <listitem>
              <para><command>Hangup()</command></para>

              <para>Hangs up and closes the channel (see <link
              linkend="applikationen-hangup">Hilfetext zu
              Hangup()</link>).</para>
            </listitem>
          </itemizedlist></para>
      </section>

      <section>
        <title>Increasing verbosity</title>

        <para>When debugging Asterisk it is often helpful to increase the
        verbosity of the console messages. When Asterisk is started with
        <command>asterisk -c</command>, the verbose level is set to 0 (the
        allowed range is 0 to 10). You can increase this to level 5 from the
        console with the command <command>core set verbose 5</command>, which
        is a good level to use for debugging:<screen>*CLI&gt; core set verbose 5
Verbosity was 0 and is now 5
*CLI&gt;</screen></para>

        <para>Now, when you enter the command <command>console dial
        1001</command>, you see details about the dialplan execution:<screen>*CLI&gt; console dial 1001
  == Console is full duplex
*CLI&gt;     -- Executing [1001@default:1] Answer("Console/dsp", "") in new stack
 &lt;&lt; Console call has been answered &gt;&gt; 
    -- Executing [1001@default:2] Playback("Console/dsp", "hello-world") in new stack
    -- &lt;Console/dsp&gt; Playing 'hello-world' (language 'en')
*CLI&gt;     -- Executing [1001@default:3] Hangup("Console/dsp", "") in new stack
  == Spawn extension (default, 1001, 3) exited non-zero on 'Console/dsp'
 &lt;&lt; Hangup on console &gt;&gt; 

*CLI&gt;</screen></para>

        <para>You can also set the verbose level to 5 at start time with the
        switch <command>-vvvvv</command> (five v's).<warning>
            <para>Don't use <command>core set debug</command> to debug the
            dialplan! This is intended for developers doing Asterisk
            debugging. Not very helpful for dialplan debugging,
            however.</para>
          </warning></para>
      </section>

      <section>
        <title>Stop Asterisk</title>

        <para>Enter <command>stop now</command>, and Asterisk stops:<screen>*CLI&gt; stop now
debian:/etc/asterisk#</screen></para>
      </section>
    </section>
  </section>

  <section id="hello-world-mit-einem-sip-telefon">
    <title id="sip-telefone-konfigurieren">"Hello World" with a SIP
    telephone</title>

    <indexterm>
      <primary>Telefon</primary>

      <secondary>SIP-Telefon konfigurieren</secondary>
    </indexterm>

    <para>Having tested our extension 1001 from the console, we take the next
    logical step and try the call from a SIP telephone. If you don't have a
    hardware SIP phone, you can use a software SIP phone that you install on a
    client computer. Many of these are freely available on the
    Internet.<warning>
        <para>If you want to install the software SIP phone and Asterisk on
        the same machine, you will have to set a custom port number for the
        SIP phone (e.g. 5061) since 5060 is already being used by Asterisk.
        Beginners, however, should start with a hardware SIP phone if at all
        possible. When starting out, minimize the potential for problems by
        not building unnecessary complexity into your test
        installation.</para>
      </warning></para>

    <section>
      <title>sip.conf and configuration of the SIP phone</title>

      <para>Before you can use a SIP phone with Asterisk, you need to create
      an account for it in your Asterisk configuration. We will move the
      sample sip.conf file to our backup directory
      <filename>/var/tmp/asterisk-etc-backup/</filename> in the same way we
      previously moved the <filename>extensions.conf</filename> with the
      command <command>mv sip.conf
      /var/tmp/asterisk-etc-backup/</command>:<screen>debian:/etc/asterisk# mv sip.conf /var/tmp/asterisk-etc-backup/
debian:/etc/asterisk# </screen>Now we create a new
      <filename>/etc/asterisk/sip.conf</filename> and enter the
      following:<programlisting>[general] 
port=5060 
bindaddr=0.0.0.0 

[2000] 
type=friend 
secret=1234 
host=dynamic</programlisting></para>

      <para>Your SIP telephone must now be configured with the following
      account information:<itemizedlist>
          <listitem>
            <para>User: 2000</para>
          </listitem>

          <listitem>
            <para>Password: 1234</para>
          </listitem>

          <listitem>
            <para>SIP Registrar: IP address of your Asterisk server</para>
          </listitem>

          <listitem>
            <para>SIP-Proxy: IP address of your Asterisk server</para>
          </listitem>
        </itemizedlist></para>

      <para><tip>
          <para>Some phones require that every field contain information, even
          if it is not relevant. Unfortunately there are no general
          instructions that will apply to all phones. Experiment!</para>
        </tip></para>
    </section>

    <section>
      <title>Start Asterisk and the phone</title>

      <para>Now we start Asterisk in verbose level 5 with <command>asterisk
      -vvvvvc</command>:<screen>debian:/etc/asterisk# asterisk -vvvvvc 
Asterisk 1.4.10, Copyright (C) 1999 - 2006 Digium. 
Written by Mark Spencer &lt;markster@digium.com&gt; 
=========================================================================  
...
</screen></para>

      <para>Next, we start the SIP phone and wait for the registration message
      in the Asterisk console:<screen>*CLI&gt; -- Registered SIP '2000' at 47.6.3.4 port 5060 
expires 120 -- Unregistered SIP '2000' </screen></para>
    </section>

    <section>
      <title>The test</title>

      <para>When you call extension 1001 from the SIP phone, you will hear the
      <filename>hello-world.gsm</filename> file played back to you.</para>
    </section>

    <section>
      <title>Calling the phone from the Asterisk console</title>

      <para>Since we can call an extension with <command>console
      dial</command> and we have successfully attached a SIP phone to the
      system, it should be possible to call that SIP phone from the console.
      To do this we need to add an extension to
      <filename>/etc/asterisk/extensions.conf</filename>:<programlisting>[default] 
exten =&gt; 1001,1,Answer()
exten =&gt; 1001,2,Playback(hello-world)
exten =&gt; 1001,3,Hangup()

exten =&gt; 2000,1,Dial(SIP/2000)</programlisting></para>

      <para>To apply these changes you must either restart Asterisk or reload
      the dialplan. To restart Asterisk, enter <command>stop now</command> in
      the Asterisk console and <command>asterisk -vvvvvc</command> in the
      Linux shell. To reload the dialplan from within the running Asterisk,
      enter <command>dialplan reload</command> in the Asterisk console. Now
      you can dial the SIP phone with <command>console dial
      2000</command>:<screen>*CLI&gt; console dial 2000</screen></para>
    </section>

    <section>
      <title>Analysis</title>

      <para>The dialplan application <command>Dial()</command> sets up a
      connection to a telephone. It uses a parameter consisting of two parts:
      the first, "SIP", describes the technology used for establishing the
      connection, the SIP VoIP protocol in our example. The second part
      defines the target device using that technology (in this case, 2000).
      When using <command>Dial()</command>, no <command>Answer()</command> or
      <command>Hangup()</command> is required. Since we do not know in advance
      if the called station will even accept the call,
      <command>Dial()</command> has additional intelligence for opening and
      closing the channel.</para>

      <para>In our example, the extension 2000 corresponds with the SIP target
      2000, but this is, strictly speaking, coincidental. You could also write
      the extension like this:<programlisting>exten =&gt; 55,1,Dial(SIP/2000)</programlisting></para>

      <para>Reload the dialplan and now you can call the same SIP telephone
      with <command>console dial 55</command>.</para>
    </section>

    <section>
      <title>Comments in the configuration</title>

      <para>Because the number sign "#" corresponds to a <link
      linkend="glossar-dtmf">DTMF</link> tone, it cannot be used as comment
      character. Instead, Asterisk configuration files use the semi-colon ";"
      for indicating comments. For example:<programlisting>[default] 
; Extension 1001 is used for testing
; of all phones.
;
exten =&gt; 1001,1,Answer()  ; abgehoben
exten =&gt; 1001,2,Playback(hello-world)
exten =&gt; 1001,3,Hangup()  ; aufgelegt

; Extension 2000 calls SIP telephone
; 2000.
;
exten =&gt; 2000,1,Dial(SIP/2000)</programlisting></para>
    </section>
  </section>

  <section id="minimale-telefonanlage">
    <title>A minimal phone system with two SIP phones</title>

    <para>What does the simplest possible working Asterisk system look like?
    Two phones and one Asterisk server.</para>

    <para>We've already worked with all the individual pieces of this puzzle
    and now we simply have to put them together. To start, we configure two
    SIP phones in <filename>/etc/asterisk/sip.conf</filename>:<programlisting>[general] 
port=5060 
bindaddr=0.0.0.0 

[2000] 
type=friend 
secret=1234 
host=dynamic

[2001] 
type=friend 
secret=1234 
host=dynamic</programlisting></para>

    <para>Next, we have to make extensions that call the SIP phones in
    <filename>/etc/asterisk/extensions.conf</filename>. We will leave the
    "Hello World" example in place for testing purposes; we can verify that
    each of our phones are working by dialing 1001 and listening for the
    "Hello World" message. The resulting dialplan looks like
    this:<programlisting>[default] 
exten =&gt; 1001,1,Answer()
exten =&gt; 1001,2,Playback(hello-world)
exten =&gt; 1001,3,Hangup()

exten =&gt; 2000,1,Dial(SIP/2000)
exten =&gt; 2001,1,Dial(SIP/2001)</programlisting></para>

    <para>Restart Asterisk and the phones (which you configure following the
    instructions in the previous section). Once the phones have registered,
    you can all one phone from the other, or the test extension from both
    phones.</para>

    <section id="min-anlage-ab">
      <title id="anrufbeantworter">Now, an answering machine</title>

      <indexterm>
        <primary>Anrufbeantworter</primary>

        <secondary>Einfaches Beispiel.</secondary>
      </indexterm>

      <para>Asterisk already includes a working voicemail module. We need only
      configure it for use via the
      <filename>/etc/asterisk/voicemail.conf</filename> file. First, we move
      the existing sample file to our sample backup directory:</para>

      <screen>debian:/etc/asterisk# mv voicemail.conf /var/tmp/asterisk-etc-backup/</screen>

      <para>Now we create a new
      <filename>/etc/asterisk/voicemail.conf</filename> file and enter the
      following:</para>

      <programlisting>[general]
format = wav

[default]
2000 =&gt; 4711,Joe Bloggs,jbloggs@example.com
2001 =&gt; 0815,Daisy Duke,daisy.duke@hazzard.com</programlisting>

      <para>Now the mailboxes are configured (yes, it really is that easy).
      The final step is to add a few more lines to
      <filename>/etc/asterisk/extensions.conf</filename> to attach this
      voicemail functionality to our telephones. Don't forget to add the
      <parameter>",20"</parameter> to <command>Dial()</command>.</para>

      <programlisting>[default] 
exten =&gt; 1001,1,Answer()
exten =&gt; 1001,2,Playback(hello-world)
exten =&gt; 1001,3,Hangup()

exten =&gt; 2000,1,Dial(SIP/2000,20)
exten =&gt; 2000,2,VoiceMail(2000,u)

exten =&gt; 2001,1,Dial(SIP/2001,20)
exten =&gt; 2001,2,VoiceMail(2001,u)

exten =&gt; 2999,1,VoiceMailMain(${CALLERID(num)},s)</programlisting>

      <para>Done! Start Asterisk with <command>asterisk -vvvvvc</command><tip>
          <para>In a running Asterisk, <command>reload</command> is
          sufficient.</para>
        </tip> and call one phone from the other. After 20 seconds of ringing
      (the reason for the ",20" in <command>Dial()</command> ) you are
      transferred to the voice mailbox. If the called station is busy, the
      call goes directly to the voice mailbox. Dial 2999 from any phone and
      you can access the voicemail menu for that phone.<note>
          <para>If your Asterisk server has a working Mail Transfer Agent
          (MTA) (<emphasis>e.g.</emphasis> sendmail or postfix), new
          voicemails are sent as e-mail attachments directly to the e-mail
          addresses specified in <filename>voicemail.conf</filename>.</para>
        </note></para>

      <para>If you want to secure your mailboxes with passwords, or would like
      to review the voice mail menus, see <xref
      linkend="kapitel-voicemail" />.</para>
    </section>
  </section>

  <section id="rechteverwaltung-mit-contexten">
    <title>Rights administration with contexts</title>

    <para>So far we have been able to call any extension from any telephone.
    For a small, private system, this is sufficient. Large systems and systems
    connecting to other telephone networks need some way to manage calling
    rights. Asterisk does this via <emphasis>contexts</emphasis>.</para>

    <section>
      <title>Origin: Every telephone has a context</title>

      <para>We haven't yet specified a context for the SIP phones we
      configured. In this case, Asterisk assumes the <code>[default]</code>
      context. If we want to specify specific contexts for specific
      telephones, we use the following syntax in
      <filename>sip.conf</filename>: <programlisting>context = ContextName</programlisting></para>

      <para>We can set a context for all the phones in the
      <code>[general]</code> section, but this context can be overwritten by
      telephone.</para>

      <section>
        <title>A context example</title>

        <para>ABC Co. has the SIP phones 10 and 11. They are both in the
        <code>[internal]</code> context. The <filename>sip.conf</filename>
        file looks like this:<programlisting>[general]
port=5060 
bindaddr=0.0.0.0 

[10]
type=friend 
secret=1234 
host=dynamic
context=internal  ; &lt;-- context

[11] 
type=friend 
secret=1234 
host=dynamic
context=internal  ; &lt;-- context</programlisting></para>

        <para>You can achieve the same result more simply,
        though:<programlisting>[general] 
port=5060 
bindaddr=0.0.0.0 
context=internal ; &lt;-- context

[10] 
type=friend 
secret=1234 
host=dynamic

[11] 
type=friend 
secret=1234 
host=dynamic</programlisting></para>
      </section>

      <section>
        <title>Example with multiple phones</title>

        <para>ABC Co. has the SIP phones 10, 11, 12 and 20. The phones 10 to
        12 are standard staff phones in the <code>[abc]</code> context, and 20
        ist a courtesy phone at reception in the<code> [visitor]</code>
        context:<programlisting>[general] 
port=5060 
bindaddr=0.0.0.0 
context=abc  ; &lt;-- context

[10] 
type=friend 
secret=1234 
host=dynamic

[11] 
type=friend 
secret=1234 
host=dynamic

[12] 
type=friend 
secret=1234 
host=dynamic

[20] 
type=friend 
secret=1234 
host=dynamic
context=visitor  ; &lt;-- context</programlisting></para>
      </section>
    </section>

    <section>
      <title>Destination: Contexts in extensions.conf</title>

      <para>The dialplan, <filename>extensions.conf</filename>, is broken up
      into sections, or contexts. Each context is specified by a name in
      square brackets.</para>

      <para>The following is an example <filename>extensions.conf</filename>
      containing the three contexts, <code>default</code>,
      <code>building-mgr</code> and <code>apple-pie</code>:<programlisting>[default] 
exten =&gt; 1001,1,Answer()
exten =&gt; 1001,2,Playback(hello-world)
exten =&gt; 1001,3,Hangup()

[building-mgr]
exten =&gt; 2000,1,Dial(SIP/2000,20)
exten =&gt; 2000,2,VoiceMail(2000,u)

exten =&gt; 2001,1,Dial(SIP/2001)
exten =&gt; 2001,2,VoiceMail(2001,u)

[apple-pie]
exten =&gt; 2999,1,VoiceMailMain(${CALLERID(num)},s)</programlisting></para>

      <para>If the context is not specified for a SIP phone in
      <filename>sip.conf</filename>, Asterisk assumes the
      <code>[default]</code> context in
      <filename>extensions.conf</filename>.</para>
    </section>
  </section>

  <section id="sip-ins-oeffentliche-netz">
    <title>Calls from and to the public switched telephone network
    (PSTN)</title>

    <para>In this section we will connect our mini-system to the public
    telephone network.</para>

    <section id="min-anlage-festnetz">
      <title id="festnetz-outgoing">Calling the PSTN</title>

      <para>At this point you have a working telephone system which, while
      exciting, is not really useful, as it has no connection with the outside
      world. With just 10 more minutes and a working Internet connection, you
      can have a working connection to the PSTN. To do this, you need an
      account with a SIP provider.</para>

      <para>We will configure Asterisk so that you can make calls to the PSTN
      with the phones 2000 and 2001. First, the provider account must be
      defined in <filename>/etc/asterisk/sip.conf</filename>:</para>

      <programlisting>[general]
port = 5060
bindaddr = 0.0.0.0
context = other

register =&gt; 17984512232:UHDZJD@my-voip-provider.com/17984512232
;              ^       ^       ^                    ^
;              |       |       |                    |
;             user password  provider              user

[2000]
type=friend
context=my-phones
secret=1234
host=dynamic

[2001]
type=friend
context=my-phones
secret=1234
host=dynamic

[ext-sip-account]
type=friend
context=from-voip-provider
username=17984512232
fromuser=17984512232
secret=UHDZJD
host=my-voip-provider.com
fromdomain=my-voip-provider.com
qualify=yes
insecure=very
nat=yes</programlisting>

      <para>You must obtain the username (<parameter>17984512232</parameter>
      in our example) and password (<parameter>UHDZJD</parameter> in our
      example) from the SIP provider; often you can do this through a customer
      website. Asterisk needs this information to register with the provider
      and make calls.</para>

      <para>Next we need an additional dialplan rule to allow outbound
      calls:</para>

      <programlisting>[other]

[my-phones]
exten =&gt; 2000,1,Dial(SIP/2000,20)
exten =&gt; 2000,2,VoiceMail(2000,u)

exten =&gt; 2001,1,Dial(SIP/2001,20)
exten =&gt; 2001,2,VoiceMail(2001,u)

exten =&gt; 2999,1,VoiceMailMain(${CALLERID(num)},s)

exten =&gt; _X.,1,Dial(SIP/${EXTEN}@ext-sip-account)</programlisting>

      <para>Once these new entries have been entered, save the file and start
      Asterisk as before, with <command>asterisk -vvvvvc</command> so that we
      get the Asterisk console. Wait a few seconds for the SIP phones to
      register. Now simply dial a number. <tip>
          <para>When dialing through most VoIP providers, you need to dial the
          complete number, including predial digit (1 in North America) and
          area or city code, even if the call is a local call in your calling
          area. For North America, this means you would be dialling the
          predial digit, followed by the full 10 digit number including area
          code, even in regions that do not already have 10 digit local
          dialing. In our example, we provide an open dialing pattern which
          will pass on the digits exactly as dialed to the provider. (Later
          on, we'll show you some techniques that you can use in
          <filename>/etc/asterisk/extensions.conf</filename> so that you don't
          need to dial the full number for local calls in areas where it is
          not normally required.)</para>
        </tip><warning>
          <para>Most SIP providers charge a per-minute rate for local calls
          and many require pre-payment. An advantage is that there is no
          monthly flat-rate for most SIP accounts.</para>
        </warning>If everything is working as it should, you will hear the
      remote line ringing and be able to observe the call progress in the
      console.</para>

      <para>It's a bit early to explain exactly how this works; more on that
      later.<footnote>
          <para>Not too much at once! For now, all you need to know is that
          the <code>${EXTEN}</code> variable always contains the number
          dialled by the caller for the specific instance (see <xref
          linkend="kapitel-programmieren" />).</para>
        </footnote></para>
    </section>

    <section id="festnetz-incoming">
      <title>Taking calls from the PSTN</title>

      <para>The last step is a small one: we want to be able to take incoming
      calls via our SIP provider on extension 2000. To do this, we need to add
      another context to
      <filename>/etc/asterisk/extensions.conf</filename>:<programlisting>[other]

[my-phones]
exten =&gt; 2000,1,Dial(SIP/2000,20)
exten =&gt; 2000,2,VoiceMail(2000,u)

exten =&gt; 2001,1,Dial(SIP/2001,20)
exten =&gt; 2001,2,VoiceMail(2001,u)

exten =&gt; 2999,1,VoiceMailMain(${CALLERID(num)},s)

exten =&gt; _0[1-9].,1,Dial(SIP/${EXTEN}@ext-sip-account)

[from-voip-provider]
exten =&gt; 17984512232,1,Dial(SIP/2000)
</programlisting></para>

      <para>Done!</para>

      <para>In our example, the number <parameter>17984512232</parameter> is
      the PSTN number (also called a DID or DN; more on that later) given to
      your account by your SIP provider. That the DID corresponds to the
      username is coincidental; it doesn't have to.</para>

      <para>You can, of course, configure voicemail for calls coming in from
      the PSTN:<programlisting>[other]

[my-phones]
exten =&gt; 2000,1,Dial(SIP/2000,20)
exten =&gt; 2000,2,VoiceMail(2000,u)

exten =&gt; 2001,1,Dial(SIP/2001,20)
exten =&gt; 2001,2,VoiceMail(2001,u)

exten =&gt; 2999,1,VoiceMailMain(${CALLERID(num)},s)

exten =&gt; _0[1-9].,1,Dial(SIP/${EXTEN}@ext-sip-account)

[from-voip-provider]
exten =&gt; 17984512232,1,Dial(SIP/2000,20)
exten =&gt; 17984512232,2,VoiceMail(2000,u)</programlisting></para>

      <para>If you were so inclined, you could just leave things like this and
      start using your new mini-PBX, but what fun would that be? This chapter
      was only meant to show you how quickly you can build a working Asterisk
      system. In the coming chapters, we'll fill in the gaps and show you just
      how much you can really do with Asterisk.</para>
    </section>
  </section>
</chapter>