<?xml version="1.0" encoding="UTF-8"?>
<section id="applikationen" lang="de" revision="$Revision:528 $">
  <!--% Copyright (c) 2006 - 2007 by 
% Stefan Wintermeyer <sw@amooma.de>
% Permission is granted to copy, distribute and/or modify this document
% under the terms of the GNU Free Documentation License, Version 1.2
% or any later version published by the Free Software Foundation
% with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
% Texts. A copy of the license is included in the section entitled "GNU
% Free Documentation License".
-->

  <!--% translated from the German by Stephen Bosch <sbosch@vodacomm.ca>-->

  <!--% Asterisk training and consulting is offered at http://www.amooma.de-->

  <title>Applications in the dialplan</title>

  <simpara>This section is a comprehensive description of the applications
  available for use in the dialplan
  (<filename>/etc/asterisk/extensions.conf</filename>). To use an application,
  the module to which it belongs must be loaded; this is configured in the
  <code>[modules]</code> section of
  <filename>/etc/asterisk/modules.conf</filename> w<code>ith
  autoload=yes</code> or explicitly with <code>load =&gt;
  app_<replaceable>applicationname</replaceable>.so</code>. You can see which
  modules and applications are available in Asterisk with by entering
  <userinput>show applications</userinput> or <userinput>show application
  <replaceable>application_name</replaceable></userinput> (Asterisk 1.2) and
  <userinput>core show applications</userinput> oder <userinput>core show
  application <replaceable>application_name</replaceable></userinput>
  (Asterisk 1.4).</simpara>

  <simpara>Take care not to confuse <emphasis>applications</emphasis> or
  <emphasis>commands</emphasis> with <emphasis>functions</emphasis>. When
  required, functions are called within commands in the dialplan.
  "Application" is perhaps too expansive a term but it is the convention in
  Asterisk when referring to dialplan commands.</simpara>

  <sidebar>
    <simpara>A brief aside: the configuration files in Asterisk use the obtuse
    INI format (which may be familiar to you if you have worked with a
    certain, widely distributed operating system). No grammatical standard was
    ever publicly released for INI, and the parser does not follow generally
    accepted conventions for tokenizing and lexical and syntactical analysis.
    This is why the Asterisk fork project, <ulink
    url="http://www.openpbx.org/"><citetitle>OpenPBX</citetitle></ulink>, has
    elected to switch over to the "property list"
    (<filename>.plist</filename>) format used in MacOS X for which the
    standards are publicly available.</simpara>

    <simpara>Hence: because of the lack of a formal specification, the
    expected syntax is not always clear - for example, where spaces would be
    allowed or whether double quotes are required or not. In many cases,
    multiple conventions are accepted. When in doubt, only experimentation
    will let you know for certain. Should you identify errors, we ask that you
    contact us so that we may include the new information in future
    editions.</simpara>
  </sidebar>

  <para>It is often possible to omit parameters entirely. In those cases, it
  is still necessary to include the comma delimiter to establish that a
  parameter is empty or not provided (<emphasis>i.e.</emphasis> that the
  default value should be used). For example:<programlisting>exten =&gt; s,1,Dial(IAX2/User:password@example.com/123,,tT)</programlisting></para>

  <para>In general, if an application exits with an error it will return -1,
  if successful it returns a 0. A return value of -1 means that Asterisk will
  hang up the channel without passing it along the dialplan.</para>

  <important>
    <para>Be sure to separate parameters with the <code>","</code> (comma) or
    "<code>|"</code> (pipe) depending on the version of Asterisk. In this book
    we use the "<code>,"</code> primarily.</para>
  </important>

  <simpara>Anyone who has used Asterisk for some time already might wonder why
  one or another application is not included here. The missing applications
  have been deprecated in Asterisk 1.2 and have ceased to exist altogether in
  Asterisk 1.4. The corresponding functions which replace them can be found in
  <xref linkend="funktionen" />. The <command>diff</command> output of the
  built-in help files provided is always shown from the newer 1.4 to the older
  1.2.</simpara>

  <simpara>In the examples the arbitrarily chosen extension 123 and priority 1
  are used, just for the purposes of illustration.</simpara>

  <simpara><indexterm>
      <primary>priority jumping</primary>
    </indexterm>Before Asterisk 1.2, many applications jumped to priority
  <emphasis>n</emphasis>+101, if present, in case of an error (where
  <emphasis>n</emphasis> is the current priority). This old behavior (called
  "priority jumping") can be re-enabled with the option <code>j</code> (jump)
  for some commands or globally via the parameter
  <code>priorityjumping=yes</code> in the <code>[general]</code> section of
  <filename>extensions.conf</filename>. This method, however, is now
  deprecated. The objectives once met by priority jumping are now achieved by
  calling defined channel variables, which are considerably more
  powerful.</simpara>

  <simpara>To enhance the utility of this book as a reference, the
  applications are listed in alphabetical order. They also can be arranged
  into logical categories, shown here:</simpara>

  <para><emphasis role="bold">Call handling</emphasis> (pick-up, transfer,
  hang-up, ...)<simplelist type="vert">
      <member><xref linkend="applikationen-answer" /> - Answer</member>

      <member><xref linkend="applikationen-busy" /> - Signal busy to
      caller</member>

      <member><xref linkend="applikationen-chanisavail" /> - Check to see if a
      channel is available</member>

      <member><xref linkend="applikationen-channelredirect" /> - Redirect a
      channel to another extension and/or priority</member>

      <member><xref linkend="applikationen-congestion" /> - Signal congestion
      to caller</member>

      <member><xref linkend="applikationen-dial" /> - Initiate a call to a
      channel / connect to a channel</member>

      <member><xref linkend="applikationen-disa" /> - DISA (Direct Inward
      System Access)</member>

      <member><xref linkend="applikationen-followme" /> - "follow me"
      function</member>

      <member><xref linkend="applikationen-hangup" /> - Hang up</member>

      <member><xref linkend="applikationen-page" /> - Page multiple
      devices</member>

      <member><xref linkend="applikationen-park" /> - Park call</member>

      <member><xref linkend="applikationen-pickup" /> - Call pickup</member>

      <member><xref linkend="applikationen-retrydial" /> -
      <code><command>Dial()</command></code> with auto-redial</member>

      <member><xref linkend="applikationen-ringing" /> - Signal ringing to
      caller</member>
    </simplelist></para>

  <para><emphasis role="bold">Flow control and timeouts</emphasis><simplelist
      type="vert">
      <member><xref linkend="applikationen-continuewhile" /> - Jump to the
      beginning of a <command>While()</command> loop</member>

      <member><xref linkend="applikationen-endwhile" /> - End a
      <command>While()</command> loop</member>

      <member><xref linkend="applikationen-exec" /> - Launch an
      application</member>

      <member><xref linkend="applikationen-execif" /> - Conditional launch of
      an application</member>

      <member><xref linkend="applikationen-execiftime" /> - Time conditional
      launch of an application</member>

      <member><xref linkend="applikationen-exitwhile" /> - Break a
      <command>While()</command> loop</member>

      <member><xref linkend="applikationen-gosub" /> - Go to a
      subroutine</member>

      <member><xref linkend="applikationen-gosubif" /> - Conditional
      <code><command>Gosub()</command></code></member>

      <member><xref linkend="applikationen-goto" /> - Go to another priority,
      and/or extension and/or context</member>

      <member><xref linkend="applikationen-gotoif" /> - Conditional
      <code><command>Goto()</command></code></member>

      <member><xref linkend="applikationen-gotoiftime" /> - Time conditional
      <code><command>Gosub()</command></code></member>

      <member><xref linkend="applikationen-random" /> - Go to a random entry
      in the dialplan</member>

      <member><xref linkend="applikationen-return" /> - Return to priority
      from which <code><command>Gosub()</command></code> and
      <code><command>GosubIf()</command></code> was called</member>

      <member><xref linkend="applikationen-tryexec" /> - Attempt to launch an
      application and get the return code</member>

      <member><xref linkend="applikationen-while" /> - Start a while
      loop</member>
    </simplelist></para>

  <para><emphasis role="bold">Macros</emphasis><simplelist type="vert">
      <member><xref linkend="applikationen-macro" /> - Call a macro</member>

      <member><xref linkend="applikationen-macroexclusive" /> - Call a macro
      only once at a time</member>

      <member><xref linkend="applikationen-macroexit" /> - Exit from the
      macro</member>

      <member><xref linkend="applikationen-macroif" /> - Conditional call of a
      macro</member>
    </simplelist></para>

  <para><emphasis role="bold">Caller detection, presentation and
  handling</emphasis><simplelist type="vert">
      <member><xref linkend="applikationen-callingpres" /> - Change the caller
      presentation on PRI circuits</member>

      <member><xref linkend="applikationen-lookupblacklist" /> - Look up the
      caller ID in the blacklist</member>

      <member><xref linkend="applikationen-lookupcidname" /> - Look up the
      caller ID <emphasis>name</emphasis> in the database</member>

      <member><xref linkend="applikationen-privacymanager" /> - Request that
      the caller enter the originating number if no caller ID is
      available</member>

      <member><xref linkend="applikationen-setcallerpres" /> - Set the caller
      ID independently of the calling channel</member>

      <member><xref linkend="applikationen-softhangup" /> - Request a
      hangup</member>

      <member><xref linkend="applikationen-zapateller" /> - Block telephone
      solicitations</member>
    </simplelist></para>

  <para><emphasis role="bold">Call detail records (CDRs)</emphasis><simplelist
      type="vert">
      <member><xref linkend="applikationen-appendcdruserfield" /> - Append a
      value to the CDR 'user' field</member>

      <member><xref linkend="applikationen-forkcdr" /> - Creates an additional
      CDR for the current call</member>

      <member><xref linkend="applikationen-nocdr" /> - Disable CDR for this
      call</member>

      <member><xref linkend="applikationen-resetcdr" /> - Resets the current
      CDR</member>

      <member><xref linkend="applikationen-setamaflags" /> - Set AMA
      flags</member>

      <member><xref linkend="applikationen-setcdruserfield" /> - Sets the CDR
      'user' field</member>
    </simplelist></para>

  <para><emphasis role="bold">Voicemail</emphasis><simplelist type="vert">
      <member><xref linkend="applikationen-directory" /> - Provide the
      "Dial-by-Name" directory</member>

      <member><xref linkend="applikationen-mailboxexists" /> - Checks if the
      mailbox exists</member>

      <member><xref linkend="applikationen-voicemail" /> - Voicemail
      engine</member>

      <member><xref linkend="applikationen-voicemailmain" /> - Voicemail
      retrieval engine</member>

      <member><xref linkend="applikationen-vmauthenticate" /> - Authenticates
      the user using user information contained in
      <filename>voicemail.conf</filename></member>
    </simplelist></para>

  <para><emphasis role="bold">Conferences</emphasis><simplelist type="vert">
      <member><xref linkend="applikationen-meetme" /> - MeetMe
      conference</member>

      <member><xref linkend="applikationen-meetmeadmin" /> - Administer a
      MeetMe conference</member>

      <member><xref linkend="applikationen-meetmecount" /> - Provides a count
      of the participants in a MeetMe conference</member>
    </simplelist></para>

  <para><emphasis role="bold">Variable handling</emphasis><simplelist
      type="vert">
      <member><xref linkend="applikationen-importvar" /> - Import a variable
      from a channel</member>

      <member><xref linkend="applikationen-read" /> - Read digits from a user
      into a variable</member>

      <member><xref linkend="applikationen-readfile" /> - Read a file into a
      variable</member>

      <member><xref linkend="applikationen-realtime" /> - Read a value from
      the realtime system into a variable</member>

      <member><xref linkend="applikationen-realtimeupdate" /> - Change a
      variable in the realtime system</member>

      <member><xref linkend="applikationen-set" /> - Set a channel
      variable</member>

      <member><xref linkend="applikationen-setglobalvar" /> - Set a global
      variable</member>
    </simplelist></para>

  <para><emphasis role="bold">Sound files &amp;
  Music-on-Hold</emphasis><simplelist type="vert">
      <member><xref linkend="applikationen-background" /> - Play a sound file
      while proceeding to the next priority</member>

      <member><xref linkend="applikationen-backgrounddetect" /> -
      <code><command>Background()</command></code> with sound
      detection</member>

      <member><xref linkend="applikationen-controlplayback" /> -
      <command><code>Playback()</code></command> with user playback
      controls</member>

      <member><xref linkend="applikationen-datetime" /> - Say the date and
      time</member>

      <member><xref linkend="applikationen-echo" /> - Echo received sound to
      the user</member>

      <member><xref linkend="applikationen-festival" /> - Read text as speech
      using the Festival Text-To-Speech engine</member>

      <member><xref linkend="applikationen-milliwatt" /> - Provide a constant
      1004 Hz tone at 0 db</member>

      <member><xref linkend="applikationen-mp3player" /> - Play an mp3 file or
      stream</member>

      <member><xref linkend="applikationen-musiconhold" /> - Play
      music-on-hold</member>

      <member><xref linkend="applikationen-nbscat" /> - Play an NBS
      stream</member>

      <member><xref linkend="applikationen-playback" /> - Play a sound
      file</member>

      <member><xref linkend="applikationen-playtones" /> - Play a
      tone</member>

      <member><xref linkend="applikationen-progress" /> - Provide the calling
      channel with in-band progress sounds</member>

      <member><xref linkend="applikationen-sayalpha" /> - Spell out an
      alphanumeric string</member>

      <member><xref linkend="applikationen-saydigits" /> - Say digits</member>

      <member><xref linkend="applikationen-saynumber" /> - Say a
      number</member>

      <member><xref linkend="applikationen-sayphonetic" /> - Spell out a
      string using the phonetic alphabet</member>

      <member><xref linkend="applikationen-sayunixtime" /> - Say the Unix
      time</member>

      <member><xref linkend="applikationen-setmusiconhold" /> - Set the
      Music-on-Hold class</member>

      <member><xref linkend="applikationen-stopplaytones" /> - Stops
      <code><command>Playtones()</command></code></member>
    </simplelist></para>

  <para><emphasis role="bold">Recording and Monitoring</emphasis><simplelist
      type="vert">
      <member><xref linkend="applikationen-agentmonitoroutgoing" /> - Record
      the outgoing calls of a call agent</member>

      <member><xref linkend="applikationen-changemonitor" /> - Changes the
      filename prefix of a specific channel for<code>
      </code><command><code>Monitor()</code></command></member>

      <member><xref linkend="applikationen-chanspy" /> - Eavesdrop on an
      active channel</member>

      <member><xref linkend="applikationen-dial" /> - Record a conversation
      (when used with option <code>w</code> or <code>W</code>)</member>

      <member><xref linkend="applikationen-dictate" /> - A virtual dictation
      machine</member>

      <member><xref linkend="applikationen-extenspy" /> - Eavesdrop on an
      active channel, and whisper to the originating caller</member>

      <member><xref linkend="applikationen-mixmonitor" /> - Like
      <code><command>Monitor()</command></code> but mixes both legs into a
      single file</member>

      <member><xref linkend="applikationen-monitor" /> - Records each leg
      (incoming and outgoing) of a call in separate files</member>

      <member><xref linkend="applikationen-pausemonitor" /> - Pauses
      recording</member>

      <member><xref linkend="applikationen-record" /> - Records only incoming
      audio</member>

      <member><xref linkend="applikationen-stopmonitor" /> - Stop recording
      with <command><code>Monitor()</code></command></member>

      <member><xref linkend="applikationen-unpausemonitor" /> - Resumes
      recording</member>

      <member><xref linkend="applikationen-zapbarge" /> - Eavesdrop on a ZAP
      channel</member>

      <member><xref linkend="applikationen-zapscan" /> - Eavesdrop on Zap
      channels and switch easily between them</member>
    </simplelist></para>

  <para><emphasis role="bold">Database operations</emphasis><simplelist
      type="vert">
      <member><xref linkend="applikationen-dbdel" /> - Erase a record from the
      database</member>

      <member><xref linkend="applikationen-dbdeltree" /> - Erase a branch from
      the database</member>
    </simplelist></para>

  <para><emphasis role="bold">General</emphasis><simplelist type="vert">
      <member><xref linkend="applikationen-authenticate" /> - Authenticate a
      user</member>

      <member><xref linkend="applikationen-senddtmf" /> - Send DTMF
      tones</member>

      <member><xref linkend="applikationen-sendimage" /> - Send an
      image</member>

      <member><xref linkend="applikationen-sendtext" /> - Send text</member>

      <member><xref linkend="applikationen-sendurl" /> - Send a URL</member>

      <member><xref linkend="applikationen-transfer" /> - Transfer a
      call</member>

      <member><xref linkend="applikationen-vmauthenticate" /> - Authenticate a
      user configured in <filename>voicemail.conf</filename></member>

      <member><xref linkend="applikationen-wait" /> - Wait for a specified
      time</member>

      <member><xref linkend="applikationen-waitexten" /> - Wait for the user
      to dial an extension for specified time</member>

      <member><xref linkend="applikationen-waitforring" /> - Wait for
      ring</member>

      <member><xref linkend="applikationen-waitforsilence" /> - Wait for
      silence</member>

      <member><xref linkend="applikationen-waitmusiconhold" /> - Wait while
      providing music-on-hold to caller</member>
    </simplelist></para>

  <para><emphasis role="bold">External applications</emphasis><simplelist
      type="vert">
      <member><xref linkend="applikationen-agi" /> - Execute an AGI
      script</member>

      <member><xref linkend="applikationen-deadagi" /> - <code>AGI()</code> on
      an inactive channel</member>

      <member><xref linkend="applikationen-dumpchan" /> - Dump information
      about a channel to the CLI</member>

      <member><xref linkend="applikationen-eagi" /> - See
      <code>AGI()</code></member>

      <member><xref linkend="applikationen-externalivr" /> - Call an external
      IVR generator</member>

      <member><xref linkend="applikationen-fastagi" /> - <code>AGI()</code> on
      another server</member>

      <member><xref linkend="applikationen-log" /> - Log a message at the
      specified verbosity level</member>

      <member><xref linkend="applikationen-macro" /> - Execute a
      macro</member>

      <member><xref linkend="applikationen-noop" /> - No operation; write
      debugging information to the CLI</member>

      <member><xref linkend="applikationen-perl" /> - <code>res_perl</code> is
      like <code>mod_perl</code> for Apache, only for Asterisk</member>

      <member><xref linkend="applikationen-php" /> - <code>res_php</code> is
      like <code>mod_php</code> for Apache, only for Asterisk</member>

      <member><xref linkend="applikationen-read" /> - Read digits from a user
      into a variable</member>

      <member><xref linkend="applikationen-system" /> - Execute a shell
      command</member>

      <member><xref linkend="applikationen-trysystem" /> - Like
      <code>System()</code>, but always returns 0</member>

      <member><xref linkend="applikationen-userevent" /> - Send an event to
      the Manager interface</member>

      <member><xref linkend="applikationen-verbose" /> - Send a message to the
      CLI at the specified verbosity level</member>
    </simplelist></para>

  <para><emphasis role="bold">SIP</emphasis><simplelist type="vert">
      <member><xref linkend="applikationen-sipdtmfmode" /> - Change the SIP
      DTMF mode for a SIP originated call</member>

      <member><xref linkend="applikationen-sipaddheader" /> - Add a SIP header
      for an outgoing call</member>
    </simplelist></para>

  <para><emphasis role="bold">ZAP</emphasis><simplelist type="vert">
      <member><xref linkend="applikationen-flash" /> - Send a flash-hook on a
      ZAP trunk</member>

      <member><xref linkend="applikationen-zapbarge" /> - Eavesdrop on a ZAP
      channel</member>

      <member><xref linkend="applikationen-zapras" /> - Enable RAS (Remote
      Access Server) on a ZAP ISDN channel</member>

      <member><xref linkend="applikationen-zapscan" /> - Eavesdrop on Zap
      channels and switch easily between them</member>
    </simplelist></para>

  <para><emphasis role="bold">Queues and call center
  functions</emphasis><simplelist type="vert">
      <member><xref linkend="applikationen-addqueuemember" /> - Dynamically
      add an interface to a queue</member>

      <member><xref linkend="applikationen-agentcallbacklogin" /> - Log-in a
      queue agent (with call back)</member>

      <member><xref linkend="applikationen-agentlogin" /> - Log-in a queue
      agent</member>

      <member><xref linkend="applikationen-agentmonitoroutgoing" /> - Record
      outgoing call of an agent</member>

      <member><xref linkend="applikationen-parkandannounce" /> - Park a call
      and announce it</member>

      <member><xref linkend="applikationen-parkedcall" /> - Pick up a parked
      call</member>

      <member><xref linkend="applikationen-pausequeuemember" /> - Pause a
      queue member</member>

      <member><xref linkend="applikationen-queue" /> - Send a call to the
      queue</member>

      <member><xref linkend="applikationen-queuelog" /> - Write a message to
      the queue log</member>

      <member><xref linkend="applikationen-removequeuemember" /> - Remove an
      interface from the queue</member>

      <member><xref linkend="applikationen-unpausequeuemember" /> - Resume a
      paused queue member</member>
    </simplelist></para>

  <para><emphasis role="bold">ADSI</emphasis><simplelist type="vert">
      <member><xref linkend="applikationen-adsiprog" /> - Load an ADSI script
      into an ADSI telephone device</member>

      <member><xref linkend="applikationen-getcpeid" /> - Request the
      ADSI-CPE-ID from an ADSI telephone device</member>
    </simplelist></para>

  <para><emphasis role="bold">Miscellaneous</emphasis><simplelist type="vert">
      <member><xref linkend="applikationen-amd" /> - Answering machine
      detection</member>

      <member><xref linkend="applikationen-alarmreceiver" /> - Receive and
      process alarm system events in Contact-ID format from an Ademco alarm
      panel</member>

      <member><xref linkend="applikationen-iax2provision" /> - Provision an
      IAXy device</member>

      <member><xref linkend="applikationen-morsecode" /> - Send text as Morse
      code</member>

      <member><xref linkend="applikationen-settransfercapability" /> - Set
      ISDN transfer capability</member>

      <member><xref linkend="applikationen-sms" /> - Send or receive SMS
      messages</member>
    </simplelist></para>

  <beginpage />

  <section id="applikationen-addqueuemember">
    <title><code>AddQueueMember()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>AddQueueMember()</code></secondary>
    </indexterm>

    <simpara>Dynamically adds an interface into the queue.</simpara>

    <synopsis><command>AddQueueMember(<replaceable>queue</replaceable>[,<replaceable>interface</replaceable>[,<replaceable>penalty</replaceable>[|,<replaceable>options</replaceable>]]])</command></synopsis>

    <simpara>Dynamically adds the specified interface to the specified queue,
    which is configured in <filename>queues.conf</filename>. The penalty
    setting, if provided, will influence the priority assigned to the
    interface in the queue. Agents with lower penalty values will receive
    calls before agents with higher penalty values.</simpara>

    <simpara>If the specified interface is already in the queue and the
    <emphasis>n</emphasis>+101 priority exists (where <emphasis>n</emphasis>
    is the current priority), the call jumps to that priority; otherwise an
    error code (-1) is returned. (Depending on the version of Asterisk, you
    may need to provide the <code>j</code> option to enable priority
    jumping.)</simpara>

    <simpara>If <command><code>AddQueueMember()</code></command> is called
    without the interface parameter, the current user's active interface is
    used.</simpara>

    <simpara>Some versions of Asterisk allow commas as an option
    separator.</simpara>

    <simpara>This application sets the channel variable
    <code>${AQMSTATUS}</code> to <code>ADDED</code>,
    <code>MEMBERALREADY</code> (member exists in the queue) or
    <code>NOSUCHQUEUE</code> (queue does not exist) depending on
    circumstance.</simpara>

    <programlisting>; add SIP/3000 to "supportqueue":
exten =&gt; 123,1,AddQueueMember(supportqueue,SIP/3000)

; add the active interface with a penalty of 2:
exten =&gt; 123,1,AddQueueMember(supportqueue,,2)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'AddQueueMember' =- 

[Synopsis]
Dynamically adds queue members

[Description]
   AddQueueMember(queuename[|interface[|penalty[|options]]]):
Dynamically adds interface to an existing queue.
If the interface is already in the queue and there exists an n+101 priority
then it will then jump to this priority.  Otherwise it will return an error
The option string may contain zero or more of the following characters:
       'j' -- jump to +101 priority when appropriate.
  This application sets the following channel variable upon completion:
     AQMSTATUS    The status of the attempt to add a queue member as a 
                     text string, one of
           ADDED | MEMBERALREADY | NOSUCHQUEUE 
Example: AddQueueMember(techsupport|SIP/3000)</screen></para>
      </formalpara>

      <formalpara>
        <title><command>diff</command> output to internal help in Asterisk
        1.2:</title>

        <para><screen>- none -</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-queue" />, <xref
      linkend="applikationen-removequeuemember" />,
      <filename>queues.conf</filename></para>
    </formalpara>
  </section>

  <section id="applikationen-adsiprog">
    <title><code>ADSIProg()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>ADSIProg()</code></secondary>
    </indexterm>

    <simpara>Loads an ADSI script into an ADSI-capable phone.</simpara>

    <synopsis><command>ADSIProg([<replaceable>script</replaceable>])</command></synopsis>

    <simpara>Programs an ADSI<footnote>
        <simpara>Analog Display Services Interface</simpara>
      </footnote>phone with the provided script. If no script is provided, the
    default <filename>asterisk.adsi</filename> is used. The pathname for the
    script is relative to the default Asterisk configuration directory, which
    is usually <filename>/etc/asterisk/</filename>. The absolute path is also
    accepted.</simpara>

    <simpara>Use <code><command>GetCPEID()</command></code> to obtain the
    CPE-ID and other information about the ADSI device.</simpara>

    <programlisting>; Program the ADSI phone with the telcordia-1.adsi script:
exten =&gt; 123,1,ADSIProg(telcordia-1.adsi)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'ADSIProg' =- 

[Synopsis]
Load Asterisk ADSI Scripts into phone

[Description]
  ADSIProg(script): This application programs an ADSI Phone with the given
script. If nothing is specified, the default script (asterisk.adsi) is used.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-getcpeid" />,
      <filename>adsi.conf</filename></para>
    </formalpara>
  </section>

  <section id="applikationen-agentcallbacklogin">
    <title><code>AgentCallbackLogin()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>AgentCallbackLogin()</code></secondary>
    </indexterm>

    <simpara>Allows call agent login with callback.</simpara>

    <synopsis><command>AgentCallbackLogin([<replaceable>agentid</replaceable>][,<replaceable>options</replaceable>[,<replaceable>extension</replaceable>@<replaceable>context</replaceable>]])</command></synopsis>

    <simpara>Allows an agent identified through the agentid to log into the
    queue. A call in the queue will cause the agent's phone to ring (this is
    in contrast to <command>AgentLogin()</command>, in which the agent's phone
    is off-hook and new calls are indicated by a tone).</simpara>

    <simpara>For an incoming call for the specified agent, the specified
    extension (at the specified context, if provided) is called.</simpara>

    <simpara>The option<code> s</code> makes the login silent; the agent login
    is not reported.</simpara>

    <programlisting>; logs in Agent 33 silently. Calls for this agent go to SIP/300:
exten =&gt; 123,1,AgentCallbackLogin(33,s,${CALLERID(num)})

; Assuming that the agent number is the same as the agent extension, we can do:
exten =&gt; 123,1,AgentCallbackLogin(${CALLERID(num)},s,${CALLERID(num)})</programlisting>

    <simpara>Numerous examples are available at <ulink
    url="http://www.voip-info.org/wiki/index.php?page=Asterisk+cmd+AgentCallbackLogin">http://www.voip-info.org/wiki/index.php?page=Asterisk+cmd+AgentCallbackLogin</ulink>.</simpara>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'AgentCallbackLogin' =- 

[Synopsis]
Call agent callback login

[Description]
  AgentCallbackLogin([AgentNo][|[options][|[exten]@context]]):
Asks the agent to login to the system with callback.
The agent's callback extension is called (optionally with the specified
context).
The option string may contain zero or more of the following characters:
      's' -- silent login - do not announce the login ok segment agent logged in/off</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-agentlogin" /></para>
    </formalpara>
  </section>

  <section id="applikationen-agentlogin">
    <title><code>AgentLogin()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>AgentLogin()</code></secondary>
    </indexterm>

    <simpara>Allows call agent login.</simpara>

    <synopsis><command>AgentLogin([<replaceable>agentid</replaceable>][,<replaceable>options</replaceable>])</command></synopsis>

    <simpara>Logs the current caller (optionally identified through
    <code>agentid</code>) into the queue as a call agent. Once logged in, the
    agent can take calls with the phone off-hook; each call is preceded by a
    warning tone. Calls are ended by pressing the "*" key.</simpara>

    <simpara>The option<code> s</code> makes the login silent;</simpara>

    <programlisting>; logs in Agent 33 silently.
exten =&gt; 123,1,AgentLogin(33,s)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'AgentLogin' =- 

[Synopsis]
Call agent login

[Description]
  AgentLogin([AgentNo][|options]):
Asks the agent to login to the system.  Always returns -1.  While
logged in, the agent can receive calls and will hear a 'beep'
when a new call comes in. The agent can dump the call by pressing
the star key.
The option string may contain zero or more of the following characters:
      's' -- silent login - do not announce the login ok segment after agent logged in/off</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-agentcallbacklogin" /></para>
    </formalpara>
  </section>

  <section id="applikationen-agentmonitoroutgoing">
    <title><code>AgentMonitorOutgoing()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>AgentMonitorOutgoing()</code></secondary>
    </indexterm>

    <simpara>Records the outgoing calls of an agent.</simpara>

    <synopsis><command>AgentMonitorOutgoing([<replaceable>options</replaceable>])</command></synopsis>

    <simpara>Records all the outgoing calls of an agent.</simpara>

    <simpara>This application attempts to determine the ID of an agent making
    an outgoing call by comparing the caller ID of the agent with a global
    variable set by the <command>AgentCallbackLogin()</command> application.
    As such, it should be used with <command>AgentCallbackLogin()</command>,
    and always in a later priority. This application uses monitoring functions
    in <code>chan_agent</code> instead of <command>Monitor()</command>, so
    call recording must be configured in
    <filename>agents.conf</filename>.</simpara>

    <simpara>By default, recordings are saved in
    <filename>/var/spool/asterisk/monitor/</filename>. You can override this
    behavior with the parameter <code>savecallsin</code> in
    <filename>agents.conf</filename>.</simpara>

    <warning>
      <para>Be aware that recording of calls may be subject to freedom of
      information and privacy legislation in your jurisdiction. As a matter of
      professional practice you should know the terms under which it is lawful
      to record telephone calls. In most jurisdictions it is illegal to record
      a call without the knowledge of the participants.</para>
    </warning>

    <simpara>If the caller ID and/or agent id for the agent cannot be
    determined, the call jumps to priority <emphasis>n</emphasis>+101, if it
    exists.</simpara>

    <simpara>Unless the options specify otherwise, the application returns
    0.</simpara>

    <simpara>The following options may be used:</simpara>

    <variablelist termlength="2">
      <varlistentry>
        <term><code>d</code></term>

        <listitem>
          <simpara>Forces the return of -1 in the event of error if there is
          no <emphasis>n</emphasis>+101 priority.</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>c</code></term>

        <listitem>
          <simpara>Changes the call detail record so that the source of the
          call is <code>agent/agentid</code> rather than the caller
          ID.</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>n</code></term>

        <listitem>
          <simpara>Suppresses error messages if the caller ID and/or agent ID
          cannot be determined. This is useful if a common context for agent
          and non-agent calls is desired.</simpara>
        </listitem>
      </varlistentry>
    </variablelist>

    <programlisting>; record outgoing calls of this agent and adjust the CDR accordingly
exten =&gt; 123,1,AgentMonitorOutgoing(c)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'AgentMonitorOutgoing' =- 

[Synopsis]
Record agent's outgoing call

[Description]
  AgentMonitorOutgoing([options]):
Tries to figure out the id of the agent who is placing outgoing call based on
comparison of the callerid of the current interface and the global variable 
placed by the AgentCallbackLogin application. That's why it should be used only
with the AgentCallbackLogin app. Uses the monitoring functions in chan_agent 
instead of Monitor application. That have to be configured in the agents.conf file.

Return value:
Normally the app returns 0 unless the options are passed. Also if the callerid or
the agentid are not specified it'll look for n+101 priority.

Options:
 'd' - make the app return -1 if there is an error condition and there is
       no extension n+101
 'c' - change the CDR so that the source of the call is 'Agent/agent_id'
 'n' - don't generate the warnings when there is no callerid or the
       agentid is not known.
             It's handy if you want to have one context for agent and non-agent calls.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-agentcallbacklogin" />,
      <filename>agents.conf</filename>, <xref
      linkend="applikationen-monitor" />, <xref
      linkend="applikationen-chanspy" /></para>
    </formalpara>
  </section>

  <section id="applikationen-agi">
    <title><code>AGI()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>AGI()</code></secondary>
    </indexterm>

    <simpara>Runs an AGI compliant application.</simpara>

    <synopsis><command>AGI(<replaceable>program</replaceable>[,<replaceable>arguments</replaceable>])</command></synopsis>

    <simpara>(Similar to <command><code>EAGI()</code></command>,
    <command><code>FastAGI()</code></command>,
    <code><command>DeadAGI()</command></code>)</simpara>

    <simpara>Runs an Asterisk Gateway Interface compliant program called
    <code>program</code> on the current channel. AGI scripts or programs can
    be implemented in almost any conceivable language (e.g. Perl, PHP) and may
    be used to manipulate the channel, play sound files, interpret DTMF tones,
    and so on. Asterisk communicates with the AGI program over
    <filename>stdin</filename> and <filename>stdout</filename>. The arguments
    are passed directly to the AGI program at execution time.</simpara>

    <simpara>The AGI program must be flagged as executable in the filesystem.
    The path is relative to the Asterisk AGI directory, which is at
    <filename>/var/lib/asterisk/agi-bin/</filename> by default.</simpara>

    <simpara>To run AGI programs on inactive channels (as in the case of an
    <code>h</code>-extension, where the channel is on-hook), used
    <code><command>DeadAGI()</command></code> instead. To run AGI programs on
    another server in the network, use
    <code><command>FastAGI()</command></code>.</simpara>

    <simpara>Should your AGI program need access to the incoming audio stream,
    use <code><command>EAGI()</command></code> instead of
    <code><command>AGI()</command></code>. The incoming audio stream is
    provided on file descriptor 3<footnote>
        <para>a reminder: 0: stdin, 1: stdout, 2:stderr. File descriptor 3 is
        freely assignable.</para>
      </footnote></simpara>

    <simpara>Returns -1 on hang-up or if the program requests a hang-up;
    returns 0 if not.</simpara>

    <programlisting>; call my AGI application:
exten =&gt; 123,1,AGI(agi-app)
exten =&gt; 123,n,EAGI(eagi-app)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'AGI' =- 

[Synopsis]
Executes an AGI compliant application

[Description]
  [E|Dead]AGI(command|args): Executes an Asterisk Gateway Interface compliant
program on a channel. AGI allows Asterisk to launch external programs
written in any language to control a telephony channel, play audio,
read DTMF digits, etc. by communicating with the AGI protocol on stdin
and stdout.
  This channel will stop dialplan execution on hangup inside of this
application, except when using DeadAGI.  Otherwise, dialplan execution
will continue normally.
  A locally executed AGI script will receive SIGHUP on hangup from the channel
except when using DeadAGI. This can be disabled by setting the AGISIGHUP channel
variable to "no" before executing the AGI application.
  Using 'EAGI' provides enhanced AGI, with incoming audio available out of band
on file descriptor 3

  Use the CLI command 'agi show' to list available agi commands
  This application sets the following channel variable upon completion:
     AGISTATUS      The status of the attempt to the run the AGI script
                    text string, one of SUCCESS | FAILED | HANGUP</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>13,19c13,15
&lt;   This channel will stop dialplan execution on hangup inside of this
&lt; application, except when using DeadAGI.  Otherwise, dialplan execution
&lt; will continue normally.
&lt;   A locally executed AGI script will receive SIGHUP on hangup from the channel
&lt; except when using DeadAGI. This can be disabled by setting the AGISIGHUP channel
&lt; variable to "no" before executing the AGI application.
&lt;   Using 'EAGI' provides enhanced AGI, with incoming audio available out of band
---
&gt; Returns -1 on hangup (except for DeadAGI) or if application requested
&gt;  hangup, or 0 on non-hangup exit. 
&gt; Using 'EAGI' provides enhanced AGI, with incoming audio available out of band
22,25c18
&lt;   Use the CLI command 'agi show' to list available agi commands
&lt;   This application sets the following channel variable upon completion:
&lt;      AGISTATUS      The status of the attempt to the run the AGI script
&lt;                     text string, one of SUCCESS | FAILED | HANGUP
---
&gt; Use the CLI command 'show agi' to list available agi commands</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-deadagi" />, <xref
      linkend="applikationen-fastagi" /></para>
    </formalpara>
  </section>

  <section id="applikationen-alarmreceiver">
    <title><code>AlarmReceiver()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>AlarmReceiver()</code></secondary>
    </indexterm>

    <simpara>Receives alarm reports from a burglar or fire alarm
    panel.</simpara>

    <synopsis><command>AlarmReceiver()</command></synopsis>

    <simpara>Emulates an alarm receiver and allows Asterisk to receive and
    process alarm reports in proprietary alarm panel signalling formats from
    burglar and fire alarm panels. Only Ademco Contact ID formatted alarm
    reports are supported at this time.</simpara>

    <simpara>Once <command><code>AlarmReceiver()</code></command> is called,
    Asterisk performs a handshake with the connected alarm panel, waits for it
    to transmit events, then validates and stores them. When the panel has
    hung up, <command>AlarmReceiver()</command> runs the system command
    specified in the <code>eventcmd</code> of
    <filename>alarmreceiver.conf</filename>. The
    <filename>alarmreceiver.conf</filename> also contains DTMF timing settings
    and acknowledgement tone volume.</simpara>

    <simpara>This application has not been certified for use in critical
    environments where it is the only means of polling alarm events. Use it at
    your own risk! Before implementing, be sure to test it
    thoroughly.</simpara>

    <simpara>Always returns 0.</simpara>

    <programlisting>; Process alarm events:
exten =&gt; s,1,AlarmReceiver()</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'AlarmReceiver' =- 

[Synopsis]
Provide support for receiving alarm reports from a burglar or fire alarm panel

[Description]
  AlarmReceiver(): Only 1 signalling format is supported at this time: Ademco
Contact ID. This application should be called whenever there is an alarm
panel calling in to dump its events. The application will handshake with the
alarm panel, and receive events, validate them, handshake them, and store them
until the panel hangs up. Once the panel hangs up, the application will run the
system command specified by the eventcmd setting in alarmreceiver.conf and pipe
the events to the standard input of the application. The configuration file also
contains settings for DTMF timing, and for the loudness of the acknowledgement
tones.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>5c5
&lt; Provide support for receiving alarm reports from a burglar or fire alarm panel
---
&gt; Provide support for receving alarm reports from a burglar or fire alarm panel</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><filename>alarmreceiver.conf</filename></para>
    </formalpara>
  </section>

  <section id="applikationen-amd">
    <title><code>AMD()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>AMD()</code></secondary>
    </indexterm>

    <simpara>Answering machine detection. Attempts to detect an answering
    machine at the remote end of a call.</simpara>

    <synopsis><command>AMD([<replaceable>initialSilence</replaceable>[,<replaceable>greeting</replaceable>[,<replaceable>afterGreetingSilence</replaceable>[,<replaceable>totalAnalysisTime</replaceable>[,<replaceable>minWordLength</replaceable>[,<replaceable>betweenWordsSilence</replaceable>[,<replaceable>maxNumberOfWords</replaceable>[,<replaceable>silenceThreshold</replaceable>]]]]]]]])</command></synopsis>

    <simpara>If a call is initiated through a <filename>.call</filename> file,
    you can use <code>AMD()</code> to sense an answering machine at the remote
    end. Defaults are set in <filename>amd.conf</filename>.</simpara>

    <variablelist termlength="22">
      <varlistentry>
        <term><code>initialSilence</code></term>

        <listitem>
          <simpara>Maximum duration of silence preceding the remote
          announcement. If this is exceeded, sets <code>${AMDSTATUS}</code> to
          <code>MACHINE</code>.</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>greeting</code></term>

        <listitem>
          <simpara>Maximum duration of an announcement. If this is exceeded,
          sets <code>${AMDSTATUS}</code> to <code>MACHINE</code>.</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>afterGreetingSilence</code></term>

        <listitem>
          <simpara>Maximum duration of silence following the remote
          announcement. If this is exceeded, sets <code>${AMDSTATUS}</code> to
          <code>HUMAN</code>.</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>totalAnalysisTime</code></term>

        <listitem>
          <simpara>Maximum duration AMD() is allowed to determine whether
          remote end is <code>HUMAN</code> or <code>MACHINE</code>.</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>minWordsSilence</code></term>

        <listitem>
          <simpara>Minimum allowed duration of a sound for it to be considered
          a word.</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>betweenWordsSilence</code></term>

        <listitem>
          <simpara>Minimum allowed duration of silence between
          words.</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>maxNumberOfWords</code></term>

        <listitem>
          <simpara>Maximum number of words in the announcement. If this is
          exceeded, sets <code>${AMDSTATUS}</code> to
          <code>MACHINE</code>.</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>silenceThreshold</code></term>

        <listitem>
          <simpara>The silence threshold.</simpara>
        </listitem>
      </varlistentry>
    </variablelist>

    <simpara>This application delivers its output in the channel variables
    <code>AMDSTATUS</code> and <code>AMDCAUSE</code>.</simpara>

    <simpara><code>AMDSTATUS</code> can be assigned the following
    values:</simpara>

    <itemizedlist>
      <listitem>
        <simpara><code>MACHINE</code></simpara>

        <simpara>The remote end is a machine.</simpara>
      </listitem>

      <listitem>
        <simpara><code>HUMAN</code></simpara>

        <simpara>The remote end is a human.</simpara>
      </listitem>

      <listitem>
        <simpara><code>NOTSURE</code></simpara>

        <simpara>Threshold cases are indicated with NOTSURE.</simpara>
      </listitem>

      <listitem>
        <simpara><code>HANGUP</code></simpara>

        <simpara>The remote end has hung up.</simpara>
      </listitem>
    </itemizedlist>

    <simpara><code>AMDCAUSE</code> can be assigned the following
    values:</simpara>

    <itemizedlist>
      <listitem>
        <simpara><code>TOOLONG-</code><replaceable>&lt;%d
        total_time&gt;</replaceable></simpara>
      </listitem>

      <listitem>
        <simpara><code>INITIALSILENCE-</code><replaceable>&lt;%d
        silenceDuration&gt;</replaceable><code>-</code><replaceable>&lt;%d
        initialSilence&gt;</replaceable></simpara>
      </listitem>

      <listitem>
        <simpara><code>HUMAN-</code><replaceable>&lt;%d
        silenceDuration&gt;</replaceable><code>-</code><replaceable>&lt;%d
        afterGreetingSilence&gt;</replaceable></simpara>
      </listitem>

      <listitem>
        <simpara><code>MAXWORDS-</code><replaceable>&lt;%d
        wordsCount&gt;</replaceable><code>-</code><replaceable>&lt;%d
        maximumNumberOfWords&gt;</replaceable></simpara>
      </listitem>

      <listitem>
        <simpara><code>LONGGREETING-</code><replaceable>&lt;%d
        voiceDuration&gt;</replaceable><code>-</code><replaceable>&lt;%d
        greeting&gt;</replaceable></simpara>
      </listitem>
    </itemizedlist>

    <programlisting>; This extension is called through a .call file:
exten =&gt; 10,1,AMD()
exten =&gt; 10,n,Goto(Status-${AMDSTATUS})
exten =&gt; 10,n(Status-HUMAN),Playback(message)
exten =&gt; 10,n,Hangup()
exten =&gt; 10,n(Status-MACHINE),Hangup()
exten =&gt; 10,n(Status-NOTSURE),Hangup()
exten =&gt; 10,n(Status-HANGUP),Hangup()
</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'AMD' =- 

[Synopsis]
Attempts to detect answering machines

[Description]
  AMD([initialSilence][|greeting][|afterGreetingSilence][|totalAnalysisTime]
      [|minimumWordLength][|betweenWordsSilence][|maximumNumberOfWords]
      [|silenceThreshold])
  This application attempts to detect answering machines at the beginning
  of outbound calls.  Simply call this application after the call
  has been answered (outbound only, of course).
  When loaded, AMD reads amd.conf and uses the parameters specified as
  default values. Those default values get overwritten when calling AMD
  with parameters.
- 'initialSilence' is the maximum silence duration before the greeting. If
   exceeded then MACHINE.
- 'greeting' is the maximum length of a greeting. If exceeded then MACHINE.
- 'afterGreetingSilence' is the silence after detecting a greeting.
   If exceeded then HUMAN.
- 'totalAnalysisTime' is the maximum time allowed for the algorithm to decide
   on a HUMAN or MACHINE.
- 'minimumWordLength'is the minimum duration of Voice to considered as a word.
- 'betweenWordsSilence' is the minimum duration of silence after a word to 
   consider the audio that follows as a new word.
- 'maximumNumberOfWords'is the maximum number of words in the greeting. 
   If exceeded then MACHINE.
- 'silenceThreshold' is the silence threshold.
This application sets the following channel variable upon completion:
    AMDSTATUS - This is the status of the answering machine detection.
                Possible values are:
                MACHINE | HUMAN | NOTSURE | HANGUP
    AMDCAUSE - Indicates the cause that led to the conclusion.
               Possible values are:
               TOOLONG-&lt;%d total_time&gt;
               INITIALSILENCE-&lt;%d silenceDuration&gt;-&lt;%d initialSilence&gt;
               HUMAN-&lt;%d silenceDuration&gt;-&lt;%d afterGreetingSilence&gt;
               MAXWORDS-&lt;%d wordsCount&gt;-&lt;%d maximumNumberOfWords&gt;
               LONGGREETING-&lt;%d voiceDuration&gt;-&lt;%d greeting&gt;</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>-- in Version 1.2 nicht vorhanden --</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="call-file" /></para>
    </formalpara>
  </section>

  <section id="applikationen-answer">
    <title><code>Answer()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Answer()</code></secondary>
    </indexterm>

    <simpara>Answers a ringing channel.</simpara>

    <synopsis><command>Answer([<replaceable>delay</replaceable>])</command></synopsis>

    <simpara>Instructs Asterisk to answer the channel if it is ringing. If the
    channel is not ringing, this application has no effect.</simpara>

    <simpara>It is generally recommended that the channel be answered before
    other applications are called, unless there is a specific reason for not
    doing so. Most applications require that the channel be answered before
    they are run; if this is not done, the behavior may be
    unexpected.</simpara>

    <simpara>The optional delay parameter specifies how long Asterisk should
    wait, in milliseconds, before answering the channel.</simpara>

    <simpara>Returns 0 upon success.</simpara>

    <programlisting>exten =&gt; 123,1,Answer()
exten =&gt; 123,n,Wait(1)
exten =&gt; 123,n,Playback(hello)
exten =&gt; 123,n,Hangup()</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'Answer' =- 

[Synopsis]
Answer a channel if ringing

[Description]
  Answer([delay]): If the call has not been answered, this application will
answer it. Otherwise, it has no effect on the call. If a delay is specified,
Asterisk will wait this number of milliseconds before answering the call.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-hangup" /></para>
    </formalpara>
  </section>

  <section id="applikationen-appendcdruserfield">
    <title><code>AppendCDRUserField()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>AppendCDRUserField()</code></secondary>
    </indexterm>

    <simpara>Appends a string to the user field in the CDR.</simpara>

    <synopsis><command>AppendCDRUserField(<replaceable>string</replaceable>)</command></synopsis>

    <simpara>Hängt den übergebenen String an das CDR-User-Feld an.</simpara>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'AppendCDRUserField' =- 

[Synopsis]
Append to the CDR user field

[Description]
[Synopsis]
AppendCDRUserField(value)

[Description]
AppendCDRUserField(value): Append value to the CDR user field
       The Call Data Record (CDR) user field is an extra field you
       can use for data not stored anywhere else in the record.
       CDR records can be used for billing or storing other arbitrary data
       (I.E. telephone survey responses)
       Also see SetCDRUserField().</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <important>
      <para>Though it is not mentioned in the internal help, this application
      is deprecated. The source code gives a hint:<programlisting>ast_log(LOG_WARNING, "AppendCDRUserField is deprecated.  Please use CDR(userfield) instead.\n");</programlisting>Use
      the <code>CDR(userfield)</code> function instead.</para>
    </important>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="funktionen-cdr" /></para>
    </formalpara>
  </section>

  <section id="applikationen-authenticate">
    <title><code>Authenticate()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Authenticate()</code></secondary>
    </indexterm>

    <simpara>Requires that the caller enter a password before proceeding to
    the next priority.</simpara>

    <synopsis><command>Authenticate(<replaceable>password</replaceable>[,<replaceable>options</replaceable>[,maxDigits]])</command></synopsis>

    <simpara>Requires that the caller enters the specified password correctly
    before proceeding to the next priority. Allows three the caller three
    chances to enter the password correctly before hanging up.</simpara>

    <simpara>If <code>password</code> begins with <code>"/"
    </code>(forward-slash), Asterisk will assume it is a filename to a file
    containing a list of valid passwords (exactly one per line). Passwords may
    also be stored in the Asterisk database (AstDB); see option <code>d</code>
    below.</simpara>

    <simpara>The following options are allowed (also in
    combination):</simpara>

    <variablelist termlength="2">
      <varlistentry>
        <term><code>a</code></term>

        <listitem>
          <simpara>(accountcode) Sets the CDR <code>accountcode</code> field
          and the channel variable <code>ACCOUNTCODE</code> to the entered
          password.</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>d</code></term>

        <listitem>
          <simpara>(database) Interprets the entered password as a key in the
          Asterisk database. If a database key is used, the value in the
          associated record is ignored and can be arbitrary.</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>r</code></term>

        <listitem>
          <simpara>(remove) Removes the database key after successful password
          entry (valid only with option <code>d</code>).</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>j</code></term>

        <listitem>
          <simpara>(jump) In the event of three failed attempts, jump to
          priority <emphasis>n</emphasis>+101 (if it exists) instead of
          hanging up.</simpara>
        </listitem>
      </varlistentry>
    </variablelist>

    <important>
      <para>When using option <code>d</code>, note that Asterisk looks for a
      <emphasis>key</emphasis> with a name equivalent to the password: as in
      <code>/<replaceable>passwords</replaceable>/<replaceable>1234</replaceable></code>.
      The value in the record itself is irrelevant. A more logical
      implementation would be to place the password as a value in the record,
      as in /passwords/type =&gt; 1234.</para>
    </important>

    <simpara>If <code>maxDigits</code> is set, input is ended as soon as the
    user has entered enough digits; this saves having to enter
    <code>"#"</code>. (Default: 0; no limits on input).</simpara>

    <simpara>Returns 0 if the user enters the correct password within three
    attempts, otherwise hangs up the channel and returns -1.</simpara>

    <programlisting>; Passwort 1234 verlangen:
exten =&gt; 123,1,Answer()
exten =&gt; 123,2,Authenticate(1234,j,4)           ; an exceptional use of priority jumping because we want to tell the caller
                                                ; that she has entered the wrong password
exten =&gt; 123,3,Playback(pin-nummer-akzeptiert)
exten =&gt; 123,103,Playback(pin-nummer-falsch)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'Authenticate' =- 

[Synopsis]
Authenticate a user

[Description]
  Authenticate(password[|options[|maxdigits]]): This application asks the caller
to enter a given password in order to continue dialplan execution. If the password
begins with the '/' character, it is interpreted as a file which contains a list of
valid passwords, listed 1 password per line in the file.
  When using a database key, the value associated with the key can be anything.
Users have three attempts to authenticate before the channel is hung up. If the
passsword is invalid, the 'j' option is specified, and priority n+101 exists,
dialplan execution will continnue at this location.
  Options:
     a - Set the channels' account code to the password that is entered
     d - Interpret the given path as database key, not a literal file
     j - Support jumping to n+101 if authentication fails
     m - Interpret the given path as a file which contains a list of account
         codes and password hashes delimited with ':', listed one per line in
         the file. When one of the passwords is matched, the channel will have
         its account code set to the corresponding account code in the file.
     r - Remove the database key upon successful entry (valid with 'd' only)
     maxdigits  - maximum acceptable number of digits. Stops reading after
         maxdigits have been entered (without requiring the user to
         press the '#' key).
         Defaults to 0 - no limit - wait for the user press the '#' key.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>8,10c8,10
&lt;   Authenticate(password[|options[|maxdigits]]): This application asks the caller
&lt; to enter a given password in order to continue dialplan execution. If the password
&lt; begins with the '/' character, it is interpreted as a file which contains a list of
---
&gt;   Authenticate(password[|options]): This application asks the caller to enter a
&gt; given password in order to continue dialplan execution. If the password begins
&gt; with the '/' character, it is interpreted as a file which contains a list of
25,28d24
&lt;      maxdigits  - maximum acceptable number of digits. Stops reading after
&lt;          maxdigits have been entered (without requiring the user to
&lt;          press the '#' key).
&lt;          Defaults to 0 - no limit - wait for the user press the '#' key.</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-vmauthenticate" /></para>
    </formalpara>
  </section>

  <section id="applikationen-background">
    <title><code>Background()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Background()</code></secondary>
    </indexterm>

    <simpara>Plays a sound file while listening for DTMF input from the
    caller.</simpara>

    <synopsis><command>Background(<replaceable>soundfile1</replaceable>[&amp;<replaceable>soundfile2</replaceable>...][,<replaceable>options</replaceable>[,<replaceable>language</replaceable>]])</command></synopsis>

    <simpara>Plays the specified sound files while waiting for the caller to
    dial an extension. Playback stops the moment the first digit is pressed.
    Filenames must be provided without file extensions; Asterisk chooses the
    file format with the minimum transcoding cost.</simpara>

    <simpara>Allowed options may not be combined:</simpara>

    <variablelist termlength="2">
      <varlistentry>
        <term><code>skip</code></term>

        <listitem>
          <simpara>Playback is skipped if the channel is not in the
          <code>up</code> state when the application is run. If skip is
          specified, the application ends immediately when the channel is hung
          up.</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>noanswer</code></term>

        <listitem>
          <simpara>The channel is only answered after the specified sound file
          has been played. The default behavior is to answer the channel
          automatically before playing the sound file. Note that not all
          channel types allow playback of a message before being
          answered.</simpara>
        </listitem>
      </varlistentry>
    </variablelist>

    <simpara>The <code>language</code> parameter can be used to specify a
    language for the sound file(s) played, in the event this should be
    different than the language currently specified for the channel.</simpara>

    <simpara>Returns -1 if hung up or if the specified sound file does not
    exist, otherwise returns 0.</simpara>

    <programlisting>exten =&gt; 123,1,Answer()
exten =&gt; 123,n,Background(please-enter-extension)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'BackGround' =- 

[Synopsis]
Play an audio file while waiting for digits of an extension to go to.

[Description]
  Background(filename1[&amp;filename2...][|options[|langoverride][|context]]):
This application will play the given list of files while waiting for an
extension to be dialed by the calling channel. To continue waiting for digits
after this application has finished playing files, the WaitExten application
should be used. The 'langoverride' option explicitly specifies which language
to attempt to use for the requested sound files. If a 'context' is specified,
this is the dialplan context that this application will use when exiting to a
dialed extension.  If one of the requested sound files does not exist, call processing will be
terminated.
  Options:
    s - Causes the playback of the message to be skipped
          if the channel is not in the 'up' state (i.e. it
          hasn't been answered yet). If this happens, the
          application will return immediately.
    n - Don't answer the channel before playing the files.
    m - Only break if a digit hit matches a one digit
          extension in the destination context.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>5c5
&lt; Play an audio file while waiting for digits of an extension to go to.
---
&gt; Play a file while awaiting extension
12c12
&lt; should be used. The 'langoverride' option explicitly specifies which language
---
&gt; should be used. The 'langoverride' option explicity specifies which language
18c18
&lt;     s - Causes the playback of the message to be skipped
---
&gt;     s - causes the playback of the message to be skipped
20c20
&lt;           hasn't been answered yet). If this happens, the
---
&gt;           hasn't been answered yet.) If this happens, the
22,24c22,24
&lt;     n - Don't answer the channel before playing the files.
&lt;     m - Only break if a digit hit matches a one digit
&lt;           extension in the destination context.
---
&gt;     n - don't answer the channel before playing the files
&gt;     m - only break if a digit hit matches a one digit
&gt;           extension in the destination context</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-playback" />, <xref
      linkend="applikationen-backgrounddetect" />, CLI-Befehl <code>show
      translation</code></para>
    </formalpara>
  </section>

  <section id="applikationen-backgrounddetect">
    <title><code>BackgroundDetect()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>BackgroundDetect()</code></secondary>
    </indexterm>

    <simpara>Plays a sound file while listening for sound from the
    caller.</simpara>

    <synopsis><command>BackgroundDetect(<replaceable>soundfile</replaceable>[,<replaceable>silence</replaceable>[,<replaceable>min</replaceable>[,<replaceable>max</replaceable>]]])</command></synopsis>

    <simpara>Similar to <command><code>Background()</code></command>, but
    listens for sound also.</simpara>

    <simpara>During playback of the sound file, the application monitors audio
    on the incoming audio channel. If it detects a sound longer than
    <emphasis>min</emphasis> milliseconds in duration but shorter than
    <emphasis>max</emphasis> milliseconds, followed by a period of silence of
    at least <emphasis>silence</emphasis> milliseconds, it stops playback and
    passes the call to the <code>talk</code> extension, if it
    exists.</simpara>

    <simpara>If <emphasis>silence</emphasis>, <emphasis>min</emphasis> and
    <emphasis>max</emphasis> are not specified, the defaults are used: 1000
    ms, 100 ms and unlimited, respectively.</simpara>

    <simpara>Returns -1 on hangup, otherwise returns 0 (such as when playback
    is interrupted due to input).</simpara>

    <programlisting>exten =&gt; 123,1,BackgroundDetect(symphony)
exten =&gt; 123,n,Playback(vm-sorry)
exten =&gt; talk,1,Playback(yes-please)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'BackgroundDetect' =- 

[Synopsis]
Background a file with talk detect

[Description]
  BackgroundDetect(filename[|sil[|min|[max]]]):  Plays  back  a  given
filename, waiting for interruption from a given digit (the digit must
start the beginning of a valid extension, or it will be ignored).
During the playback of the file, audio is monitored in the receive
direction, and if a period of non-silence which is greater than 'min' ms
yet less than 'max' ms is followed by silence for at least 'sil' ms then
the audio playback is aborted and processing jumps to the 'talk' extension
if available.  If unspecified, sil, min, and max default to 1000, 100, and
infinity respectively.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-playback" />, <xref
      linkend="applikationen-background" /></para>
    </formalpara>
  </section>

  <section id="applikationen-busy">
    <title><code>Busy()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Busy()</code></secondary>
    </indexterm>

    <simpara>Sets the channel as "busy".</simpara>

    <synopsis><command>Busy([<replaceable>timeout</replaceable>])</command></synopsis>

    <simpara>Instructs the channel to indicate busy and waits until the caller
    hangs up or the timeout expires (<emphasis>timeout</emphasis>, in
    seconds).</simpara>

    <simpara>This application indicates a busy state only on the bridged
    channel. Every channel type has its own way of indicating that a device is
    busy. To play an actual busy tone, use
    <code><command>Playtones(busy)</command></code>.</simpara>

    <simpara>Always returns -1.</simpara>

    <programlisting>exten =&gt; 123,1,Playback(vm-sorry)
exten =&gt; 123,n,Playtones(busy)
exten =&gt; 123,n,Busy()</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'Busy' =- 

[Synopsis]
Indicate the Busy condition

[Description]
  Busy([timeout]): This application will indicate the busy condition to
the calling channel. If the optional timeout is specified, the calling channel
will be hung up after the specified number of seconds. Otherwise, this
application will wait until the calling channel hangs up.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-congestion" />, <xref
      linkend="applikationen-progress" />, <xref
      linkend="applikationen-playtones" /></para>
    </formalpara>
  </section>

  <section id="applikationen-callingpres">
    <title><code>CallingPres()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>CallingPres()</code></secondary>
    </indexterm>

    <simpara>Changes the caller ID on an ISDN-PRI channel.</simpara>

    <synopsis><command>CallingPres(<replaceable>presentation</replaceable>)</command></synopsis>

    <simpara>Changes the presentation parameter in the caller ID for calls
    using Q.931 PRI connections. These parameters should be set before the
    call is initiated. The presentation parameter
    <emphasis>presentation</emphasis> defines first whether the called party
    will be sent caller ID information in the first place, and second, whether
    it was verified against a reliable source (screening).</simpara>

    <simpara>This application has been superceded by
    <code>SetCallerPres()</code>, which is easier to use and less dependent on
    Zaptel.</simpara>

    <simpara>This application generates a number based on the presentation and
    screening settings. The meaning of the values themselves is defined in the
    ITU Q.931-Standard as described in the following tables.</simpara>

    <para>Screening is set by bits 1 and 2:<informaltable colsep="0"
        frame="none" rowsep="0">
        <tgroup cols="3">
          <colspec colnum="1" colwidth="30pt" />

          <colspec colnum="2" colwidth="30pt" />

          <thead>
            <row>
              <entry>Bit1</entry>

              <entry>Bit2</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>0</entry>

              <entry>0</entry>

              <entry>The caller ID information was provided by the endpoint
              and no verification was attempted.</entry>
            </row>

            <row>
              <entry>0</entry>

              <entry>1</entry>

              <entry>The caller ID information was provided by the endpoint
              and was successfully verified.</entry>
            </row>

            <row>
              <entry>1</entry>

              <entry>0</entry>

              <entry>The caller ID information was provided by the endpoint
              but verification was unsuccessful.</entry>
            </row>

            <row>
              <entry>1</entry>

              <entry>1</entry>

              <entry>The caller ID information was provided by the
              network.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable></para>

    <para>Presentation is set by bits 6 and 7:<informaltable colsep="0"
        frame="none" rowsep="0">
        <tgroup cols="3">
          <colspec colnum="1" colwidth="30pt" />

          <colspec colnum="2" colwidth="30pt" />

          <thead>
            <row>
              <entry>Bit6</entry>

              <entry>Bit7</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>0</entry>

              <entry>0</entry>

              <entry>Display of caller ID is allowed.</entry>
            </row>

            <row>
              <entry>0</entry>

              <entry>1</entry>

              <entry>Display of caller ID is not allowed.</entry>
            </row>

            <row>
              <entry>1</entry>

              <entry>0</entry>

              <entry>The number is not available because it was not passed by
              an intermediate station.</entry>
            </row>

            <row>
              <entry>1</entry>

              <entry>1</entry>

              <entry>Reserved</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable></para>

    <simpara>The bits 3, 4, 5 and 8 should be zero (0). Note that the bits are
    numbered in descending order, <emphasis>i.e.</emphasis>
    87654321.</simpara>

    <programlisting>; set presentation to:
; presentation allowed                                                    (00000000)
; provided by the network                                                 (00000011)
; ------------------                                                      ----------
; Result: 3 (bitwise AND)                                                 (00000011)
exten =&gt; 123,1,CallingPres(3)
exten =&gt; 123,2,Dial(Zap/g1/1234567)
; set presentation to:
; presentation restricted, blocked by intermediate station                (00100000)
; user provided ID, verified                                              (00000001)
; ------------------                                                      ----------
; Ergebnis: 33 (bitwise AND)          (00100001)
exten =&gt; 124,1,CallingPres(33)
exten =&gt; 124,2,Dial(Zap/g1/1234568)</programlisting>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-setcallerpres" /></para>
    </formalpara>
  </section>

  <section id="applikationen-changemonitor">
    <title><code>ChangeMonitor()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>ChangeMonitor()</code></secondary>
    </indexterm>

    <simpara>Changes the monitoring filename of a channel.</simpara>

    <synopsis><command>ChangeMonitor(<replaceable>filename-prefix</replaceable>)</command></synopsis>

    <simpara>Changes the filename prefix for sound files written while
    recording the channel with <code><command>Monitor()</command></code>. This
    application has no effect if the affected channel is not being
    monitored.</simpara>

    <programlisting>; Monitor channel with a filename prefix of 'audioclip'
exten =&gt; 123,1,Monitor(audioclip)
; Change filename prefix to 'audioclip2'
exten =&gt; 123,n,ChangeMonitor(audioclip2)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'ChangeMonitor' =- 

[Synopsis]
Change monitoring filename of a channel

[Description]
ChangeMonitor(filename_base)
Changes monitoring filename of a channel. Has no effect if the channel is not monitored
The argument is the new filename base to use for monitoring this channel.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-monitor" />, <xref
      linkend="applikationen-stopmonitor" /></para>
    </formalpara>
  </section>

  <section id="applikationen-chanisavail">
    <title><code>ChanIsAvail()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>ChanIsAvail()</code></secondary>
    </indexterm>

    <simpara>Indicates whether the specified channel is available.</simpara>

    <synopsis><command>ChanIsAvail(<replaceable>technology1</replaceable>/<replaceable>resource1</replaceable>[&amp;<replaceable>technology2</replaceable>/<replaceable>resource2</replaceable>...][,<replaceable>options</replaceable>])</command></synopsis>

    <simpara>Verifies that the one or more of the queried channels is
    available, in the order specified. Returns 0 on success or -1 on
    failure.</simpara>

    <simpara>If the <code>s</code> (state) option is given, Asterisk will
    treat the channel as unavailable if it is in use, even if it is capable of
    taking another call. Option <code>j</code> sets priority jumping to
    <emphasis>n</emphasis>+101 if the channel is unavailable.</simpara>

    <note>
      <simpara>The mere fact of a channel being available does not
      automatically mean that it is free for use or that the device on the
      channel will accept a call. That is determined using a
      <code><command>Dial()</command></code> to the channel.</simpara>
    </note>

    <para><code><command>ChanIsAvail()</command></code> sets the following
    channel variables: <variablelist termlength="18">
        <varlistentry>
          <term><code>${AVAILCHAN}</code></term>

          <listitem>
            <simpara>The name of the accessible channel, including the session
            number of the call.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>${AVAILORIGCHAN}</code></term>

          <listitem>
            <simpara>The canonical channel name (<emphasis>i.e.</emphasis>,
            the channel name without session number).</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>${AVAILSTATUS}</code></term>

          <listitem>
            <para>Status code of the channel:<variablelist termlength="24">
                <varlistentry>
                  <term><code>AST_DEVICE_UNKNOWN</code> (0)</term>

                  <listitem>
                    <simpara>Status of the channel is unknown. It is a valid
                    channel, but we don't know about its state.</simpara>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term><code>AST_DEVICE_NOT_INUSE</code> (1)</term>

                  <listitem>
                    <simpara>The channel is not in use.</simpara>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term><code>AST_DEVICE_IN_USE</code> (2)</term>

                  <listitem>
                    <simpara>The channel is in use.</simpara>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term><code>AST_DEVICE_BUSY</code> (3)</term>

                  <listitem>
                    <simpara>The channel is busy.</simpara>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term><code>AST_DEVICE_INVALID</code> (4)</term>

                  <listitem>
                    <simpara>The channel is unknown.</simpara>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term><code>AST_DEVICE_UNAVAILABLE</code> (5)</term>

                  <listitem>
                    <simpara>The channel is not available and not
                    registered.</simpara>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term><code>AST_DEVICE_RINGING</code> (6)</term>

                  <listitem>
                    <simpara>The channel is ringing.</simpara>
                  </listitem>
                </varlistentry>
              </variablelist></para>
          </listitem>
        </varlistentry>
      </variablelist></para>

    <note>
      <simpara>This application does not behave as expected on MGCP
      channels.</simpara>
    </note>

    <programlisting>; Check the availability of Zap/1 and Zap/2:
exten =&gt; 123,1,ChanIsAvail(Zap/1&amp;Zap/2,j)
; As an exception, using priority jumping, because we want to announce
; something to the caller if no channel is available

; at least one channel is available - dial this channel:
exten =&gt; 123,2,NoOp(${AVAILORIGCHAN} is available)
exten =&gt; 123,3,Dial(${AVAILORIGCHAN}/123456)

; if the call goes to priority 102 landen, neither Zap/1 nor Zap/2 is available
exten =&gt; 123,102,Playback(all-channels-busy)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'ChanIsAvail' =- 

[Synopsis]
Check channel availability

[Description]
  ChanIsAvail(Technology/resource[&amp;Technology2/resource2...][|options]): 
This application will check to see if any of the specified channels are
available. The following variables will be set by this application:
  ${AVAILCHAN}     - the name of the available channel, if one exists
  ${AVAILORIGCHAN} - the canonical channel name that was used to create the channel
  ${AVAILSTATUS}   - the status code for the available channel
  Options:
    s - Consider the channel unavailable if the channel is in use at all
    j - Support jumping to priority n+101 if no channel is available</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>
  </section>

  <section id="applikationen-channelredirect">
    <title><code>ChannelRedirect()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>ChannelRedirect()</code></secondary>
    </indexterm>

    <simpara>Redirects a channel to another extension and priority.</simpara>

    <synopsis><command>ChannelRedirect(<replaceable>channel</replaceable>,[<replaceable>context</replaceable>,]<replaceable>extension</replaceable>,<replaceable>priority</replaceable>)</command></synopsis>

    <simpara>Redirects the specified channel to another extension and
    priority.</simpara>

    <para><variablelist termlength="11">
        <varlistentry>
          <term><code>Channel</code></term>

          <listitem>
            <simpara>Name of the channel to be redirected.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>Context</code></term>

          <listitem>
            <simpara>Context to which the channel should be
            redirected.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>Extension</code></term>

          <listitem>
            <simpara>Extension to which the channel should be
            redirected.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>priority</code></term>

          <listitem>
            <simpara>Priority in the new extension.</simpara>
          </listitem>
        </varlistentry>
      </variablelist></para>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'ChannelRedirect' =- 

[Synopsis]
Redirects given channel to a dialplan target.

[Description]
ChannelRedirect(channel|[[context|]extension|]priority):
  Sends the specified channel to the specified extension priority</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>-- in Version 1.2 nicht vorhanden --</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-goto" />, <xref
      linkend="applikationen-transfer" /></para>
    </formalpara>
  </section>

  <section id="applikationen-chanspy">
    <title><code>ChanSpy()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>ChanSpy()</code></secondary>
    </indexterm>

    <simpara>Enables eavesdropping on a channel.</simpara>

    <synopsis><command>ChanSpy([<replaceable>channelprefix</replaceable>[,<replaceable>options</replaceable>]])</command></synopsis>

    <simpara>Allows eavesdropping on a conversation on any specified channel
    (this is different from <code>ZapBarge()</code>/<code>ZapScan()</code>
    which are bound to Zap channels only). Note that this application only
    listens on single channels, rather than the conversation <emphasis>per
    se</emphasis>, even though it does capture incoming and outgoing audio on
    the channel.</simpara>

    <warning>
      <para>Be aware that listening to calls may be subject to freedom of
      information and privacy legislation in your jurisdiction. As a matter of
      professional practice you should know the terms under which it is lawful
      to eavesdrop on telephone calls. In most jurisdictions it is illegal to
      eavesdrop on a call without the knowledge of the participants.</para>
    </warning>

    <simpara>If <emphasis>channelprefix</emphasis> is specified, only channels
    with a name beginning with that string are available for
    listening.</simpara>

    <para><code>Options</code> may be combined:<variablelist termlength="11">
        <varlistentry>
          <term><code>b</code></term>

          <listitem>
            <simpara>(bridged) Restrict to bridged (<emphasis>i.e.</emphasis>
            connected) channels.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>g(<replaceable>grp</replaceable>)</code></term>

          <listitem>
            <simpara>(group) Restrict to channels whose ${SPYGROUP} channel
            variable contains the value
            <code><replaceable>grp</replaceable></code> in a "<code>:</code>"
            (colon) delimited list.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>q</term>

          <listitem>
            <simpara>(quiet) Do not play beep tones (nor announce the channel
            name) when switching channels.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>r([<replaceable>name</replaceable>])</code></term>

          <listitem>
            <para>(record) Record the spying session in a file in the
            <filename>/var/spool/asterisk/monitor/</filename> directory. The
            default filename prefix is <filename>chanspy</filename>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>v[(<replaceable>value</replaceable>)]</code></term>

          <listitem>
            <para>(volume) Set the initial volume. The range of allowed values
            is <code>from -4</code> (quiet) bis <code>4</code> (loud).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>w</code></term>

          <listitem>
            <simpara>(whisper) Activate whisper mode. Allows the user on the
            spying channel to speak to the channel user on the spied-on
            channel, without the remote user hearing. (This option is
            available as of Asterisk 1.4.)</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>W</code></term>

          <listitem>
            <simpara>(private whisper) Private whisper mode. Like
            <code>w</code>, except that the spying channel cannot hear the
            spied-on channel (it's not immediately clear where this would be
            useful, but Asterisk has found myriad applications!)</simpara>
          </listitem>
        </varlistentry>
      </variablelist></para>

    <para>While listening, the following keypad input is
    accepted:<variablelist termlength="6">
        <varlistentry>
          <term><code>#</code></term>

          <listitem>
            <simpara>Increases volume stepwise (from -4 to 4)</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>*</code></term>

          <listitem>
            <simpara>Switches to another channel</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code><replaceable>X..X</replaceable>#</code></term>

          <listitem>
            <simpara>A set of digits of arbitrary length, ended with
            <code>#</code>, is attached to
            <code><replaceable>channelprefix</replaceable></code>. For
            example, if the extension invokes <code>ChanSpy(Agent)</code> and
            the user on the spying channel dials <code>1234#</code>, the
            spying channel will begin spying on the channel
            <code>Agent/1234</code>.</simpara>
          </listitem>
        </varlistentry>
      </variablelist></para>

    <programlisting>; Eavesdrop on an agent:
exten =&gt; 123,1,ChanSpy(Agent)
exten =&gt; 123,n,Hangup()

; Example using g:
; for calls to 0, set SPYGROUP 10005:
exten =&gt; _0.,1,Set(SPYGROUP=10005)
;...
; Listen to channels in SPYGROUP 10005:
exten =&gt; 123,1,ChanSpy(,g(10005))
exten =&gt; 123,n,Hangup()</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'ChanSpy' =- 

[Synopsis]
Listen to a channel, and optionally whisper into it

[Description]
  ChanSpy([chanprefix][|options]): This application is used to listen to the
audio from an Asterisk channel. This includes the audio coming in and
out of the channel being spied on. If the 'chanprefix' parameter is specified,
only channels beginning with this string will be spied upon.
  While spying, the following actions may be performed:
    - Dialing # cycles the volume level.
    - Dialing * will stop spying and look for another channel to spy on.
    - Dialing a series of digits followed by # builds a channel name to append
      to 'chanprefix'. For example, executing ChanSpy(Agent) and then dialing
      the digits '1234#' while spying will begin spying on the channel
      'Agent/1234'.
  Options:
    b             - Only spy on channels involved in a bridged call.
    g(grp)        - Match only channels where their ${SPYGROUP} variable is set to
                    contain 'grp' in an optional : delimited list.
    q             - Don't play a beep when beginning to spy on a channel, or speak the
                    selected channel name.
    r[(basename)] - Record the session to the monitor spool directory. An
                    optional base for the filename may be specified. The
                    default is 'chanspy'.
    v([value])    - Adjust the initial volume in the range from -4 to 4. A
                    negative value refers to a quieter setting.
    w             - Enable 'whisper' mode, so the spying channel can talk to
                    the spied-on channel.
    W             - Enable 'private whisper' mode, so the spying channel can
                    talk to the spied-on channel but cannot listen to that
                    channel.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>5c5,6
&lt; Listen to a channel, and optionally whisper into it
---
&gt; Listen to the audio of an active channel
&gt; 
9c10
&lt; audio from an Asterisk channel. This includes the audio coming in and
---
&gt; audio from an active Asterisk channel. This includes the audio coming in and
12c13
&lt;   While spying, the following actions may be performed:
---
&gt;   While Spying, the following actions may be performed:
17c18
&lt;       the digits '1234#' while spying will begin spying on the channel
---
&gt;       the digits '1234#' while spying will begin spying on the channel,
20,24c21,24
&lt;     b             - Only spy on channels involved in a bridged call.
&lt;     g(grp)        - Match only channels where their ${SPYGROUP} variable is set to
&lt;                     contain 'grp' in an optional : delimited list.
&lt;     q             - Don't play a beep when beginning to spy on a channel, or speak the
&lt;                     selected channel name.
---
&gt;     b - Only spy on channels involved in a bridged call.
&gt;     g(grp) - Match only channels where their ${SPYGROUP} variable is set to
&gt;              'grp'.
&gt;     q - Don't play a beep when beginning to spy on a channel.
28,34c28,29
&lt;     v([value])    - Adjust the initial volume in the range from -4 to 4. A
&lt;                     negative value refers to a quieter setting.
&lt;     w             - Enable 'whisper' mode, so the spying channel can talk to
&lt;                     the spied-on channel.
&lt;     W             - Enable 'private whisper' mode, so the spying channel can
&lt;                     talk to the spied-on channel but cannot listen to that
&lt;                     channel.
---
&gt;     v([value]) - Adjust the initial volume in the range from -4 to 4. A
&gt;                  negative value refers to a quieter setting.</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-extenspy" />, <xref
      linkend="applikationen-zapbarge" />, <xref
      linkend="applikationen-zapscan" />, <xref
      linkend="applikationen-monitor" /></para>
    </formalpara>
  </section>

  <section id="applikationen-congestion">
    <title><code>Congestion()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Congestion()</code></secondary>
    </indexterm>

    <simpara>Indicates congestion (insufficient resources available) on the
    channel.</simpara>

    <synopsis><command>Congestion([<replaceable>timeout</replaceable>])</command></synopsis>

    <simpara>Indicates congestion on the channel and waits until the caller
    hangs up or until the specified timeout <replaceable>timeout</replaceable>
    has expired.</simpara>

    <simpara>This application indicates congestion in the system but does not
    indicate this to the caller. Should you wish to notify the caller, use
    <command><code>Playtones(congestion)</code></command>.</simpara>

    <simpara>Returns -1.</simpara>

    <programlisting>; for Caller ID is 888-555-8701, always signal congestion:
exten =&gt; 123,1,GotoIf($[${CALLERID(num)} = 8885558701]?10)
exten =&gt; 123,n,Playtones(congestion)
exten =&gt; 123,n,Congestion(5)
exten =&gt; 123,n,Hangup()
exten =&gt; 123,10,Dial(Zap/1)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'Congestion' =- 

[Synopsis]
Indicate the Congestion condition

[Description]
  Congestion([timeout]): This application will indicate the congestion
condition to the calling channel. If the optional timeout is specified, the
calling channel will be hung up after the specified number of seconds.
Otherwise, this application will wait until the calling channel hangs up.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>8c8
&lt;   Congestion([timeout]): This application will indicate the congestion
---
&gt;   Congestion([timeout]): This application will indicate the congenstion</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-busy" />, <xref
      linkend="applikationen-progress" />, <xref
      linkend="applikationen-playtones" /></para>
    </formalpara>
  </section>

  <section id="applikationen-continuewhile">
    <title><code>ContinueWhile()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>ContinueWhile()</code></secondary>
    </indexterm>

    <simpara>Returns to the beginning of a while loop.</simpara>

    <synopsis><command>ContinueWhile()</command></synopsis>

    <simpara>The <command><code>ContinueWhile()</code></command> application
    can interrupt a while loop while in progress. Asterisk returns to the
    beginning of the loop and evaluates the condition.</simpara>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'ContinueWhile' =- 

[Synopsis]
Restart a While loop

[Description]
Usage:  ContinueWhile()
Returns to the top of the while loop and re-evaluates the conditional.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>-- nicht in Version 1.2. vorhanden --</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-while" />, <xref
      linkend="applikationen-exitwhile" />, <xref linkend="ael" /></para>
    </formalpara>
  </section>

  <section id="applikationen-controlplayback">
    <title><code>ControlPlayback()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>ControlPlayback()</code></secondary>
    </indexterm>

    <simpara>Plays a sound file with fast forward and rewind
    controls.</simpara>

    <synopsis><command>ControlPlayback(<replaceable>soundfile</replaceable>[,<replaceable>skipms</replaceable>[,<replaceable>ffchar</replaceable>[,<replaceable>rewchar</replaceable>[,<replaceable>stopchar</replaceable>[,<replaceable>pausechar</replaceable>]]]]])</command></synopsis>

    <simpara>Plays the specified file; the caller can manipulate playback by
    pressing the defined keys<code> <replaceable>ffchar</replaceable></code>
    and <code><replaceable>rewchar</replaceable></code>. The defaults are
    "<code>#"</code> (forward) and "*" (backward). Playback is stopped when
    <code><replaceable>stopchar</replaceable></code> is pressed (if it is
    defined). If the file does not exist, the application jumps to priority
    <replaceable>n</replaceable>+101, if it exists.</simpara>

    <simpara>The <replaceable>pausechar</replaceable> option is similar in
    behavior to <replaceable>stopchar</replaceable> except that playback can
    be resumed by pressing <replaceable>pausechar</replaceable> a second
    time.</simpara>

    <simpara>The <code><replaceable>skipms</replaceable></code> defines how
    far forward or backward <command>ControlPlayback()</command> will skip in
    the file when <code><replaceable>ffchar</replaceable></code> or
    <code><replaceable>rewchar</replaceable></code> is pressed.</simpara>

    <simpara>Returns -1 if the caller hangs up during playback.</simpara>

    <programlisting>; play "symphony" to the caller with playback control:
exten =&gt; 123,1,ControlPlayback(symphony,5000,#,*,5,0)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'ControlPlayback' =- 

[Synopsis]
Play a file with fast forward and rewind

[Description]
  ControlPlayback(file[|skipms[|ff[|rew[|stop[|pause[|restart|options]]]]]]]):
This application will play back the given filename. By default, the '*' key
can be used to rewind, and the '#' key can be used to fast-forward.
Parameters:
  skipms  - This is number of milliseconds to skip when rewinding or
            fast-forwarding.
  ff      - Fast-forward when this DTMF digit is received.
  rew     - Rewind when this DTMF digit is received.
  stop    - Stop playback when this DTMF digit is received.
  pause   - Pause playback when this DTMF digit is received.
  restart - Restart playback when this DTMF digit is received.
Options:
  j - Jump to priority n+101 if the requested file is not found.
This application sets the following channel variable upon completion:
  CPLAYBACKSTATUS -  This variable contains the status of the attempt as a text
                     string, one of: SUCCESS | USERSTOPPED | ERROR</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-playback" />, <xref
      linkend="applikationen-background" /></para>
    </formalpara>
  </section>

  <section id="applikationen-datetime">
    <title><code>DateTime()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>DateTime()</code></secondary>
    </indexterm>

    <simpara>Say the current time.</simpara>

    <synopsis><command>DateTime([unixtime[,timezone[,format]]])</command></synopsis>

    <simpara>Says the current time. It is not yet deprecated but is now only
    an alias to <code>SayUnixTime()</code>; see the description there for use
    instructions.</simpara>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-sayunixtime" /></para>
    </formalpara>
  </section>

  <section id="applikationen-dbdel">
    <title><code>DBdel()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>DBdel()</code></secondary>
    </indexterm>

    <simpara>Deletes a key from the Asterisk database (AstDB).</simpara>

    <synopsis><command>DBdel(<replaceable>family/key</replaceable>)</command></synopsis>

    <simpara>Deletes the specified key from the Asterisk database.</simpara>

    <simpara>Returns 0.</simpara>

    <programlisting>exten =&gt; 123,1,Set(DB(test/name)=Richard)    ; save key in AstDB
exten =&gt; 123,n,Set(name=${DB(test/name)})  ; retrieve key
exten =&gt; 123,n,DBdel(test/name)            ; delete key</programlisting>

    <important>
      <simpara><code>DBdel()</code> is deprecated as of Asterisk 1.4; use the
      <code>DB_DELETE()</code> function instead.</simpara>
    </important>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'DBdel' =- 

[Synopsis]
Delete a key from the database

[Description]
  DBdel(family/key): This application will delete a key from the Asterisk
database.
  This application has been DEPRECATED in favor of the DB_DELETE function.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>10d9
&lt;   This application has been DEPRECATED in favor of the DB_DELETE function.</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-dbdeltree" />, <xref
      linkend="funktionen-db" />, <xref
      linkend="funktionen-db_delete" /></para>
    </formalpara>
  </section>

  <section id="applikationen-dbdeltree">
    <title><code>DBdeltree()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>DBdeltree()</code></secondary>
    </indexterm>

    <simpara>Deletes a family or branch from the Asterisk database.</simpara>

    <synopsis>DBdeltree(<replaceable>family</replaceable>[/<replaceable>branch</replaceable>])</synopsis>

    <simpara>Deletes the specified branch from the Asterisk
    database.</simpara>

    <simpara>Returns 0.</simpara>

    <programlisting>; save entries in AstDB:
exten =&gt; 123,1,Set(DB(colors/one)=red)
exten =&gt; 123,n,Set(DB(colors/two)=blue)
; now delete the key family named test
exten =&gt; 123,n,DBdeltree(colors)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'DBdeltree' =- 

[Synopsis]
Delete a family or keytree from the database

[Description]
  DBdeltree(family[/keytree]): This application will delete a family or keytree
from the Asterisk database</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-dbdel" />, <xref
      linkend="funktionen-db" /></para>
    </formalpara>
  </section>

  <section id="applikationen-deadagi">
    <title><code>DeadAGI()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>DeadAGI()</code></secondary>
    </indexterm>

    <simpara>Runs an AGI compliant program on an inactive channel.</simpara>

    <synopsis><command>DeadAGI(<replaceable>program</replaceable>,<replaceable>arguments</replaceable>)</command></synopsis>

    <simpara>Runs an AGI compliant program on an inactive (on hook) channel.
    With AGI (Asterisk Gateway Interface), you can manipulate channels with
    programs written in practically any conceivable language. AGI programs can
    control a channel, play audio, interpret and store DTMF tones; AGI
    programs exchange data with Asterisk on <code>STDIN</code> und
    <code>STDOUT</code>. The specified arguments are passed unadulterated to
    the AGI program.</simpara>

    <simpara>This application was developed for use on inactive (on hook)
    channels, because the standard AGI interface will not work on a channel
    after it is hung up. It is not necessary for the channel to be "dead" at
    the time of execution, however!</simpara>

    <simpara>The command <code><command>show agi</command></code>, entered on
    the CLI, will give a list of the available AGI commands.</simpara>

    <simpara>Returns -1 if the application causes a hang-up, or returns 0 on
    exit without hang-up.</simpara>

    <programlisting>; run AGI on a hung-up channel:
exten =&gt; h,1,DeadAGI(agi-test)</programlisting>

    <important>
      <simpara>The channel will be treated as active as long as the AGI
      program is running. This can have implications for CDRs.</simpara>

      <para>Note also that DeadAGI applications receive a <code>SIGHUP</code>
      signal when the channel is hung up, and it may need to be explicitly
      ignored in your AGI program:<informaltable colsep="none" rowsep="none">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="50pt" />

            <tbody>
              <row>
                <entry>Perl</entry>

                <entry><programlisting>$SIG{HUP} = "IGNORE";</programlisting></entry>
              </row>

              <row>
                <entry>PHP</entry>

                <entry><programlisting>pcntl_signal(SIGHUP, SIG_IGN);</programlisting>(PHP
                must be compiled with <code>--enable-pcntl</code>; it is not
                by default!)</entry>
              </row>

              <row>
                <entry>Ruby</entry>

                <entry><programlisting>trap('SIGHUP','IGNORE')</programlisting></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>

      <simpara>It is also important for the AGI program to stop communicating
      after the hang-up, or it will receive a <code>SIGPIPE</code> signal and
      end (unless the signal is explicitly ignored as in the example
      above).</simpara>
    </important>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'DeadAGI' =- 

[Synopsis]
Executes AGI on a hungup channel

[Description]
  [E|Dead]AGI(command|args): Executes an Asterisk Gateway Interface compliant
program on a channel. AGI allows Asterisk to launch external programs
written in any language to control a telephony channel, play audio,
read DTMF digits, etc. by communicating with the AGI protocol on stdin
and stdout.
  This channel will stop dialplan execution on hangup inside of this
application, except when using DeadAGI.  Otherwise, dialplan execution
will continue normally.
  A locally executed AGI script will receive SIGHUP on hangup from the channel
except when using DeadAGI. This can be disabled by setting the AGISIGHUP channel
variable to "no" before executing the AGI application.
  Using 'EAGI' provides enhanced AGI, with incoming audio available out of band
on file descriptor 3

  Use the CLI command 'agi show' to list available agi commands
  This application sets the following channel variable upon completion:
     AGISTATUS      The status of the attempt to the run the AGI script
                    text string, one of SUCCESS | FAILED | HANGUP</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>13,19c13,15
&lt;   This channel will stop dialplan execution on hangup inside of this
&lt; application, except when using DeadAGI.  Otherwise, dialplan execution
&lt; will continue normally.
&lt;   A locally executed AGI script will receive SIGHUP on hangup from the channel
&lt; except when using DeadAGI. This can be disabled by setting the AGISIGHUP channel
&lt; variable to "no" before executing the AGI application.
&lt;   Using 'EAGI' provides enhanced AGI, with incoming audio available out of band
---
&gt; Returns -1 on hangup (except for DeadAGI) or if application requested
&gt;  hangup, or 0 on non-hangup exit. 
&gt; Using 'EAGI' provides enhanced AGI, with incoming audio available out of band
22,25c18
&lt;   Use the CLI command 'agi show' to list available agi commands
&lt;   This application sets the following channel variable upon completion:
&lt;      AGISTATUS      The status of the attempt to the run the AGI script
&lt;                     text string, one of SUCCESS | FAILED | HANGUP
---
&gt; Use the CLI command 'show agi' to list available agi commands</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-agi" />, <xref
      linkend="applikationen-fastagi" /></para>
    </formalpara>
  </section>

  <section id="applikationen-dial">
    <title><code>Dial()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Dial()</code></secondary>
    </indexterm>

    <simpara>Connects channels.</simpara>

    <synopsis><command>Dial(<replaceable>technology</replaceable>/<replaceable>resource</replaceable>,<replaceable>timeout</replaceable>,<replaceable>options</replaceable>,<replaceable>URL</replaceable>)</command></synopsis>

    <synopsis><command>Dial(<replaceable>technology1</replaceable>/<replaceable>resource1</replaceable>[&amp;<replaceable>tech2</replaceable>/<replaceable>resource2</replaceable>[&amp;<replaceable>...</replaceable>]],<replaceable>timeout</replaceable>,<replaceable>options</replaceable>,<replaceable>URL</replaceable>)</command></synopsis>

    <synopsis><command>Dial(<replaceable>technology</replaceable>/<replaceable>user</replaceable>:<replaceable>password</replaceable>@<replaceable>host</replaceable>/<replaceable>extension</replaceable>,<replaceable>timeout</replaceable>,<replaceable>options</replaceable>)</command></synopsis>

    <simpara>Connects two channels together.<footnote>
        <simpara>Generally, channels of any type supported by Asterisk may be
        connected - for example, IAX, SIP, H.323, Skinny, PRI, FXO, FXS, Local
        ...</simpara>
      </footnote> <code><command>Dial()</command></code> is perhaps the most
    important application in Asterisk. We recommend you read this section
    carefully and more than once if necessary.</simpara>

    <simpara><command>Dial()</command> accepts every valid channel type
    (<emphasis>e.g.</emphasis> SIP, IAX2, H.323, MGCP, Local oder Zap) but the
    allowable parameters are channel-specific; <emphasis>i.e.</emphasis>, what
    parameters a channel requires or will accept depends on the nature of the
    channel technology. For example, a SIP channel will require an IP address
    and user information, whereas a ZAP channel requires a telephone
    number.</simpara>

    <simpara>When a network-based channel type is specified, the parameters
    (such as IP address, user name, password and remote extension) can be
    supplied as options to <command>Dial()</command> or, alternatively, be
    included in a host configuration section in the appropriate
    <filename>.conf</filename> file. If this second approach is used, all the
    required configuration information must be present.</simpara>

    <para>Here's an example:<programlisting>exten =&gt; s,1,Dial(SIP/richard:secret@widgets.biz)</programlisting>This
    extension would accomplish the same thing:<programlisting>exten =&gt; s,1,Dial(SIP/a_SIP_friend)</programlisting>...
    as long as "a_SIP_friend" is defined as a channel in
    <filename>sip.conf</filename>: <programlisting>[a_SIP_friend]
fromuser=richard
password=secret
host=widgets.biz</programlisting></para>

    <para>Sometimes an extension is attached to the address information, as in
    this example:<programlisting>exten =&gt; s,1,Dial(IAX2/user:secret@widgets.biz/500)</programlisting>The
    remote system is asked to connect the call to extension 500 in the
    incoming channel. This extension is not required because the channel
    configuration on the remote system is used, or, alternatively, the call is
    passed to the default <code>s</code> extension in the incoming
    context.</para>

    <simpara>In the end, the remote host decides how the call will be
    processed; all you can do is request special call handling.</simpara>

    <para>If no <code>timeout</code> is specified, the channel will ring
    indefinitely. This behavior is not necessarily undesirable and so it's not
    automatically necessary to set this parameter. Just be aware that
    "indefinite" can end up being a very long time.<footnote>
        <simpara>:-)</simpara>
      </footnote> The <code>timeout</code> is specified in seconds. It always
    follows the device information:<programlisting>exten =&gt; s,1,Dial(IAX2/user:secret@widgets.biz/500,20)</programlisting></para>

    <para>With <code><command>Dial()</command></code>, you can ring multiple
    channels simultaneously. The call is handled on a "first come, first
    served" basis; the first extension to pick up answers the call, and all
    the other extensions stop ringing and become available:<programlisting>exten =&gt; s,1,Dial(SIP/2000&amp;SIP/2001&amp;SIP/2303)</programlisting></para>

    <para>A big part of the power in the
    <command><code>Dial()</code></command> application is in the options,
    which always follow the device and timeout information, like
    so:<programlisting>exten =&gt; s,1,Dial(IAX2/user:secret@widgets.biz/500,60,<replaceable>options</replaceable>)</programlisting></para>

    <para><important>
        <para>If you want to provide options, you still need to provide a
        comma-delimited space for the timeout value even if it is
        empty:</para>
      </important><programlisting>exten =&gt; s,1,Dial(IAX2/user:secret@widgets.biz/500,,<replaceable>options</replaceable>)</programlisting></para>

    <para>Here are the valid options to the
    <code><command>Dial()</command></code> application: <variablelist>
        <?dbfo list-presentation="blocks"?>

        <?dbhtml list-presentation="list"?>

        <varlistentry>
          <term><code>d</code></term>

          <listitem>
            <simpara>Allows the caller to dial another single-digit extension
            while waiting for the current extension to answer
            (<emphasis>e.g.</emphasis>, a caller dials "4" while the phone is
            ringing and the call is immediately passed to the <code>4</code>
            extension. The extension is in the current context unless
            <code>${EXITCONTEXT}</code> is set).</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>t</code></term>

          <listitem>
            <simpara>Blind transfer initiated by the
            <emphasis>called</emphasis> party. Allows the called party to
            transfer the call by pressing the blind transfer key (normally
            "#"). Reinvites are not possible when this option is selected
            because Asterisk must monitor the connection to detect when the
            called party presses the "#" key.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>T</code></term>

          <listitem>
            <simpara>Blind transfer initiated by the
            <emphasis>calling</emphasis> party. Allows the calling party to
            transfer the call by pressing the blind transfer key (normally
            "#"). Reinvites are not possible when this option is selected
            because Asterisk must monitor the connection to detect when the
            called party presses the "#" key.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>w</code></term>

          <listitem>
            <simpara>Allows the <emphasis>called</emphasis> party to start
            recording the call by pressing the <code>automon</code> key
            sequence (as defined in <filename>features.conf</filename>). If
            the <code>TOUCH_MONITOR</code> variable is set, its value is
            passed to <code><command>Monitor()</command></code> as a parameter
            when recording starts. If it is not set, <code>WAV,,m</code> is
            passed to <code><command>Monitor()</command></code>.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>W</code></term>

          <listitem>
            <simpara>Allows the <emphasis>calling</emphasis> party to start
            recording the call by pressing the <code>automon</code> key
            sequence (as defined in
            <filename>features.conf</filename>).</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>f</code></term>

          <listitem>
            <simpara>Sets the caller ID as the number of the line making or
            redirecting the outgoing call. Some PSTNs don't allow IDs from
            extensions other than those assigned to you. For example, if you
            have a PRI, you would use <code>f</code> to overwrite the caller
            ID provided by a SIP extension to that belonging to the outgoing
            Zap channel on the PRI.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>o</code></term>

          <listitem>
            <simpara>Uses the caller ID received on the incoming leg of a call
            as the caller ID for the outgoing leg. This is useful if a call is
            accepted and then transferred; in the normal case, the caller ID
            of the initial recipient is used for the outgoing leg, which can
            be confusing to the ultimate recipient. For example, say Joe calls
            Mary; Mary decides that Joe really needs to speak to Don and
            transfers the call. If option <code>o</code> is set, Don will see
            Joe's number on his display when Mary transfers him, instead of
            Mary's number.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>r</code></term>

          <listitem>
            <simpara>Generate a ringing tone for the
            <emphasis><emphasis>calling</emphasis></emphasis> party. Normally
            Asterisk will generate a ringing tone when it is appropriate.
            Option <code>r</code> forces it to do so no matter the
            circumstance. Sometimes called devices don't provide useful call
            progress information (or none at all) and <code>r</code> is
            needed; however, this can also lead to strange behavior, such as
            initial ringing interrupted by a busy signal.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>m[<replaceable>class</replaceable>]</code></term>

          <listitem>
            <simpara>Plays music to the caller until the call is answered.
            Optionally you can provide the Music-on-Hold class (as defined in
            <filename>musiconhold.conf</filename>).</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>M(<replaceable>x</replaceable>[^<replaceable>arg</replaceable>])</code></term>

          <listitem>
            <para>Runs the macro x when the call is answered, optionally
            passing ^ (caret) separated arguments. The macro may set the
            <code>MACRO_RESULT</code> channel variable to one of the following
            values:<variablelist termlength="12">
                <varlistentry>
                  <term><code>ABORT</code></term>

                  <listitem>
                    <simpara>Hangs up both ends of the call.</simpara>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term><code>CONGESTION</code></term>

                  <listitem>
                    <simpara>Indicates congestion on the line.</simpara>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term><code>BUSY</code></term>

                  <listitem>
                    <simpara>Indicates that the line is busy (and jumps to
                    <replaceable>n</replaceable>+101).</simpara>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term><code>CONTINUE</code></term>

                  <listitem>
                    <simpara>Hangs the called end up and continues in the
                    dialplan.</simpara>
                  </listitem>
                </varlistentry>
              </variablelist></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>GOTO:&lt;<replaceable>context</replaceable>&gt;^&lt;<replaceable>extension</replaceable>&gt;^&lt;<replaceable>priority</replaceable>&gt;</code></term>

          <listitem>
            <simpara>Jumps to the specified point in the dialplan.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>h</code></term>

          <listitem>
            <simpara>Allows the <emphasis>called</emphasis> party to hang up
            by pressing "*".</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>H</code></term>

          <listitem>
            <simpara>Allows the <emphasis>calling</emphasis> party to hang up
            by pressing "*".</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>C</code></term>

          <listitem>
            <simpara>Resets the Call Detail Record (CDR) for this call.
            Normally, the CDR clock is reset from the moment the call is
            answered by Asterisk; if CDRs are being used for billing purposes,
            sometimes it's appropriate to reset the timer when the connection
            between two parties is actually established.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>P[(<replaceable>x</replaceable>)]</code></term>

          <listitem>
            <simpara>Uses the Privacy Manager (sollte verkettet sein) if no
            caller ID is present, where the optional variable
            <code><replaceable>x</replaceable></code> is a family in the
            AstDB. The Privacy Manager asks the caller to enter a 10 digit
            telephone number if no caller ID is provided, providing a simple
            way to screen for telemarketers and solicitors blocking their
            caller ID. See also <code>LookupBlacklist()</code>.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>g</code></term>

          <listitem>
            <simpara>Proceeds in the context when the target channel has been
            hung up.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>G(<replaceable>context</replaceable>^<replaceable>extension</replaceable>^<replaceable>priority</replaceable>)</code></term>

          <listitem>
            <simpara>Drops both channels into the specified
            <replaceable>context</replaceable>,
            <replaceable>extension</replaceable> and
            <replaceable>priority</replaceable> when the call is
            answered.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>A(<replaceable>x</replaceable>)</code></term>

          <listitem>
            <simpara>Plays an announcement to the called party, where
            <replaceable>x</replaceable> is the sound file prefix. For
            example, A(confirm) would play the most efficient version of
            confirm (such as <filename>confirm.gsm</filename>, or
            <filename>confirm.wav</filename>) that can be found in the
            <filename>/var/lib/asterisk/sounds</filename> directory.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>D([<replaceable>called</replaceable>][:<replaceable>calling</replaceable>])</code></term>

          <listitem>
            <simpara>Sends DTMF digits after the call is answered but before
            it is bridged. The <code>called</code> digits are transmitted to
            the called party, the <code>calling</code> digits to the calling
            party. One or both parameters may be set.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>L(<replaceable>x</replaceable>[:<replaceable>y</replaceable>][:<replaceable>z</replaceable>])</code></term>

          <listitem>
            <para>Limits call duration to
            <code><replaceable>x</replaceable></code> milliseconds. At
            <code><replaceable>y</replaceable></code> ms before the maximum
            allowed duration, and thereafter every
            <code><replaceable>z</replaceable></code> ms until the end of the
            call, a warning is given. The <replaceable>x</replaceable> must be
            defined, <replaceable>y</replaceable> and
            <replaceable>z</replaceable> are optional. The behavior can be
            further controlled with the following variables:<variablelist
                termlength="31">
                <?dbfo list-presentation="blocks"?>

                <?dbhtml list-presentation="list"?>

                <varlistentry>
                  <term><code>LIMIT_PLAYAUDIO_CALLER=<replaceable>yes|no</replaceable></code></term>

                  <listitem>
                    <simpara>Sets whether the calling party should hear
                    announcements.</simpara>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term><code>LIMIT_PLAYAUDIO_CALLEE=<replaceable>yes|no</replaceable></code></term>

                  <listitem>
                    <simpara>Sets whether the called party should hear
                    announcements.</simpara>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term><code>LIMIT_TIMEOUT_FILE=<replaceable>filename</replaceable></code></term>

                  <listitem>
                    <simpara>Specifies the sound file to be played after the
                    maximum duration is reached and the call is
                    ended.</simpara>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term><code>LIMIT_CONNECT_FILE=<replaceable>filename</replaceable></code></term>

                  <listitem>
                    <simpara>Specifies the sound file to be played when the
                    call is connected.</simpara>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term><code>LIMIT_WARNING_FILE=<replaceable>filename</replaceable></code></term>

                  <listitem>
                    <simpara>Specifies the sound file to be played for the
                    warning signal when <replaceable>y</replaceable> is
                    set.</simpara>
                  </listitem>
                </varlistentry>
              </variablelist></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>j</code></term>

          <listitem>
            <simpara>Turns priority jumping on (<emphasis>i.e.</emphasis>, the
            call jumps to priority <replaceable>n</replaceable>+101 (where n
            is the current priority) if all the channels respond
            busy).</simpara>

            <simpara>A call may be parked instead of transferred Ein Anruf
            kann auch geparkt werden, statt übermittelt zu werden (was mit
            <code>t</code> oder <code>T</code>-Flag der Fall ist). Anrufe
            werden gewöhnlich geparkt, indem man sie der Extension 700
            übermittelt, aber dieses Verhalten ist in
            <filename>features.conf</filename> konfigurierbar.</simpara>

            <para></para>
          </listitem>
        </varlistentry>
      </variablelist></para>

    <variablelist>
      <varlistentry>
        <term>n</term>

        <listitem>
          <para>Privacy Manager setting. Caller introductions are not to be
          saved in the priv-callerintros directory.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <varlistentry>
        <term>N</term>

        <listitem>
          <para>Privacy Manager setting. Calls are not screened if caller ID
          information is provided.</para>

          <para>Mit dem Enden der <code>Dial()</code>-Anwendung werden die
          folgenden Variablen gesetzt:<variablelist termlength="13">
              <varlistentry>
                <term><code>DIALEDTIME</code></term>

                <listitem>
                  <simpara>Die gesamte Zeit, die von der Ausführung der
                  <code>Dial()</code>-Anwendung an bis zu ihrer Beendigung
                  verstrichen ist.</simpara>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><code>ANSWEREDTIME</code></term>

                <listitem>
                  <simpara>Die gesamte Zeit, die während des Anrufs vergangen
                  ist.</simpara>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><code>DIALSTATUS</code></term>

                <listitem>
                  <para>Der Status des Anrufs, ausgedrückt durch einen der
                  folgenden Werte:<variablelist termlength="13">
                      <varlistentry>
                        <term><code>CHANUNAVAIL</code></term>

                        <listitem>
                          <simpara>Der Channel ist nicht verfügbar.</simpara>
                        </listitem>
                      </varlistentry>

                      <varlistentry>
                        <term><code>CONGESTION</code></term>

                        <listitem>
                          <simpara>Der Channel hat ein Stau-Signal
                          zurückgeliefert, was gewöhnlich die Unfähigkeit der
                          Fertigstellung der Verbindung
                          kennzeichnet.</simpara>
                        </listitem>
                      </varlistentry>

                      <varlistentry>
                        <term><code>NOANSWER</code></term>

                        <listitem>
                          <simpara>Der Channel hat in der durch die
                          Klingel-Timeout-Option gesetzten Frist nicht
                          geantwortet.</simpara>
                        </listitem>
                      </varlistentry>

                      <varlistentry>
                        <term><code>BUSY</code></term>

                        <listitem>
                          <simpara>Der angerufene Channel ist momentan
                          belegt.</simpara>
                        </listitem>
                      </varlistentry>

                      <varlistentry>
                        <term><code>ANSWER</code></term>

                        <listitem>
                          <simpara>Der Channel hat den Anruf
                          beantwortet.</simpara>
                        </listitem>
                      </varlistentry>

                      <varlistentry>
                        <term><code>CANCEL</code></term>

                        <listitem>
                          <simpara>Der Anruf wurde abgebrochen.</simpara>
                        </listitem>
                      </varlistentry>
                    </variablelist></para>
                </listitem>
              </varlistentry>
            </variablelist></para>
        </listitem>
      </varlistentry>
    </variablelist>

    <simpara>When <command>Dial()</command> completes, the following variables
    are set:</simpara>

    <variablelist>
      <varlistentry>
        <term>DIALEDTIME</term>

        <listitem>
          <para>The total elapsed time from the time the Dial() command is
          executed until its completion.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>ANSWEREDTIME</term>

        <listitem>
          <para>The time elapsed during conversation.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>NOANSWER</term>

        <listitem>
          <para>The channel was not answered before the ring timeout had
          expired.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>BUSY</term>

        <listitem>
          <para>The called channel is currently busy.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>ANSWER</term>

        <listitem>
          <para>The called channel was answered.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>CANCEL</term>

        <listitem>
          <para>The call was interrupted before it could be completed.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <programlisting>; dial a number on Zap channel 2, let it ring a maximum of 10 seconds:
exten =&gt; 123,1,Dial(Zap/2/1234567,10,tTm)
; otherwise proceed in the dialplan:
exten =&gt; 123,n,Playback(sorry)
exten =&gt; 123,n,Hangup()

; dial extension 500 over IAX on host widgets.biz:
exten =&gt; 123,1,Dial(IAX/username:password@widgets.biz/500)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'Dial' =- 

[Synopsis]
Place a call and connect to the current channel

[Description]
  Dial(Technology/resource[&amp;Tech2/resource2...][|timeout][|options][|URL]):
This application will place calls to one or more specified channels. As soon
as one of the requested channels answers, the originating channel will be
answered, if it has not already been answered. These two channels will then
be active in a bridged call. All other channels that were requested will then
be hung up.
  Unless there is a timeout specified, the Dial application will wait
indefinitely until one of the called channels answers, the user hangs up, or
if all of the called channels are busy or unavailable. Dialplan executing will
continue if no requested channels can be called, or if the timeout expires.

  This application sets the following channel variables upon completion:
    DIALEDTIME   - This is the time from dialing a channel until when it
                   is disconnected.
    ANSWEREDTIME - This is the amount of time for actual call.
    DIALSTATUS   - This is the status of the call:
                   CHANUNAVAIL | CONGESTION | NOANSWER | BUSY | ANSWER | CANCEL
                   DONTCALL | TORTURE
  For the Privacy and Screening Modes, the DIALSTATUS variable will be set to
DONTCALL if the called party chooses to send the calling party to the 'Go Away'
script. The DIALSTATUS variable will be set to TORTURE if the called party
wants to send the caller to the 'torture' script.
  This application will report normal termination if the originating channel
hangs up, or if the call is bridged and either of the parties in the bridge
ends the call.
  The optional URL will be sent to the called party if the channel supports it.
  If the OUTBOUND_GROUP variable is set, all peer channels created by this
application will be put into that group (as in Set(GROUP()=...).

  Options:
    A(x) - Play an announcement to the called party, using 'x' as the file.
    C    - Reset the CDR for this call.
    d    - Allow the calling user to dial a 1 digit extension while waiting for
           a call to be answered. Exit to that extension if it exists in the
           current context, or the context defined in the EXITCONTEXT variable,
           if it exists.
    D([called][:calling]) - Send the specified DTMF strings *after* the called
           party has answered, but before the call gets bridged. The 'called'
           DTMF string is sent to the called party, and the 'calling' DTMF
           string is sent to the calling party. Both parameters can be used
           alone.
    f    - Force the callerid of the *calling* channel to be set as the
           extension associated with the channel using a dialplan 'hint'.
           For example, some PSTNs do not allow CallerID to be set to anything
           other than the number assigned to the caller.
    g    - Proceed with dialplan execution at the current extension if the
           destination channel hangs up.
    G(context^exten^pri) - If the call is answered, transfer the calling party to
           the specified priority and the called party to the specified priority+1.
           Optionally, an extension, or extension and context may be specified. 
           Otherwise, the current extension is used. You cannot use any additional
           action post answer options in conjunction with this option.
    h    - Allow the called party to hang up by sending the '*' DTMF digit.
    H    - Allow the calling party to hang up by hitting the '*' DTMF digit.
    i    - Asterisk will ignore any forwarding requests it may receive on this
           dial attempt.
    j    - Jump to priority n+101 if all of the requested channels were busy.
    L(x[:y][:z]) - Limit the call to 'x' ms. Play a warning when 'y' ms are
           left. Repeat the warning every 'z' ms. The following special
           variables can be used with this option:
           * LIMIT_PLAYAUDIO_CALLER   yes|no (default yes)
                                      Play sounds to the caller.
           * LIMIT_PLAYAUDIO_CALLEE   yes|no
                                      Play sounds to the callee.
           * LIMIT_TIMEOUT_FILE       File to play when time is up.
           * LIMIT_CONNECT_FILE       File to play when call begins.
           * LIMIT_WARNING_FILE       File to play as warning if 'y' is defined.
                                      The default is to say the time remaining.
    m([class]) - Provide hold music to the calling party until a requested
           channel answers. A specific MusicOnHold class can be
           specified.
    M(x[^arg]) - Execute the Macro for the *called* channel before connecting
           to the calling channel. Arguments can be specified to the Macro
           using '^' as a delimeter. The Macro can set the variable
           MACRO_RESULT to specify the following actions after the Macro is
           finished executing.
           * ABORT        Hangup both legs of the call.
           * CONGESTION   Behave as if line congestion was encountered.
           * BUSY         Behave as if a busy signal was encountered. This will also
                          have the application jump to priority n+101 if the
                          'j' option is set.
           * CONTINUE     Hangup the called party and allow the calling party
                          to continue dialplan execution at the next priority.
           * GOTO:&lt;context&gt;^&lt;xexten&gt;^&lt;priority&gt; - Transfer the call to the
                          specified priority. Optionally, an extension, or
                          extension and priority can be specified.
           You cannot use any additional action post answer options in conjunction
           with this option. Also, pbx services are not run on the peer (called) channel,
           so you will not be able to set timeouts via the TIMEOUT() function in this macro.
    n    - This option is a modifier for the screen/privacy mode. It specifies
           that no introductions are to be saved in the priv-callerintros
           directory.
    N    - This option is a modifier for the screen/privacy mode. It specifies
           that if callerID is present, do not screen the call.
    o    - Specify that the CallerID that was present on the *calling* channel
           be set as the CallerID on the *called* channel. This was the
           behavior of Asterisk 1.0 and earlier.
    O([x]) - "Operator Services" mode (Zaptel channel to Zaptel channel
             only, if specified on non-Zaptel interface, it will be ignored).
             When the destination answers (presumably an operator services
             station), the originator no longer has control of their line.
             They may hang up, but the switch will not release their line
             until the destination party hangs up (the operator). Specified
             without an arg, or with 1 as an arg, the originator hanging up
             will cause the phone to ring back immediately. With a 2 specified,
             when the "operator" flashes the trunk, it will ring their phone
             back.
    p    - This option enables screening mode. This is basically Privacy mode
           without memory.
    P([x]) - Enable privacy mode. Use 'x' as the family/key in the database if
           it is provided. The current extension is used if a database
           family/key is not specified.
    r    - Indicate ringing to the calling party. Pass no audio to the calling
           party until the called channel has answered.
    S(x) - Hang up the call after 'x' seconds *after* the called party has
           answered the call.
    t    - Allow the called party to transfer the calling party by sending the
           DTMF sequence defined in features.conf.
    T    - Allow the calling party to transfer the called party by sending the
           DTMF sequence defined in features.conf.
    w    - Allow the called party to enable recording of the call by sending
           the DTMF sequence defined for one-touch recording in features.conf.
    W    - Allow the calling party to enable recording of the call by sending
           the DTMF sequence defined for one-touch recording in features.conf.
    k    - Allow the called party to enable parking of the call by sending
           the DTMF sequence defined for call parking in features.conf.
    K    - Allow the calling party to enable parking of the call by sending
           the DTMF sequence defined for call parking in features.conf.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>62,63d61
&lt;     i    - Asterisk will ignore any forwarding requests it may receive on this
&lt;            dial attempt.
95,96c93
&lt;            with this option. Also, pbx services are not run on the peer (called) channel,
&lt;            so you will not be able to set timeouts via the TIMEOUT() function in this macro.
---
&gt;            with this option.
105,114d101
&lt;     O([x]) - "Operator Services" mode (Zaptel channel to Zaptel channel
&lt;              only, if specified on non-Zaptel interface, it will be ignored).
&lt;              When the destination answers (presumably an operator services
&lt;              station), the originator no longer has control of their line.
&lt;              They may hang up, but the switch will not release their line
&lt;              until the destination party hangs up (the operator). Specified
&lt;              without an arg, or with 1 as an arg, the originator hanging up
&lt;              will cause the phone to ring back immediately. With a 2 specified,
&lt;              when the "operator" flashes the trunk, it will ring their phone
&lt;              back.
132,135d118
&lt;     k    - Allow the called party to enable parking of the call by sending
&lt;            the DTMF sequence defined for call parking in features.conf.
&lt;     K    - Allow the calling party to enable parking of the call by sending
&lt;            the DTMF sequence defined for call parking in features.conf.</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-retrydial" /></para>
    </formalpara>
  </section>

  <section id="applikationen-dictate">
    <title><code>Dictate()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Dictate()</code></secondary>
    </indexterm>

    <simpara>Virtual dictation machine</simpara>

    <synopsis><command>Dictate([<replaceable>path</replaceable>[,<replaceable>filename</replaceable>]])</command></synopsis>

    <simpara>Starts a virtual dictation machine. The options define the base
    directory (default: <filename>/var/spool/asterisk/dictate/</filename>) and
    (numerical) filename. The files are recorded in <code>raw</code>
    format.</simpara>

    <para>The user can control dictation with these keys:<variablelist
        termlength="3">
        <varlistentry>
          <term><code>0</code></term>

          <listitem>
            <simpara>Help</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>1</code></term>

          <listitem>
            <simpara>Switches between playback and record modes</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>*</code></term>

          <listitem>
            <simpara>Pause / continue</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>#</code></term>

          <listitem>
            <simpara>Select file / enter new file name
            (<emphasis>e.g.</emphasis> <code>1234#</code>)</simpara>
          </listitem>
        </varlistentry>
      </variablelist>In playback mode:<variablelist termlength="3">
        <varlistentry>
          <term><code>2</code></term>

          <listitem>
            <simpara>Switches the playback speed by increments (1x, 2x, 3x,
            4x)</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>7</code></term>

          <listitem>
            <simpara>Jumps back a set time interval</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>8</code></term>

          <listitem>
            <simpara>Jumps forward a set time interval</simpara>
          </listitem>
        </varlistentry>
      </variablelist>In record mode:<variablelist termlength="3">
        <varlistentry>
          <term><code>8</code></term>

          <listitem>
            <simpara>Erase recording and start over</simpara>
          </listitem>
        </varlistentry>
      </variablelist></para>

    <programlisting>; Take dictation:
exten =&gt; 123,1,Dictate()</programlisting>

    <simpara>To provide very system user her own dictation machine, you might
    set the path to
    <filename>/var/spool/asterisk/dictate/${EXTEN}</filename>.</simpara>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'Dictate' =- 

[Synopsis]
Virtual Dictation Machine

[Description]
  Dictate([&lt;base_dir&gt;[|&lt;filename&gt;]])
Start dictation machine using optional base dir for files.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>8c8
&lt;   Dictate([&lt;base_dir&gt;[|&lt;filename&gt;]])
---
&gt;   Dictate([&lt;base_dir&gt;])</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-record" /></para>
    </formalpara>
  </section>

  <section id="applikationen-directory">
    <title><code>Directory()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Directory()</code></secondary>
    </indexterm>

    <simpara>Provides a directory of users or user voicemail box numbers (for
    more on system directories and Dial-by-Name, see <xref
    linkend="voicemail-telefonbuch" />).</simpara>

    <synopsis><command>Directory(<replaceable>voicemail-context</replaceable>[,<replaceable>dialplan-context</replaceable>[,<replaceable>options</replaceable>]])</command></synopsis>

    <simpara>Lets callers search a directory by the user's name. The list of
    names and extensions is configured in <filename>voicemail.conf</filename>.
    The <emphasis>voicemail-context</emphasis> parameter is
    required.</simpara>

    <simpara>The dialplan-context defines the context to be used when dialing
    the user's extension. If this is not provided, voicemail-context is
    assumed. The only option currently accepted is <code>f</code>, which
    allows dialing by first name.</simpara>

    <simpara>If the user dials "0" (zero) and the extension <code>o</code>
    exists in the current context, the call goes to this extension. Likewise,
    pressing "*" sends the call to the extension a, if it exists. This
    behavior is similar to that found in <code>Voicemail()</code>.</simpara>

    <simpara>Returns 0 unless the caller hangs up.</simpara>

    <programlisting>exten =&gt; *,1,Directory(default,incoming)
exten =&gt; #,1,Directory(default,incoming,f)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'Directory' =- 

[Synopsis]
Provide directory of voicemail extensions

[Description]
  Directory(vm-context[|dial-context[|options]]): This application will present
the calling channel with a directory of extensions from which they can search
by name. The list of names and corresponding extensions is retrieved from the
voicemail configuration file, voicemail.conf.
  This application will immediately exit if one of the following DTMF digits are
received and the extension to jump to exists:
    0 - Jump to the 'o' extension, if it exists.
    * - Jump to the 'a' extension, if it exists.

  Parameters:
    vm-context   - This is the context within voicemail.conf to use for the
                   Directory.
    dial-context - This is the dialplan context to use when looking for an
                   extension that the user has selected, or when jumping to the
                   'o' or 'a' extension.

  Options:
    e - In addition to the name, also read the extension number to the
        caller before presenting dialing options.
    f - Allow the caller to enter the first name of a user in the directory
        instead of using the last name.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>25,26d24
&lt;     e - In addition to the name, also read the extension number to the
&lt;         caller before presenting dialing options.</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><filename>voicemail.conf</filename></para>
    </formalpara>
  </section>

  <section id="applikationen-disa">
    <title><code>DISA()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>DISA()</code></secondary>
    </indexterm>

    <simpara>Direct Inward System Access lets outside callers enter the system
    and provides them with an internal dial tone.</simpara>

    <synopsis>DISA(<replaceable>password</replaceable>[,<replaceable>context</replaceable>[,<replaceable>callerid</replaceable>[,<replaceable>mailbox</replaceable>[@<replaceable>voicemail-context</replaceable>]]]])</synopsis>

    <synopsis>DISA(<replaceable>password-file</replaceable>[,<replaceable>callerid</replaceable>[,<replaceable>mailbox</replaceable>[@<replaceable>voicemail-context</replaceable>]]])</synopsis>

    <simpara>Provides an internal dial tone to outside callers such that they
    can make calls as though calling from an internal extension. Upon hearing
    the dial tone, an access code must be entered followed by the "#" key. If
    it is correct, the caller hears another dial tone; this is the system dial
    tone and the caller can now dial and initiate calls.</simpara>

    <caution>
      <para>This type of access represents a serious and real security risk
      and should be planned and considered carefully before use, if it must be
      used at all!</para>
    </caution>

    <simpara>The <replaceable>password</replaceable> option is a numeric
    access code that must be entered in order for the caller to be able to
    make calls out. Following this particular syntax, all the users that call
    in will use the same access code. If you want to allow unsecured access,
    enter the string "<code>no-password</code>" instead of an actual
    password.</simpara>

    <simpara>The <replaceable>context</replaceable> option specifies the
    context in which the initiated call will be placed. If it is not provided,
    <code><command>DISA()</command></code> assumes the context named
    <code>disa</code>.</simpara>

    <simpara>The <emphasis>callerid</emphasis> option sets the mailbox number
    (and the optional <emphasis>voicemail-context</emphasis>) of a mailbox. If
    the mailbox contains new messages the caller will hear a stuttered dial
    tone to indicate this.</simpara>

    <simpara>Alternatively, you may use password-file to define multiple
    access passwords. Each line of this file can contain either an access code
    or a combination of an access code and a context, separated by the "|"
    (pipe) character. If no context is specified, <code>disa</code> is
    assumed.</simpara>

    <simpara>If the caller successfully authenticates with a valid access
    code, <command>DISA()</command> will start the call in the specified
    context.</simpara>

    <programlisting>; Allow outside callers to dial 800 numbers, provided they know the
; password (1234). Set the caller ID so that the call appears to be
; coming from inside the company:
[incoming]
exten =&gt; 123,1,DISA(1234,disa,Widgets Inc &lt;212-555-3412&gt;)
[disa]
exten =&gt; _0800XXXXXXXX,1,Dial(Zap/4/${EXTEN})</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'DISA' =- 

[Synopsis]
DISA (Direct Inward System Access)

[Description]
DISA(&lt;numeric passcode&gt;[|&lt;context&gt;]) or DISA(&lt;filename&gt;)
The DISA, Direct Inward System Access, application allows someone from 
outside the telephone switch (PBX) to obtain an "internal" system 
dialtone and to place calls from it as if they were placing a call from 
within the switch.
DISA plays a dialtone. The user enters their numeric passcode, followed by
the pound sign (#). If the passcode is correct, the user is then given
system dialtone on which a call may be placed. Obviously, this type
of access has SERIOUS security implications, and GREAT care must be
taken NOT to compromise your security.

There is a possibility of accessing DISA without password. Simply
exchange your password with "no-password".

    Example: exten =&gt; s,1,DISA(no-password|local)

Be aware that using this compromises the security of your PBX.

The arguments to this application (in extensions.conf) allow either
specification of a single global passcode (that everyone uses), or
individual passcodes contained in a file. It also allows specification
of the context on which the user will be dialing. If no context is
specified, the DISA application defaults the context to "disa".
Presumably a normal system will have a special context set up
for DISA use with some or a lot of restrictions. 

The file that contains the passcodes (if used) allows specification
of either just a passcode (defaulting to the "disa" context, or
passcode|context on each line of the file. The file may contain blank
lines, or comments starting with "#" or ";". In addition, the
above arguments may have |new-callerid-string appended to them, to
specify a new (different) callerid to be used for this call, for
example: numeric-passcode|context|"My Phone" &lt;(234) 123-4567&gt; or 
full-pathname-of-passcode-file|"My Phone" &lt;(234) 123-4567&gt;.  Last
but not least, |mailbox[@context] may be appended, which will cause
a stutter-dialtone (indication "dialrecall") to be used, if the
specified mailbox contains any new messages, for example:
numeric-passcode|context||1234 (w/a changing callerid).  Note that
in the case of specifying the numeric-passcode, the context must be
specified if the callerid is specified also.

If login is successful, the application looks up the dialed number in
the specified (or default) context, and executes it if found.
If the user enters an invalid extension and extension "i" (invalid) 
exists in the context, it will be used. Also, if you set the 5th argument
to 'NOANSWER', the DISA application will not answer initially.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>8c8
&lt; DISA(&lt;numeric passcode&gt;[|&lt;context&gt;]) or DISA(&lt;filename&gt;)
---
&gt; DISA(&lt;numeric passcode&gt;[|&lt;context&gt;]) or disa(&lt;filename&gt;)
28c28
&lt; individual passcodes contained in a file. It also allows specification
---
&gt; individual passcodes contained in a file. It also allow specification
52,53c52
&lt; exists in the context, it will be used. Also, if you set the 5th argument
&lt; to 'NOANSWER', the DISA application will not answer initially.
---
&gt; exists in the context, it will be used.</screen></para>
      </formalpara>
    </note>
  </section>

  <section id="applikationen-dumpchan">
    <title><code>DumpChan()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>DumpChan()</code></secondary>
    </indexterm>

    <simpara>Prints information about the calling channel on the
    console.</simpara>

    <synopsis><command>DumpChan([<replaceable>min_verbose_level</replaceable>])</command></synopsis>

    <simpara>Shows information about the calling channel and the contents of
    all the channel variables. If <replaceable>min_verbose_level</replaceable>
    is set, only messages at the same or higher verbosity level are
    printed.</simpara>

    <simpara>Returns 0.</simpara>

    <programlisting>exten =&gt; 123,1,Answer()
exten =&gt; 123,n,DumpChan()
exten =&gt; 123,n,Background(enter-ext-of-person)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'DumpChan' =- 

[Synopsis]
Dump Info About The Calling Channel

[Description]
   DumpChan([&lt;min_verbose_level&gt;])
Displays information on channel and listing of all channel
variables. If min_verbose_level is specified, output is only
displayed when the verbose level is currently set to that number
or greater.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-noop" />, <xref
      linkend="applikationen-log" />, <xref
      linkend="applikationen-verbose" /></para>
    </formalpara>
  </section>

  <section id="applikationen-eagi">
    <title><code>EAGI()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>EAGI()</code></secondary>
    </indexterm>

    <simpara>Calls an AGI-compliant application.</simpara>

    <synopsis><command>EAGI(<replaceable>program</replaceable>[,<replaceable>arguments</replaceable>])</command></synopsis>

    <simpara>(Similar to <code><command>AGI()</command></code>,
    <command><code>FastAGI()</code></command>,
    <command><code>DeadAGI()</code></command>)</simpara>

    <simpara>Runs an Asterisk Gateway Interface compliant program called
    <code>program</code> on the current channel. AGI scripts or programs can
    be implemented in almost any conceivable language (e.g. Perl, PHP) and may
    be used to manipulate the channel, play sound files, interpret DTMF tones,
    and so on. Asterisk communicates with the AGI program over
    <filename>stdin</filename> and <filename>stdout</filename>. The arguments
    are passed directly to the AGI program at execution time.</simpara>

    <simpara>The AGI program must be flagged as executable in the filesystem.
    The path is relative to the Asterisk AGI directory, which is at
    <filename>/var/lib/asterisk/agi-bin/</filename> by default.</simpara>

    <simpara>To run AGI programs on inactive channels (as in the case of an
    <code>h</code>-extension, where the channel is on-hook), used
    <code><command>DeadAGI()</command></code> instead. To run AGI programs on
    another server in the network, use
    <code><command>FastAGI()</command></code>.</simpara>

    <simpara>Use <code><command>EAGI()</command></code> when you need access
    to the incoming audio stream. The incoming audio stream is provided on
    file descriptor 3.</simpara>

    <simpara><footnote>
        <para>a reminder: 0: stdin, 1: stdout, 2:stderr. File descriptor 3 is
        freely assignable.</para>
      </footnote>Returns -1 on hang-up or if the AGI program requests a
    hang-up; returns 0 if no hang-up is requested.</simpara>

    <programlisting>; call my AGI script:
exten =&gt; 123,1,AGI(agi-script)
exten =&gt; 123,n,EAGI(eagi-script)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'EAGI' =- 

[Synopsis]
Executes an EAGI compliant application

[Description]
  [E|Dead]AGI(command|args): Executes an Asterisk Gateway Interface compliant
program on a channel. AGI allows Asterisk to launch external programs
written in any language to control a telephony channel, play audio,
read DTMF digits, etc. by communicating with the AGI protocol on stdin
and stdout.
  This channel will stop dialplan execution on hangup inside of this
application, except when using DeadAGI.  Otherwise, dialplan execution
will continue normally.
  A locally executed AGI script will receive SIGHUP on hangup from the channel
except when using DeadAGI. This can be disabled by setting the AGISIGHUP channel
variable to "no" before executing the AGI application.
  Using 'EAGI' provides enhanced AGI, with incoming audio available out of band
on file descriptor 3

  Use the CLI command 'agi show' to list available agi commands
  This application sets the following channel variable upon completion:
     AGISTATUS      The status of the attempt to the run the AGI script
                    text string, one of SUCCESS | FAILED | HANGUP</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>13,19c13,15
&lt;   This channel will stop dialplan execution on hangup inside of this
&lt; application, except when using DeadAGI.  Otherwise, dialplan execution
&lt; will continue normally.
&lt;   A locally executed AGI script will receive SIGHUP on hangup from the channel
&lt; except when using DeadAGI. This can be disabled by setting the AGISIGHUP channel
&lt; variable to "no" before executing the AGI application.
&lt;   Using 'EAGI' provides enhanced AGI, with incoming audio available out of band
---
&gt; Returns -1 on hangup (except for DeadAGI) or if application requested
&gt;  hangup, or 0 on non-hangup exit. 
&gt; Using 'EAGI' provides enhanced AGI, with incoming audio available out of band
22,25c18
&lt;   Use the CLI command 'agi show' to list available agi commands
&lt;   This application sets the following channel variable upon completion:
&lt;      AGISTATUS      The status of the attempt to the run the AGI script
&lt;                     text string, one of SUCCESS | FAILED | HANGUP
---
&gt; Use the CLI command 'show agi' to list available agi commands</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>Siehe</title>

      <para><xref linkend="applikationen-agi" />.</para>
    </formalpara>
  </section>

  <section id="applikationen-echo">
    <title><code>Echo()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Echo()</code></secondary>
    </indexterm>

    <simpara>Repeats incoming audio to the caller.</simpara>

    <synopsis><command>Echo()</command></synopsis>

    <simpara>Takes any incoming audio and returns it on the same channel. This
    application is used primarily for troubleshooting and testing of delay
    (latency) and sound quality on VoIP connections. The caller can end the
    call by pressing "#".</simpara>

    <simpara>Returns 0 if the caller ends the call with <code>"#"</code> or -1
    if the caller hangs up.</simpara>

    <programlisting>exten =&gt; 123,1,Echo()
exten =&gt; 123,n,Playback(vm-goodbye)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'Echo' =- 

[Synopsis]
Echo audio, video, or DTMF back to the calling party

[Description]
  Echo(): This application will echo any audio, video, or DTMF frames read from
the calling channel back to itself. If the DTMF digit '#' is received, the
application will exit.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>5c5
&lt; Echo audio, video, or DTMF back to the calling party
---
&gt; Echo audio read back to the user
8,10c8,10
&lt;   Echo(): This application will echo any audio, video, or DTMF frames read from
&lt; the calling channel back to itself. If the DTMF digit '#' is received, the
&lt; application will exit.
---
&gt;   Echo():  Echo audio read from channel back to the channel. 
&gt; User can exit the application by either pressing the '#' key, 
&gt; or hanging up.</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-milliwatt" /></para>
    </formalpara>
  </section>

  <section id="applikationen-endwhile">
    <title><code>EndWhile()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>EndWhile()</code></secondary>
    </indexterm>

    <simpara>Ends a while loop.</simpara>

    <synopsis><command>EndWhile()</command></synopsis>

    <simpara>Returns to the previously called
    <command><code>While()</code></command> statement. For a complete
    description of while loops in Asterisk, see <xref
    linkend="applikationen-while" />.</simpara>

    <programlisting>exten =&gt; 123,1,Answer()
exten =&gt; 123,n,Set(i=1)
exten =&gt; 123,n,While($[${i} &lt; 5])
exten =&gt; 123,n,SayNumber(${i})
exten =&gt; 123,n,Set(i=$[${i} + 1])
exten =&gt; 123,n,EndWhile()
exten =&gt; 123,n,Hangup()</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'EndWhile' =- 

[Synopsis]
End a while loop

[Description]
Usage:  EndWhile()
Return to the previous called While</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>5c5
&lt; End a while loop
---
&gt; End A While Loop
10a11
&gt; </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-while" />, <xref
      linkend="applikationen-gotoif" /></para>
    </formalpara>
  </section>

  <section id="applikationen-exec">
    <title><code>Exec()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Exec()</code></secondary>
    </indexterm>

    <simpara>Führt eine Asterisk-Anwendung dynamisch aus.</simpara>

    <synopsis>Exec(<replaceable>application</replaceable>(<replaceable>arguments</replaceable>))</synopsis>

    <simpara>Allows the execution of an arbitrary dialplan application, even
    if this application is not hardcoded into the dialplan. Returns the value
    returned by the application or -2 if the application cannot be found. The
    <replaceable>arguments</replaceable> are passed to the called
    application.</simpara>

    <simpara>This applications enables the calling of applications out of a
    database or other external source.</simpara>

    <programlisting>exten =&gt; 123,1,Set(app=SayDigits(12345))
exten =&gt; 123,2,Exec(${app})</programlisting>

    <important>
      <para>A negative return value will mean that execution of the dialplan
      ends. If this is not desired, <code>use
      <command>TryExec()</command></code>.</para>
    </important>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'Exec' =- 

[Synopsis]
Executes dialplan application

[Description]
Usage: Exec(appname(arguments))
  Allows an arbitrary application to be invoked even when not
hardcoded into the dialplan.  If the underlying application
terminates the dialplan, or if the application cannot be found,
Exec will terminate the dialplan.
  To invoke external applications, see the application System.
  If you would like to catch any error instead, see TryExec.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>5c5
&lt; Executes dialplan application
---
&gt; Executes internal application
10,14c10,12
&lt; hardcoded into the dialplan.  If the underlying application
&lt; terminates the dialplan, or if the application cannot be found,
&lt; Exec will terminate the dialplan.
&lt;   To invoke external applications, see the application System.
&lt;   If you would like to catch any error instead, see TryExec.
---
&gt; hardcoded into the dialplan. To invoke external applications
&gt; see the application System. Returns whatever value the
&gt; app returns or a non-zero value if the app cannot be found.</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-execif" />, <xref
      linkend="applikationen-tryexec" />, <xref
      linkend="applikationen-system" /></para>
    </formalpara>
  </section>

  <section id="applikationen-execif">
    <title><code>ExecIf()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>ExecIf()</code></secondary>
    </indexterm>

    <simpara>Executes an Asterisk application under specific
    conditions.</simpara>

    <synopsis><command>ExecIf(<replaceable>expression</replaceable>,<replaceable>application</replaceable>,<replaceable>arguments</replaceable>)</command></synopsis>

    <simpara>If <replaceable>expression</replaceable> evaluates to
    <code>true</code>, the defined <replaceable>application</replaceable> is
    executed with the provided <replaceable>arguments</replaceable>, and the
    return value is returned. See <filename>doc/README.variables</filename>
    (1.2) / <filename>doc/channelvariables.txt</filename> (1.4) for more
    information about standard expressions for Asterisk.</simpara>

    <simpara>If expression evaluates to <code>false</code>, execution moves to
    the next priority in the extension.</simpara>

    <programlisting>exten =&gt; 123,1,ExecIf($[${CALLERID(num)} = 101],SayDigits,123)
exten =&gt; 123,n,SayDigits(678)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'ExecIf' =- 

[Synopsis]
Executes dialplan application, conditionally

[Description]
Usage:  ExecIF (&lt;expr&gt;|&lt;app&gt;|&lt;data&gt;)
If &lt;expr&gt; is true, execute and return the result of &lt;app&gt;(&lt;data&gt;).
If &lt;expr&gt; is true, but &lt;app&gt; is not found, then the application
will return a non-zero value.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>5c5
&lt; Executes dialplan application, conditionally
---
&gt; Conditional exec
12d11
&lt; </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-exec" /></para>
    </formalpara>
  </section>

  <section id="applikationen-execiftime">
    <title><code>ExecIfTime()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>ExecIfTime()</code></secondary>
    </indexterm>

    <simpara>Executes an application based on the current time.</simpara>

    <synopsis><command>ExecIf(<replaceable>times</replaceable>|<replaceable>daysofweek</replaceable>|<replaceable>daysofmonth</replaceable>|<replaceable>months</replaceable>?<replaceable>application</replaceable>[,<replaceable>arguments</replaceable>])</command></synopsis>

    <simpara>If the current time is in the time window defined,
    <replaceable>application</replaceable> is executed with
    <replaceable>arguments</replaceable> and the result returned. The time
    window is defined the same way as it is for <code>include</code> (see
    <xref linkend="include-zeitgesteuert" />), <code>GotoIfTime()</code> (see
    <xref linkend="applikationen-gotoiftime" />) or <code>IFTIME()</code> (see
    <xref linkend="funktionen-iftime" />).</simpara>

    <simpara>If the current time is not in the time window defined, execution
    continues in the next priority.</simpara>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'ExecIfTime' =- 

[Synopsis]
Conditional application execution based on the current time

[Description]
  ExecIfTime(&lt;times&gt;|&lt;weekdays&gt;|&lt;mdays&gt;|&lt;months&gt;?appname[|appargs]):
This application will execute the specified dialplan application, with optional
arguments, if the current time matches the given time specification.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>10c10,12
&lt; arguments, if the current time matches the given time specification.
---
&gt; arguments, if the current time matches the given time specification. Further
&gt; information on the time speicification can be found in examples illustrating
&gt; how to do time-based context includes in the dialplan.</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-exec" />, <xref
      linkend="applikationen-execif" />, <xref
      linkend="applikationen-gotoiftime" />, <xref
      linkend="funktionen-iftime" /></para>
    </formalpara>
  </section>

  <section id="applikationen-exitwhile">
    <title><code>ExitWhile()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>ExitWhile()</code></secondary>
    </indexterm>

    <simpara>Exits a while loop, irrespective of whether its condition has
    been satisfied.</simpara>

    <synopsis><command>ExitWhile()</command></synopsis>

    <simpara>With <code><command>ExitWhile()</command></code> you can
    interrupt further execution whether or not the while condition has been
    satisfied.</simpara>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'ExitWhile' =- 

[Synopsis]
End a While loop

[Description]
Usage:  ExitWhile()
Exits a While loop, whether or not the conditional has been satisfied.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>-- in Version 1.2 nicht vorhanden --</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-while" />, <xref
      linkend="applikationen-endwhile" /></para>
    </formalpara>
  </section>

  <section id="applikationen-extenspy">
    <title><code>ExtenSpy()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>ExtenSpy()</code></secondary>
    </indexterm>

    <simpara>Eavesdrop on a channel attached to a specific extension and
    whisper to it if desired.</simpara>

    <synopsis>ExtenSpy(<replaceable>extension</replaceable>[@<replaceable>context</replaceable>][,<replaceable>options</replaceable>])</synopsis>

    <simpara><code>ExtenSpy()</code> can listen to incoming and outgoing audio
    on channels used by the specified extension. The options:</simpara>

    <variablelist termlength="11">
      <varlistentry>
        <term><code>b</code></term>

        <listitem>
          <simpara>Only listens to channels which belong to a bridged
          call.</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>g(<replaceable>grp</replaceable>)</code></term>

        <listitem>
          <simpara>Only listens to channels where the channel variable
          <code>${SPYGROUP}</code> is set to <code>grp</code>.
          <code>${SPYGROUP}</code> can contain a <code>:</code> separated list
          of values.</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>q</code></term>

        <listitem>
          <simpara>Do not play a tone or say the channel name when listening
          starts on a channel.</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>r([<replaceable>name</replaceable>])</code></term>

        <listitem>
          <simpara>Records the listening session to the spool directory. A
          filename may be specified if desired; <filename>chanspy</filename>
          is the default.</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>v([<replaceable>value</replaceable>])</code></term>

        <listitem>
          <simpara>Sets the initial volume. The value may be between -4 and
          4.</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>w</code></term>

        <listitem>
          <simpara>Enables "whisper" mode. Lets the spying channel talk to the
          spyed-on channel.</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>W</code></term>

        <listitem>
          <simpara>Enables "private whisper mode". The "spying" channel can
          whisper to the spyed-on channel, but cannot listen.</simpara>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>The following key controls are available while
    listening:<variablelist termlength="6">
        <varlistentry>
          <term><code>#</code></term>

          <listitem>
            <simpara>Stepwise volume adjustment (-4 to 4)</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>*</code></term>

          <listitem>
            <simpara>Switch to another channel</simpara>
          </listitem>
        </varlistentry>
      </variablelist></para>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'ExtenSpy' =- 

[Synopsis]
Listen to a channel, and optionally whisper into it

[Description]
  ExtenSpy(exten[@context][|options]): This application is used to listen to the
audio from an Asterisk channel. This includes the audio coming in and
out of the channel being spied on. Only channels created by outgoing calls for the
specified extension will be selected for spying. If the optional context is not
supplied, the current channel's context will be used.
  While spying, the following actions may be performed:
    - Dialing # cycles the volume level.
    - Dialing * will stop spying and look for another channel to spy on.
  Options:
    b             - Only spy on channels involved in a bridged call.
    g(grp)        - Match only channels where their ${SPYGROUP} variable is set to
                    contain 'grp' in an optional : delimited list.
    q             - Don't play a beep when beginning to spy on a channel, or speak the
                    selected channel name.
    r[(basename)] - Record the session to the monitor spool directory. An
                    optional base for the filename may be specified. The
                    default is 'chanspy'.
    v([value])    - Adjust the initial volume in the range from -4 to 4. A
                    negative value refers to a quieter setting.
    w             - Enable 'whisper' mode, so the spying channel can talk to
                    the spied-on channel.
    W             - Enable 'private whisper' mode, so the spying channel can
                    talk to the spied-on channel but cannot listen to that
                    channel.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>-- in Version 1.2 nicht vorhanden --</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-chanspy" />, <xref
      linkend="applikationen-zapbarge" />, <xref
      linkend="applikationen-zapscan" />, <xref
      linkend="applikationen-monitor" /></para>
    </formalpara>
  </section>

  <section id="applikationen-externalivr">
    <title><code>ExternalIVR()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>ExternalIVR()</code></secondary>
    </indexterm>

    <simpara>Start an external IVR application.</simpara>

    <synopsis><command>ExternalIVR(<replaceable>shell-command</replaceable>[,<replaceable>arg1</replaceable>[,<replaceable>arg2</replaceable>[,<replaceable>...</replaceable>]]])</command></synopsis>

    <simpara>Forks a process and starts an external IVR<footnote>
        <simpara>Interactive Voice Response</simpara>
      </footnote> application. This application then receives all DTMF events
    and responds accordingly. The application receives notification if the
    channel is hung up but must shutdown on its own. The protocol for this
    interface is described in
    <filename>doc/externalivr.txt</filename>.</simpara>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'ExternalIVR' =- 

[Synopsis]
Interfaces with an external IVR application

[Description]
  ExternalIVR(command[|arg[|arg...]]): Forks an process to run the supplied command,
and starts a generator on the channel. The generator's play list is
controlled by the external application, which can add and clear entries
via simple commands issued over its stdout. The external application
will receive all DTMF events received on the channel, and notification
if the channel is hung up. The application will not be forcibly terminated
when the channel is hung up.
See doc/externalivr.txt for a protocol specification.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>15c15
&lt; See doc/externalivr.txt for a protocol specification.
---
&gt; See doc/README.externalivr for a protocol specification.</screen></para>
      </formalpara>
    </note>
  </section>

  <section id="applikationen-fastagi">
    <title><code>FastAGI()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>FastAGI()</code></secondary>
    </indexterm>

    <simpara>Calls an AGI-compliant application over a network
    connection.</simpara>

    <synopsis><command>FastAGI(agi://<replaceable>hostname</replaceable>[:<replaceable>port</replaceable>][/<replaceable>script</replaceable>],<replaceable>arguments</replaceable>)</command></synopsis>

    <simpara>(Similar to <command>AGI()</command>,
    <command>DeadAGI()</command>, <command>EAGI()</command>)</simpara>

    <simpara>Runs an Asterisk Gateway Interface compliant program on the
    current channel, but calls the application from another host on the
    network. The intent is to help distribute the load of processor-intensive
    AGI scripts or programs to remote servers and reduce start-up latency of
    those programs (a FastAGI script can be started before it is actually
    needed, much like a FastCGI script on a web server). </simpara>

    <simpara><code>FastAGI()</code> attempts to connect directly to a running
    FastAGI program listening for connections on the specified
    <replaceable>port</replaceable> on the server
    <replaceable>hostname</replaceable>. The default port is 4573 if it is not
    specified. If <replaceable>script</replaceable> is defined, it is used to
    populate the variable <code>agi_network_script</code> and passed to the
    FastAGI program. The <replaceable>arguments </replaceable>are also passed
    to the program.</simpara>

    <simpara>A sample FastAGI script can be found at
    <filename>agi/fastagi-test</filename>. Use this is a starting point for
    writing your own FastAGI applications.</simpara>

    <simpara>Returns -1, if the application ends and requests a hang-up;
    returns 0 if it ends without requesting a hang-up.</simpara>

    <programlisting>; Connect to the sample FastAGI program "fastagi-test",
; which must nevertheless be running on the local machine:
exten =&gt; 123,1,Answer()
exten =&gt; 123,n,FastAGI(agi://localhost/fastagi-test)

; Connect to the FastAGI script "test" on the host "testbox"
; at port 9000 and pass parameter "123":
exten =&gt; 124,1,Answer()
exten =&gt; 124,n,FastAGI(agi://testbox:9000/test,123)</programlisting>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-agi" />, <xref
      linkend="applikationen-deadagi" /></para>
    </formalpara>
  </section>

  <section id="applikationen-festival">
    <title><code>Festival()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Festival()</code></secondary>
    </indexterm>

    <simpara>Uses the free Festival text-to-speech (TTS) engine to read text
    to the caller.</simpara>

    <synopsis><command>Festival(<replaceable>text</replaceable>[,<replaceable>keys</replaceable>])</command></synopsis>

    <simpara>Connects to the locally running Festival server (which must be
    installed separately), sends it the specified text and plays the resulting
    audio back to the caller. If <replaceable>keys</replaceable> are defined,
    pressing of the defined keys will interrupt playback and return the value
    of the key depressed; if <code>any</code> is provided as the value to
    <replaceable>keys</replaceable>, all keys will be recognized and the call
    will be passed to the appropriate extension in the dialplan.</simpara>

    <simpara>Festival must be started <emphasis>before</emphasis> Asterisk,
    and the channel must be answered with
    <code><command>Answer()</command></code>, in order for this application to
    work..</simpara>

    <programlisting>exten =&gt; 123,1,Answer()
exten =&gt; 123,n,Festival('Hello World',#)</programlisting>

    <para>As an alternative to the application
    <command><code>Festival()</code></command>, you may also use the
    <code><command>System()</command></code> command to call Festival's
    command-line program<command> text2wave</command> and play back the
    resulting audio stream with <command><code>Background()</code></command>
    or <command><code>Playback()</code></command>, like so (for example only;
    pay attention to pathnames!):<programlisting>exten =&gt; 123,1,Answer()
exten =&gt; 123,n,System(echo 'Hello World' | text2wave -o sound.wav -otype wav -)
exten =&gt; 123,n,Background(sound)</programlisting></para>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'Festival' =- 

[Synopsis]
Say text to the user

[Description]
  Festival(text[|intkeys]):  Connect to Festival, send the argument, get back the waveform,play it to the user, allowing any given interrupt keys to immediately terminate and return
the value, or 'any' to allow any number back (useful in dialplan)</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><filename>contrib/README.festival</filename></para>
    </formalpara>
  </section>

  <section id="applikationen-flash">
    <title><code>Flash()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Flash()</code></secondary>
    </indexterm>

    <simpara>Performs a "flash hook" on a Zap channel.</simpara>

    <synopsis><command>Flash()</command></synopsis>

    <simpara>Performs a flash on a Zap channel.</simpara>

    <sidebar>
      <simpara>A "flash" (also called a "switch-hook-flash", "flash hook" or
      "link") is simply a short depressing of the hook switch on an analog
      telephone for between 80 and 500 milliseconds (depending on the
      carrier), used primarily as a signalling method to provide feature
      control for simple analog telephone sets (such as for call waiting,
      three-way calling, call transfer and similar services).</simpara>
    </sidebar>

    <simpara>Returns 0 upon success, or -1 if the channel is not a
    Zap-Channel.</simpara>

    <programlisting>exten =&gt; 123,1,Flash()</programlisting>

    <para>If an outgoing line supports flash-transfer (usually an extra
    service), you might use it on a Zap channel like so:<programlisting>[macro-flash-transfer]
exten =&gt; s,1,Playback(transfer)
exten =&gt; s,n,Flash()
exten =&gt; s,n,Wait(1)
exten =&gt; s,n,SendDTMF(${ARG1})
exten =&gt; s,n,Wait(1)
exten =&gt; s,n,Hangup()

[outside-extensions]
; Transfer incoming calls on extension 6001 to the outside number (514)5554138:
exten =&gt; 6001,1,Macro(flash-transfer,5145554138)</programlisting>Sometimes
    it is necessary to adjust the flash duration; ask your carrier for the
    specification in your area. This can be done in
    <filename>zapata.conf</filename> with a parameter,
    <emphasis>e.g.</emphasis> <code>flash=200</code> (the value is in
    milliseconds).</para>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'Flash' =- 

[Synopsis]
Flashes a Zap Trunk

[Description]
  Flash(): Sends a flash on a zap trunk.  This is only a hack for
people who want to perform transfers and such via AGI and is generally
quite useless oths application will only work on Zap trunks.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>
  </section>

  <section id="applikationen-followme">
    <title><code>FollowMe()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>FollowMe()</code></secondary>
    </indexterm>

    <simpara>Follow-Me/Find-Me functionality.</simpara>

    <synopsis><command>FollowMe(<replaceable>followMeID</replaceable>,<replaceable>options</replaceable>)</command></synopsis>

    <simpara>Read the configuration file <filename>followme.conf</filename>
    for a complete explanation.</simpara>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'FollowMe' =- 

[Synopsis]
Find-Me/Follow-Me application

[Description]
  FollowMe(followmeid|options):
This application performs Find-Me/Follow-Me functionality for the caller
as defined in the profile matching the &lt;followmeid&gt; parameter in
followme.conf. If the specified &lt;followmeid&gt; profile doesn't exist in
followme.conf, execution will be returned to the dialplan and call
execution will continue at the next priority.

  Options:
    s    - Playback the incoming status message prior to starting the follow-me step(s)
    a    - Record the caller's name so it can be announced to the callee on each step
    n    - Playback the unreachable status message if we've run out of steps to reach the
           or the callee has elected not to be reachable.
Returns -1 on hangup</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>-- in Version 1.2 nicht vorhanden --</screen></para>
      </formalpara>
    </note>
  </section>

  <section id="applikationen-forkcdr">
    <title><code>ForkCDR()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>ForkCDR()</code></secondary>
    </indexterm>

    <simpara>Generates an additional CDR in the current call.</simpara>

    <synopsis><command>ForkCDR()</command></synopsis>

    <simpara>Generates an additional CDR beginning from the moment the
    ForkCDR() command is called. Used for the purpose of distinguishing
    between total call duration and actual conversation duration for billing
    purposes. Option v will pass all the CDR variables to the new
    CDR.</simpara>

    <programlisting>exten =&gt; 123,n,ForkCDR()</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'ForkCDR' =- 

[Synopsis]
Forks the Call Data Record

[Description]
  ForkCDR([options]):  Causes the Call Data Record to fork an additional
cdr record starting from the time of the fork call
If the option 'v' is passed all cdr variables will be passed along also.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-nocdr" />, <xref
      linkend="applikationen-resetcdr" /></para>
    </formalpara>
  </section>

  <section id="applikationen-getcpeid">
    <title><code>GetCPEID()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>GetCPEID()</code></secondary>
    </indexterm>

    <simpara>Retrieve the CPE-ID (Customer Premises Equipment ID) of an
    ADSI-capable telephone.</simpara>

    <synopsis><command>GetCPEID()</command></synopsis>

    <simpara>Retrieves the CPE-ID and additional information, displaying it on
    the Asterisk CLI. This information is often needed to properly configure
    <filename>zapata.conf</filename> to support ADSI features.</simpara>

    <simpara>Returns -1 on hang-up.</simpara>

    <programlisting>exten =&gt; 123,1,GetCPEID()</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'GetCPEID' =- 

[Synopsis]
Get ADSI CPE ID

[Description]
  GetCPEID: Obtains and displays ADSI CPE ID and other information in order
to properly setup zapata.conf for on-hook operations.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-adsiprog" />,
      <filename>adsi.conf</filename>, <filename>zapata.conf</filename></para>
    </formalpara>
  </section>

  <section id="applikationen-gosub">
    <title><code>Gosub()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Gosub()</code></secondary>
    </indexterm>

    <simpara>Jumps to the specified priority, extension and context and allows
    return.</simpara>

    <synopsis><command>Gosub([[<replaceable>context</replaceable>,]<replaceable>extension</replaceable>,]<replaceable>priorität</replaceable>)</command></synopsis>

    <synopsis><command>Gosub(<replaceable>named_priority</replaceable>)</command></synopsis>

    <simpara>Like <code><command>Goto()</command></code> but allows the
    dialplan subroutine to return with
    <command><code>Return()</code></command>.</simpara>

    <simpara>Returns 0, or -1 if the target is invalid.</simpara>

    <programlisting>exten =&gt; 123,1,Gosub(set-cid)
exten =&gt; 123,n,Dial(SIP/${EXTEN})

exten =&gt; 123,10(set-cid),Set(CALLERID(all)=Widgets Inc &lt;(212-555-3412&gt;)
exten =&gt; 123,n,Return()</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'Gosub' =- 

[Synopsis]
Jump to label, saving return address

[Description]
Gosub([[context|]exten|]priority)
  Jumps to the label specified, saving the return address.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-gosubif" />, <xref
      linkend="applikationen-goto" />, <xref
      linkend="applikationen-gotoif" />, <xref
      linkend="applikationen-return" />, <xref
      linkend="applikationen-macro" /></para>
    </formalpara>
  </section>

  <section id="applikationen-gosubif">
    <title><code>GosubIf()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>GosubIf()</code></secondary>
    </indexterm>

    <simpara>Jumps to the specified priority if a condition is satisfied and
    allows return.</simpara>

    <synopsis><command>GosubIf(<replaceable>condition</replaceable>?<replaceable>labeliftrue</replaceable>:<replaceable>labeliffalse</replaceable>)</command></synopsis>

    <simpara>Jumps to the specified priority if a condition is satisfied
    (similar to <command><code>GotoIf()</code></command> ) but allows the
    subroutine to return with
    <command><code>Return()</code></command>.</simpara>

    <simpara>Returns 0 or -1 if the target is invalid.</simpara>

    <programlisting>exten =&gt; telcid,1,Set(CALLERID(all)=Widgets &lt;212-555-3412&gt;)
exten =&gt; telcid,n,Return()
exten =&gt; faxcid,1,Set(CALLERID(all)=Widgets &lt;212-555-3412&gt;)
exten =&gt; faxcid,n,Return()

exten =&gt; _0.,1,GosubIf($[${CHANNEL:4:2} = 43]?faxcid,1:telcid,1)
exten =&gt; _0.,n,Dial(${TRUNK}/${EXTEN:1},,T)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'GosubIf' =- 

[Synopsis]
Conditionally jump to label, saving return address

[Description]
GosubIf(condition?labeliftrue[:labeliffalse])
  If the condition is true, then jump to labeliftrue.  If false, jumps to
labeliffalse, if specified.  In either case, a jump saves the return point
in the dialplan, to be returned to with a Return.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>5c5
&lt; Conditionally jump to label, saving return address
---
&gt; Jump to label, saving return address</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-gosub" />, <xref
      linkend="applikationen-goto" />, <xref
      linkend="applikationen-gotoif" />, <xref
      linkend="applikationen-return" />, <xref
      linkend="applikationen-macro" /></para>
    </formalpara>
  </section>

  <section id="applikationen-goto">
    <title><code>Goto()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Goto()</code></secondary>
    </indexterm>

    <simpara>Jumps to a specified priority, extension and context.</simpara>

    <synopsis><command>Goto([[<replaceable>context</replaceable>,]<replaceable>extension</replaceable>,]<replaceable>priority</replaceable>)</command></synopsis>

    <synopsis><command>Goto(<replaceable>named_priority</replaceable>)</command></synopsis>

    <simpara>Hands the currently active channel to the specified priority (and
    optionally, extension and context).</simpara>

    <simpara>Optionally, a named priority may be specified to access a
    labelled priority. Named priorities work only in the current
    extension.</simpara>

    <simpara>Always returns 0, even if the target is invalid.</simpara>

    <programlisting>exten =&gt; 123,1,Answer()
exten =&gt; 123,2,Set(COUNT=1)
exten =&gt; 123,3,SayNumber(${COUNT})
exten =&gt; 123,4,Set(COUNT=$[ ${COUNT} + 1 ])
exten =&gt; 123,5,Goto(3)

; das gleiche mit einer benannten Priorität:
exten =&gt; 124,1,Answer()
exten =&gt; 124,2,Set(COUNT=1)
exten =&gt; 124,3(announcement),SayNumber(${COUNT})
exten =&gt; 124,4,Set(COUNT=$[ ${COUNT} + 1 ])
exten =&gt; 124,5,Goto(announcement)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'Goto' =- 

[Synopsis]
Jump to a particular priority, extension, or context

[Description]
  Goto([[context|]extension|]priority): This application will cause the
calling channel to continue dialplan execution at the specified priority.
If no specific extension, or extension and context, are specified, then this
application will jump to the specified priority of the current extension.
  If the attempt to jump to another location in the dialplan is not successful,
then the channel will continue at the next priority of the current extension.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-gotoif" />, <xref
      linkend="applikationen-gotoiftime" />, <xref
      linkend="applikationen-gosub" />, <xref
      linkend="applikationen-gosubif" />, <xref
      linkend="applikationen-macro" /></para>
    </formalpara>
  </section>

  <section id="applikationen-gotoif">
    <title><code>GotoIf()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>GotoIf()</code></secondary>
    </indexterm>

    <simpara>Jumps to a specified priority, extension and context if a
    condition is satisfied.</simpara>

    <synopsis><command>GotoIf(<replaceable>condition</replaceable>?<replaceable>labeliftrue</replaceable>:<replaceable>labeliffalse</replaceable>)</command></synopsis>

    <simpara>Hands the currently active channel to the priority specified by
    <replaceable>labeliftrue</replaceable> if the condition is true, or to the
    priority specified in <replaceable>labeliffalse</replaceable> if the
    condition is false. Either <replaceable>labeliftrue</replaceable> or
    <replaceable>labeliffalse</replaceable> may be omitted (in which case
    execution continues with the next priority) but not both! You must include
    the colon delimiter (:).</simpara>

    <para>In this case, a priority can be:<itemizedlist>
        <listitem>
          <simpara>a single priority, <emphasis>e.g.</emphasis>
          <code>10</code></simpara>
        </listitem>

        <listitem>
          <simpara>an extension and a priority, <emphasis>e.g.</emphasis>
          <code>123,10</code></simpara>
        </listitem>

        <listitem>
          <simpara>a context, extension and priority,
          <emphasis>e.g.</emphasis> <code>incoming,123,10</code></simpara>
        </listitem>

        <listitem>
          <simpara>a named priority in the same extension,
          <emphasis>e.g.</emphasis> <code>ok</code></simpara>
        </listitem>
      </itemizedlist></para>

    <programlisting>exten =&gt; 123,1,GotoIf($[ ${test} = 5 ]?ok:no)
exten =&gt; 123,10(ok),Playback(tt-monkeys)
exten =&gt; 123,20(no),Playback(tt-weasels)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'GotoIf' =- 

[Synopsis]
Conditional goto

[Description]
  GotoIf(condition?[labeliftrue]:[labeliffalse]): This application will cause
the calling channel to jump to the specified location in the dialplan based on
the evaluation of the given condition. The channel will continue at
'labeliftrue' if the condition is true, or 'labeliffalse' if the condition is
false. The labels are specified with the same syntax as used within the Goto
application.  If the label chosen by the condition is omitted, no jump is
performed, but execution continues with the next priority in the dialplan.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-goto" />, <xref
      linkend="applikationen-gotoiftime" />, <xref
      linkend="applikationen-gosub" />, <xref
      linkend="applikationen-gosubif" />, <xref
      linkend="applikationen-macro" /></para>
    </formalpara>
  </section>

  <section id="applikationen-gotoiftime">
    <title><code>GotoIfTime()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>GotoIfTime()</code></secondary>
    </indexterm>

    <simpara>Jumps to the specified priority if the time condition is
    met.</simpara>

    <synopsis><command>GotoIfTime(<replaceable>times</replaceable>,<replaceable>daysofweek</replaceable>,<replaceable>daysofmonth</replaceable>,<replaceable>months</replaceable>?[[<replaceable>context</replaceable>,]<replaceable>extension</replaceable>,]<replaceable>priority</replaceable>)</command></synopsis>

    <simpara>Jumps to the specified priority if the current time falls within
    the specified time window. Each element may be defined with a "*" (always)
    or a <code>"-"</code> (range).</simpara>

    <para>Die Parameter zu dieser Anwendung sind: <variablelist
        termlength="15">
        <varlistentry>
          <term><code>times</code></term>

          <listitem>
            <simpara>Time interval, in 24 hour format with hours and minutes,
            <emphasis>e.g.</emphasis> <code>9:00-17:00</code></simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>daysofweek</code></term>

          <listitem>
            <simpara>Weekdays (<code>mon</code>, <code>tue</code>,
            <code>wed</code>, <code>thu</code>, <code>fri</code>,
            <code>sat</code>, <code>sun</code>), <emphasis>e.g.</emphasis>
            <code>mon-fri</code></simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>Monatstag</code></term>

          <listitem>
            <simpara>Days of the month (1-31), <emphasis>e.g.</emphasis>
            <code>1-15</code></simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>Monat</code></term>

          <listitem>
            <simpara>Months of the year (<code>jan</code>, <code>feb</code>,
            <code>mar</code>, <code>apr</code>, <code>mai</code>,
            <code>jun</code>, <code>jul</code>, <code>aug</code>,
            <code>sep</code>, <code>oct</code>, <code>nov</code>,
            <code>dec</code>), <emphasis>e.g.</emphasis>
            <code>apr-oct</code></simpara>
          </listitem>
        </varlistentry>
      </variablelist></para>

    <programlisting>; During business hours, jump to incoming-open context.
; We are open Monday to Friday from 9:00 to 18:00 (9 a.m. to 6 p.m.):
exten =&gt; s,1,GotoIfTime(09:00-17:59,mon-fri,*,*?incoming-open,s,1)
; Also Saturdays from 9 to 12:
exten =&gt; s,n,GotoIfTime(09:00-11:59,sat,*,*?incoming-open,s,1)
; After hours go to incoming-closed:
exten =&gt; s,n,Goto(incoming-closed,s,1)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'GotoIfTime' =- 

[Synopsis]
Conditional Goto based on the current time

[Description]
  GotoIfTime(&lt;times&gt;|&lt;weekdays&gt;|&lt;mdays&gt;|&lt;months&gt;?[[context|]exten|]priority):
This application will have the calling channel jump to the specified location
in the dialplan if the current time matches the given time specification.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>9,10c9,12
&lt; This application will have the calling channel jump to the specified location
&lt; in the dialplan if the current time matches the given time specification.
---
&gt; This application will have the calling channel jump to the speicified location
&gt; int the dialplan if the current time matches the given time specification.
&gt; Further information on the time specification can be found in examples
&gt; illustrating how to do time-based context includes in the dialplan.</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-gotoif" />, <xref
      linkend="applikationen-execiftime" />, <xref
      linkend="funktionen-iftime" /></para>
    </formalpara>
  </section>

  <section id="applikationen-hangup">
    <title><code>Hangup()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Hangup()</code></secondary>
    </indexterm>

    <simpara>Hangs up the active channel.</simpara>

    <synopsis><command>Hangup()</command></synopsis>

    <simpara>Hangs up the active channel unconditionally.</simpara>

    <simpara>Returns -1.</simpara>

    <programlisting>exten =&gt; 123,1,Answer()
exten =&gt; 123,n,Playback(vm-goodbye)
exten =&gt; 123,n,Hangup()</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'Hangup' =- 

[Synopsis]
Hang up the calling channel

[Description]
  Hangup([causecode]): This application will hang up the calling channel.
If a causecode is given the channel's hangup cause will be set to the given
value.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>8,10c8
&lt;   Hangup([causecode]): This application will hang up the calling channel.
&lt; If a causecode is given the channel's hangup cause will be set to the given
&lt; value.
---
&gt;   Hangup(): This application will hang up the calling channel.</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-answer" /></para>
    </formalpara>
  </section>

  <section id="applikationen-iax2provision">
    <title><code>IAX2Provision()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>IAX2Provision()</code></secondary>
    </indexterm>

    <simpara>Provision a calling IAXy device, optionally using the specified
    template.</simpara>

    <synopsis><command>IAX2Provision([<replaceable>template</replaceable>])</command></synopsis>

    <simpara>Provisions a calling IAXy device with
    <replaceable>template</replaceable>. If no template is used, the default
    is used. IAXy templates are defined in
    <filename>iaxprov.conf</filename>.</simpara>

    <simpara>Returns 0 on success or -1 on failure.</simpara>

    <programlisting>exten =&gt; 123,1,IAX2Provision(default)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'IAX2Provision' =- 

[Synopsis]
Provision a calling IAXy with a given template

[Description]
  IAX2Provision([template]): Provisions the calling IAXy (assuming
the calling entity is in fact an IAXy) with the given template or
default if one is not specified.  Returns -1 on error or 0 on success.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>
  </section>

  <section id="applikationen-importvar">
    <title><code>ImportVar()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>ImportVar()</code></secondary>
    </indexterm>

    <simpara>Sets a variable with the contents of a channel variable from
    another channel.</simpara>

    <synopsis><command>ImportVar(<replaceable>newVariable</replaceable>=<replaceable>channel</replaceable>,<replaceable>variable</replaceable>)</command></synopsis>

    <simpara>Sets the variable
    <code><replaceable>newVariable</replaceable></code> to the value contained
    in <code><replaceable>variable</replaceable></code> in the specified
    channel. If <code><replaceable>newVariable</replaceable></code> begins
    with "<code>_"</code>, single inheritance is used; if it begins with
    <code>"__"</code>, unlimited inheritance is used.</simpara>

    <programlisting>; import Caller-ID from channel Zap/1:
exten =&gt; 123,1,Answer()
exten =&gt; 123,n,ImportVar(cid=Zap/1,CALLERID)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'ImportVar' =- 

[Synopsis]
Import a variable from a channel into a new variable

[Description]
  ImportVar(newvar=channelname|variable): This application imports a variable
from the specified channel (as opposed to the current one) and stores it as
a variable in the current channel (the channel that is calling this
application). Variables created by this application have the same inheritance
properties as those created with the Set application. See the documentation for
Set for more information.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-set" /></para>
    </formalpara>
  </section>

  <section id="applikationen-log">
    <title><code>Log()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Log()</code></secondary>
    </indexterm>

    <simpara>Sends a specified message to the specified log level.</simpara>

    <synopsis><command>Log(<replaceable>level</replaceable>,<replaceable>message</replaceable>)</command></synopsis>

    <simpara>Delivers a specified message to a defined log level.</simpara>

    <variablelist termlength="11">
      <varlistentry>
        <term><code>level</code></term>

        <listitem>
          <simpara>One of the following target levels: <code>ERROR</code>,
          <code>WARNING</code>, <code>NOTICE</code>, <code>DEBUG</code>,
          <code>VERBOSE</code>, <code>DTMF</code></simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>message</code></term>

        <listitem>
          <simpara>The message to be written to the log</simpara>
        </listitem>
      </varlistentry>
    </variablelist>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'Log' =- 

[Synopsis]
Send arbitrary text to a selected log level

[Description]
Log(&lt;level&gt;|&lt;message&gt;)
  level must be one of ERROR, WARNING, NOTICE, DEBUG, VERBOSE, DTMF</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>-- in Version 1.2 nicht vorhanden --</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-noop" />, <xref
      linkend="applikationen-dumpchan" />, <xref
      linkend="applikationen-verbose" /></para>
    </formalpara>
  </section>

  <section id="applikationen-lookupblacklist">
    <title><code>LookupBlacklist()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>LookupBlacklist()</code></secondary>
    </indexterm>

    <simpara>Checks the caller ID of a call against the local number blacklist
    in the Asterisk database (AstDB).</simpara>

    <synopsis><command>LookupBlacklist([<replaceable>options</replaceable>])</command></synopsis>

    <simpara>Searches for the caller ID number (or name) of the active channel
    in the <code>blacklist</code> family of the AstDB.des aktiven Channels in
    der AstDB in der Familie <code>blacklist</code>. If the option j is given,
    the number exists in the AstDB and the priority
    <replaceable>n</replaceable>+101 exists, the channel is handed to that
    priority. If no caller ID is available, the application does
    nothing.</simpara>

    <simpara>Sets the channel variable <code>LOOKUPBLSTATUS</code> to
    <code>FOUND</code> or <code>NOTFOUND</code>.</simpara>

    <simpara>To add numbers to the blacklist from the CLI, enter
    <code>database put blacklist "<replaceable>number</replaceable>"
    "1"</code>; similarly <code>database del blacklist
    "<replaceable>number</replaceable>"</code> to delete the entry and
    <code>database show blacklist</code> for a listing of all the entries in
    the database.</simpara>

    <programlisting>; Block calls from numbers in the blacklist,
; otherwise dial the number in the variable ${PETER}:
exten =&gt; 123,1,Answer()
exten =&gt; 123,n,LookupBlacklist()
exten =&gt; 123,n,GotoIf($["${LOOKUPBLSTATUS}" = "FOUND"]?black,1)
exten =&gt; 123,n,Dial(${PETER},30)

exten =&gt; black,1,Playback(tt-allbusy)
exten =&gt; black,n,Hangup()</programlisting>

    <para>You can accomplish the same effect as <code>LookupBlacklist()</code>
    with the following dialplan entries:<programlisting>exten =&gt; 123,1,Macro(blacklist,${CALLERID(num)})
exten =&gt; 123,n,Dial(IAX2/user:secret@widgets.biz/500)

[macro-blacklist]
; Aufruf: Macro(blacklist,${CALLERID(num)})
exten =&gt; s,1,GotoIf(${DB_EXISTS(blacklist/${ARG1})}?black)
exten =&gt; s,10(black),NoOp(${ARG1} is in the blacklist)
exten =&gt; s,n,Busy(5)
exten =&gt; s,n,Hangup()</programlisting></para>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'LookupBlacklist' =- 

[Synopsis]
Look up Caller*ID name/number from blacklist database

[Description]
  LookupBlacklist(options): Looks up the Caller*ID number on the active
channel in the Asterisk database (family 'blacklist').  
The option string may contain the following character:
 'j' -- jump to n+101 priority if the number/name is found in the blacklist
This application sets the following channel variable upon completion:
 LOOKUPBLSTATUS  The status of the Blacklist lookup as a text string, one of
  FOUND | NOTFOUND
Example: exten =&gt; 1234,1,LookupBlacklist()</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>
  </section>

  <section id="applikationen-lookupcidname">
    <title><code>LookupCIDName()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>LookupCIDName()</code></secondary>
    </indexterm>

    <simpara>Looks up a caller ID name in the AstDB.</simpara>

    <synopsis><command>LookupCIDName()</command></synopsis>

    <simpara>Looks up the caller ID number in the AstDB (family
    <code>cidname</code>), and, if it exists, sets the corresponding caller ID
    name. This application does nothing if no caller ID is present.
    <code>LookupCIDName()</code> can be useful if you receive number
    information but no names, or if you want to change the caller ID
    information certain incoming calls.</simpara>

    <simpara>Returns 0.</simpara>

    <simpara>To add entries to the list from the CLI enter <code>database put
    cidname "<replaceable>number</replaceable>"
    "<replaceable>name</replaceable>"</code>; similarly enter <code>database
    del cidname "<replaceable>number</replaceable>"</code> to delete entries
    and <code>database show cidname</code> to print a list of all the entries
    in the database.</simpara>

    <programlisting>exten =&gt; 123,1,Answer()
exten =&gt; 123,n,LookupCIDName()</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'LookupCIDName' =- 

[Synopsis]
Look up CallerID Name from local database

[Description]
  LookupCIDName: Looks up the Caller*ID number on the active
channel in the Asterisk database (family 'cidname') and sets the
Caller*ID name.  Does nothing if no Caller*ID was received on the
channel.  This is useful if you do not subscribe to Caller*ID
name delivery, or if you want to change the names on some incoming
calls.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>
  </section>

  <section id="applikationen-macro">
    <title><code>Macro()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Macro()</code></secondary>
    </indexterm>

    <simpara>Executes a previously defined macro.</simpara>

    <synopsis>Macro(<replaceable>macroname</replaceable>[,<replaceable>arg1</replaceable>[,<replaceable>arg2</replaceable>[,<replaceable>...</replaceable>]]])</synopsis>

    <simpara>Executes a macro defined in the context
    <code>macro-<replaceable>macroname</replaceable></code> by handing the
    channel over to the <code>s</code> extension in the macro and returning
    after the macro has finished running.</simpara>

    <simpara>The called extension, context and priority are passed to the
    macro in the variables<code> ${MACRO_EXTEN}</code>,
    <code>${MACRO_CONTEXT}</code> and <code>${MACRO_PRIORITY}</code>. The
    arguments are passed to the macro in <code>${ARG1}</code>,
    <code>${ARG2}</code>, and so on.</simpara>

    <simpara><command><code>Macro()</code></command> returns -1 if any step in
    the macro returns -1, otherwise it returns 0. If the variable
    <code>${MACRO_OFFSET}</code> is set when the macro finishes, the
    application will continue executing at priority
    <replaceable>n</replaceable>+1+<code>MACRO_OFFSET</code> if it exists,
    otherwise it will continue at <replaceable>n</replaceable>+1.</simpara>

    <simpara>If <code><command>Goto()</command></code> is called from within
    the macro, macro execution ends and the call continues in the priority
    specified in <command>Goto()</command>.</simpara>

    <programlisting>; define a macro that counts down from the provided value:
[macro-countdown]
exten =&gt; s,1,Set(COUNT=${ARG1})
exten =&gt; s,n,While($[ ${COUNT} &gt; 0])
exten =&gt; s,n,SayNumber(${COUNT})
exten =&gt; s,n,Set(COUNT=$[ ${COUNT} - 1 ])
exten =&gt; s,n,EndWhile()

[default]
exten =&gt; 123,1,Macro(countdown,3)   ; call the macro "countdown" with ARG1=3
exten =&gt; 124,1,Macro(countdown,5)   ; call the macro "countdown" with ARG1=5</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'Macro' =- 

[Synopsis]
Macro Implementation

[Description]
  Macro(macroname|arg1|arg2...): Executes a macro using the context
'macro-&lt;macroname&gt;', jumping to the 's' extension of that context and
executing each step, then returning when the steps end. 
The calling extension, context, and priority are stored in ${MACRO_EXTEN}, 
${MACRO_CONTEXT} and ${MACRO_PRIORITY} respectively.  Arguments become
${ARG1}, ${ARG2}, etc in the macro context.
If you Goto out of the Macro context, the Macro will terminate and control
will be returned at the location of the Goto.
If ${MACRO_OFFSET} is set at termination, Macro will attempt to continue
at priority MACRO_OFFSET + N + 1 if such a step exists, and N + 1 otherwise.
WARNING: Because of the way Macro is implemented (it executes the priorities
         contained within it via sub-engine), and a fixed per-thread
         memory stack allowance, macros are limited to 7 levels
         of nesting (macro calling macro calling macro, etc.); It
         may be possible that stack-intensive applications in deeply nested macros
         could cause asterisk to crash earlier than this limit.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>22,23c22,23
&lt;          may be possible that stack-intensive applications in deeply nested macros
&lt;          could cause asterisk to crash earlier than this limit.
---
&gt;          may be possible that stack-intensive applications in deeply nested
&gt;          macros could cause asterisk to crash earlier than this limit.</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-goto" />, <xref
      linkend="applikationen-gosub" /></para>
    </formalpara>
  </section>

  <section id="applikationen-macroexclusive">
    <title><code>MacroExclusive()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>MacroExclusive()</code></secondary>
    </indexterm>

    <simpara>Executes a previously defined macro but allows only a single
    instance of the macro to execute at any given point in time.</simpara>

    <synopsis><command>MacroExclusive(<replaceable>macroname</replaceable>[,<replaceable>arg1</replaceable>[,<replaceable>arg2</replaceable>[,<replaceable>...</replaceable>]]])</command></synopsis>

    <simpara>Executes - same as <code>Macro()</code> - a macro defined in
    <code>macro-<replaceable>macroname</replaceable></code>, by handing the
    channel over to the <code>s</code> extension in the macro and returning
    after the macro has finished running, but allows only a single instance to
    run at any given time! If the same macro is called at the same time from
    elsewhere in the dialplan, this second instance must wait until the first
    instance has completed.</simpara>

    <simpara>The called extension, context and priority are passed to the
    macro in the variables<code> ${MACRO_EXTEN}</code>,
    <code>${MACRO_CONTEXT}</code> and <code>${MACRO_PRIORITY}</code>. The
    arguments are passed to the macro in <code>${ARG1}</code>,
    <code>${ARG2}</code>, and so on.</simpara>

    <simpara><command><code>Macro()</code></command> returns -1 if any step in
    the macro returns -1, otherwise it returns 0. If the variable
    <code>${MACRO_OFFSET}</code> is set when the macro finishes, the
    application will continue executing at priority
    <replaceable>n</replaceable>+1+<code>MACRO_OFFSET</code> if it exists,
    otherwise it will continue at <replaceable>n</replaceable>+1.</simpara>

    <simpara>If <code><command>Goto()</command></code> is called from within
    the macro, macro execution ends and the call continues in the priority
    specified in <command>Goto()</command>.</simpara>

    <programlisting>; define a macro that counts down from the provided value:
[macro-countdown]
exten =&gt; s,1,Set(COUNT=${ARG1})
exten =&gt; s,n,While($[ ${COUNT} &gt; 0])
exten =&gt; s,n,SayNumber(${COUNT})
exten =&gt; s,n,Set(COUNT=$[ ${COUNT} - 1 ])
exten =&gt; s,n,EndWhile()

[default]
exten =&gt; 123,1,MacroExclusive(countdown,3)   ; call the macro "countdown" with ARG1=3
exten =&gt; 124,1,MacroExclusive(countdown,5)   ; call the macro "countdown" with ARG1=5</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'MacroExclusive' =- 

[Synopsis]
Exclusive Macro Implementation

[Description]
  MacroExclusive(macroname|arg1|arg2...):
Executes macro defined in the context 'macro-macroname'
Only one call at a time may run the macro.
(we'll wait if another call is busy executing in the Macro)
Arguments and return values as in application Macro()</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>-- in Version 1.2 nicht vorhanden --</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-macro" />, <xref
      linkend="applikationen-goto" />, <xref linkend="applikationen-gosub" />,
      <filename>doc/macroexclusive.txt</filename></para>
    </formalpara>
  </section>

  <section id="applikationen-macroexit">
    <title><code>MacroExit()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>MacroExit()</code></secondary>
    </indexterm>

    <simpara>Interrupts execution of a macro.</simpara>

    <synopsis><command>MacroExit()</command></synopsis>

    <simpara>May be used within a macro to end execution of the macro as
    though there were no further priorities remaining.</simpara>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'MacroExit' =- 

[Synopsis]
Exit From Macro

[Description]
  MacroExit():
Causes the currently running macro to exit as if it had
ended normally by running out of priorities to execute.
If used outside a macro, will likely cause unexpected
behavior.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-macro" /></para>
    </formalpara>
  </section>

  <section id="applikationen-macroif">
    <title><code>MacroIf()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>MacroIf()</code></secondary>
    </indexterm>

    <simpara>Conditionally starts different macros.</simpara>

    <synopsis><command>MacroIf(<replaceable>expression</replaceable>?<replaceable>macronameA</replaceable>[,<replaceable>argA1</replaceable>][:<replaceable>macronameB</replaceable>[,<replaceable>argB1</replaceable>]])</command></synopsis>

    <simpara>Calls a macro depending on a condition (defined in the same way
    as in <command><code>GotoIf()</code></command> ).</simpara>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'MacroIf' =- 

[Synopsis]
Conditional Macro Implementation

[Description]
  MacroIf(&lt;expr&gt;?macroname_a[|arg1][:macroname_b[|arg1]])
Executes macro defined in &lt;macroname_a&gt; if &lt;expr&gt; is true
(otherwise &lt;macroname_b&gt; if provided)
Arguments and return values as in application macro()</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-macro" />, <xref
      linkend="applikationen-gotoif" />, <xref
      linkend="applikationen-gosubif" /></para>
    </formalpara>
  </section>

  <section id="applikationen-mailboxexists">
    <title><code>mailboxExists()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>mailboxExists()</code></secondary>
    </indexterm>

    <simpara>Checks to see if the specified voicemail box exists.</simpara>

    <synopsis><command>mailboxExists(<replaceable>mailbox</replaceable>[@<replaceable>context</replaceable>][,<replaceable>options</replaceable>])</command></synopsis>

    <simpara>Checks to see if the voicemail box defined in
    <replaceable>mailbox</replaceable> exists. A voicemail context may be
    specified if the mailbox being checked is not in the default
    context.</simpara>

    <simpara>Sets the channel variable <code>VMBOXEXISTSSTATUS</code> to
    <code>SUCCESS</code> (mailbox found) or <code>FAILED</code> (mailbox not
    found).</simpara>

    <simpara>Option <code>j</code> enables jumping to priority
    <replaceable>n</replaceable>+101 on success.</simpara>

    <programlisting>exten =&gt; 123,1,Answer()
exten =&gt; 123,n,mailboxExists(123@default)
exten =&gt; 123,n,Goto(box-${VMBOXEXISTSSTATUS})
exten =&gt; 123,10(box-SUCCESS),Voicemail(123,u)
exten =&gt; 123,20(box-FAILED),Playback(sorry)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'mailboxExists' =- 

[Synopsis]
Check to see if Voicemail mailbox exists

[Description]
  mailboxExists(mailbox[@context][|options]): Check to see if the specified
mailbox exists. If no voicemail context is specified, the 'default' context
will be used.
  This application will set the following channel variable upon completion:
    VMBOXEXISTSSTATUS - This will contain the status of the execution of the
                        mailboxExists application. Possible values include:
                        SUCCESS | FAILED

  Options:
    j - Jump to priority n+101 if the mailbox is found.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="funktionen-vmcount" /></para>
    </formalpara>
  </section>

  <section id="applikationen-meetme">
    <title><code>MeetMe()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>MeetMe()</code></secondary>
    </indexterm>

    <simpara>Places the caller in a MeetMe conference.</simpara>

    <synopsis><command>MeetMe([<replaceable>conference</replaceable>][,<replaceable>options</replaceable>[,<replaceable>PIN</replaceable>]])</command></synopsis>

    <simpara>Connects the caller in the current channel to a MeetMe conference
    defined by <replaceable>conferenceNo</replaceable>. If this is not
    specified, the application asks the caller to enter a conference
    number.</simpara>

    <simpara>If <code>PIN</code> is correctly set to the PIN (personal
    identification number) of the conference (set statically in
    <filename>meetme.conf</filename> or dynamically by the conference
    operator) the caller is placed directly into the conference; otherwise,
    the caller must enter the PIN first.</simpara>

    <important>
      <simpara>MeetMe conferences require a Zaptel interface to be installed
      in the Asterisk server; these provide a time source for synchronization
      of the participating channels. If no Zaptel interface is available, the
      <code>ztdummy</code> driver may be used.</simpara>

      <simpara>MeetMe conferences always use the <code>ulaw</code> codec
      internally. The more conference participants use other codecs such as
      GSM or alaw, the higher the processor load due to transcoding.</simpara>
    </important>

    <simpara>Valid options include:</simpara>

    <variablelist termlength="3">
      <varlistentry>
        <term><code>a</code></term>

        <listitem>
          <simpara>Sets admin mode.</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>A</code></term>

        <listitem>
          <simpara>Marks the joining user as a special participant (see
          <code>w</code> and <code>x</code>).</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>b</code></term>

        <listitem>
          <simpara>Starts the AGI script defined in
          <code>${MEETME_AGI_BACKGROUND}</code>,
          <filename>conf-background.agi</filename> by default. (Works only if
          all the channels in the conference are Zap channels.) The script is
          passed all DTMF keypresses; will not work in combination with
          options that also capture DTMF (such as <code>p</code>).</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>c</code></term>

        <listitem>
          <simpara>Announces the number of participants to a joining
          user.</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>d</code></term>

        <listitem>
          <simpara>Dynamically allocates a new conference.</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>D</code></term>

        <listitem>
          <simpara>Dynamically allocates a new conference but asks the user to
          set a PIN (if no PIN is desired, the user must press
          "<code>#"</code>).</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>e</code></term>

        <listitem>
          <simpara>Selects an empty conference.</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>E</code></term>

        <listitem>
          <simpara>Selects an empty conference that does not require a
          PIN.</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>i</code></term>

        <listitem>
          <simpara>Announces join and exit of new participants with review
          (works only with Zap channels).</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>I</term>

        <listitem>
          <para>Announces join and exit of new participants without review
          (works only with Zap channels).</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>m</code></term>

        <listitem>
          <simpara>Listen-only mode.</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>M</code></term>

        <listitem>
          <simpara>Music-on-hold mode. Plays music-on-hold if there is only
          one participant in the conference.</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>o</term>

        <listitem>
          <para>Sets talker optimization. Improves conference quality and
          reduces transcoding overhead by muting participants who are not
          currently speaking.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>p</code></term>

        <listitem>
          <simpara>Participants may leave by pressing
          <code>"#"</code>.</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>P</code></term>

        <listitem>
          <simpara>Requests a PIN even if it is provided in the
          command.</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>q</code></term>

        <listitem>
          <simpara>Quiet mode. Does not play entry/exit notification
          tones.</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>r</code></term>

        <listitem>
          <simpara>Records a conference. File:
          <code>${MEETME_RECORDINGFILE}</code>, format:
          <code>${MEETME_RECORDINGFORMAT}</code>. Default filename is
          <code>meetme-conf-rec-${<replaceable>conference</replaceable>}-${<replaceable>uniqueID</replaceable>}</code>.
          The default format is <code>wav</code>. (Works only with Zap
          channels.)</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>s</code></term>

        <listitem>
          <simpara>Switches to menu (user or admin) "*" is pressed.</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>t</code></term>

        <listitem>
          <simpara>Talk-only mode.</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>T</code></term>

        <listitem>
          <simpara>Talker detection. (Information is sent to the Manager
          interface and displayed in the MeetMe list in the CLI.)</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>v</code></term>

        <listitem>
          <simpara>Video mode (not yet implemented).</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>w</code></term>

        <listitem>
          <simpara>Wait until the marked participant joins the conference.
          Until this point, the other participants will hear
          music-on-hold.</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>x</code></term>

        <listitem>
          <simpara>Ends the conference when the last marked participant exits
          (see <code>A</code>).</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>X</code></term>

        <listitem>
          <simpara>Participants may exit the conference by dialling a
          single-digit extension in the <code>${MEETME_EXIT_CONTEXT}</code>
          context, or the current context if this variable is not defined.
          Option <code>X</code> does not work with <code>p</code> or
          <code>s</code>.</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>1</term>

        <listitem>
          <para>Does not play the "You are currently the only person in this
          conference" message when the first conference participant
          enters.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <simpara>You can use <code>e</code> (or <code>E</code>) together with
    <code>d</code> (or <code>D</code>) to dynamically open a new conference.
    This means you will have to find a way of distributing the conference
    number to the other users, or employ some dialplan logic to accomplish the
    same objective.</simpara>

    <note>
      <para>The options <code>d</code> or <code>D</code>
      <emphasis>dynamically</emphasis> open conferences; conferences are
      defined <emphasis>statically</emphasis> in
      <filename>meetme.conf</filename>.</para>
    </note>

    <programlisting>exten =&gt; 123,1,Answer()
; Place the caller in conference 333 (with PIN 1234):
exten =&gt; 123,n,MeetMe(333,DpM,1234)</programlisting>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-meetmeadmin" />, <xref
      linkend="applikationen-meetmecount" /></para>
    </formalpara>

    <formalpara>
      <title>Commands in the CLI</title>

      <para>The following commands are for administering conferences from the
      CLI. (The value <code><replaceable>participant</replaceable></code> is
      the number of participant as displayed in the participant
      list):<variablelist>
          <?dbfo list-presentation="blocks"?>

          <varlistentry>
            <term><code>MeetMe</code></term>

            <listitem>
              <simpara>List all conferences.</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>MeetMe list
            <replaceable>conference</replaceable></code></term>

            <listitem>
              <simpara>List the participants in the specified
              conference.</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>MeetMe kick <replaceable>conference</replaceable>
            <replaceable>participant</replaceable></code></term>

            <listitem>
              <simpara>Kicks a participant out of the conference.</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>MeetMe kick
            <replaceable>conference</replaceable></code></term>

            <listitem>
              <simpara>Kicks all participants out of the conference.</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>MeetMe lock
            <replaceable>conference</replaceable></code></term>

            <listitem>
              <simpara>Locks a conference to new participants.</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>MeetMe unlock
            <replaceable>conference</replaceable></code></term>

            <listitem>
              <simpara>Unlocks a previous lock (see above).</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>MeetMe mute <replaceable>conference</replaceable>
            <replaceable>participant</replaceable></code></term>

            <listitem>
              <simpara>Mute a conference participant.</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>MeetMe unmute <replaceable>conference</replaceable>
            <replaceable>participant</replaceable></code></term>

            <listitem>
              <simpara>Unmute a conference participant (see above).</simpara>
            </listitem>
          </varlistentry>
        </variablelist></para>
    </formalpara>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'MeetMe' =- 

[Synopsis]
MeetMe conference bridge

[Description]
  MeetMe([confno][,[options][,pin]]): Enters the user into a specified MeetMe
conference.  If the conference number is omitted, the user will be prompted
to enter one.  User can exit the conference by hangup, or if the 'p' option
is specified, by pressing '#'.
Please note: The Zaptel kernel modules and at least one hardware driver (or ztdummy)
             must be present for conferencing to operate properly. In addition, the chan_zap
             channel driver must be loaded for the 'i' and 'r' options to operate at all.

The option string may contain zero or more of the following characters:
      'a' -- set admin mode
      'A' -- set marked mode
      'b' -- run AGI script specified in ${MEETME_AGI_BACKGROUND}
             Default: conf-background.agi  (Note: This does not work with
             non-Zap channels in the same conference)
      'c' -- announce user(s) count on joining a conference
      'd' -- dynamically add conference
      'D' -- dynamically add conference, prompting for a PIN
      'e' -- select an empty conference
      'E' -- select an empty pinless conference
      'i' -- announce user join/leave with review
      'I' -- announce user join/leave without review
      'l' -- set listen only mode (Listen only, no talking)
      'm' -- set initially muted
      'M' -- enable music on hold when the conference has a single caller
      'o' -- set talker optimization - treats talkers who aren't speaking as
             being muted, meaning (a) No encode is done on transmission and
             (b) Received audio that is not registered as talking is omitted
             causing no buildup in background noise
      'p' -- allow user to exit the conference by pressing '#'
      'P' -- always prompt for the pin even if it is specified
      'q' -- quiet mode (don't play enter/leave sounds)
      'r' -- Record conference (records as ${MEETME_RECORDINGFILE}
             using format ${MEETME_RECORDINGFORMAT}). Default filename is
             meetme-conf-rec-${CONFNO}-${UNIQUEID} and the default format is
             wav.
      's' -- Present menu (user or admin) when '*' is received ('send' to menu)
      't' -- set talk only mode. (Talk only, no listening)
      'T' -- set talker detection (sent to manager interface and meetme list)
      'w[(&lt;secs&gt;)]'
          -- wait until the marked user enters the conference
      'x' -- close the conference when last marked user exits
      'X' -- allow user to exit the conference by entering a valid single
             digit extension ${MEETME_EXIT_CONTEXT} or the current context
             if that variable is not defined.
      '1' -- do not play message when first person enters</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>8,11c8,11
&lt;   MeetMe([confno][,[options][,pin]]): Enters the user into a specified MeetMe
&lt; conference.  If the conference number is omitted, the user will be prompted
&lt; to enter one.  User can exit the conference by hangup, or if the 'p' option
&lt; is specified, by pressing '#'.
---
&gt;   MeetMe([confno][,[options][,pin]]): Enters the user into a specified MeetMe conference.
&gt; If the conference number is omitted, the user will be prompted to enter
&gt; one. 
&gt; User can exit the conference by hangup, or if the 'p' option is specified, by pressing '#'.
20,21c20,21
&lt;              Default: conf-background.agi  (Note: This does not work with
&lt;              non-Zap channels in the same conference)
---
&gt;              Default: conf-background.agi
&gt;              (Note: This does not work with non-Zap channels in the same conference)
27,30c27,28
&lt;       'i' -- announce user join/leave with review
&lt;       'I' -- announce user join/leave without review
&lt;       'l' -- set listen only mode (Listen only, no talking)
&lt;       'm' -- set initially muted
---
&gt;       'i' -- announce user join/leave
&gt;       'm' -- set monitor only mode (Listen only, no talking)
32,35d29
&lt;       'o' -- set talker optimization - treats talkers who aren't speaking as
&lt;              being muted, meaning (a) No encode is done on transmission and
&lt;              (b) Received audio that is not registered as talking is omitted
&lt;              causing no buildup in background noise
41,42c35
&lt;              meetme-conf-rec-${CONFNO}-${UNIQUEID} and the default format is
&lt;              wav.
---
&gt;              meetme-conf-rec-${CONFNO}-${UNIQUEID} and the default format is wav.
52d44
&lt;       '1' -- do not play message when first person enters</screen></para>
      </formalpara>
    </note>
  </section>

  <section id="applikationen-meetmeadmin">
    <title><code>MeetMeAdmin()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>MeetMeAdmin()</code></secondary>
    </indexterm>

    <simpara>Administers a MeetMe conference.</simpara>

    <synopsis><command>MeetMeAdmin(<replaceable>conference</replaceable>,<replaceable>command</replaceable>[,<replaceable>participant</replaceable>])</command></synopsis>

    <para>Executes a command in the specified conference. The command may be
    one of the following (the
    <code><replaceable>participant</replaceable></code> is required only for
    the kick command (<code>k)</code>): <variablelist termlength="3">
        <varlistentry>
          <term><code>K</code></term>

          <listitem>
            <simpara>Kicks all participants out of the conference.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>k</code></term>

          <listitem>
            <simpara>Kicks <code><replaceable>participant</replaceable></code>
            out of the conference.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>e</code></term>

          <listitem>
            <simpara>Kicks the last participant who joined out of the
            conference.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>L</code></term>

          <listitem>
            <simpara>Locks the conference to new participants.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>l</code></term>

          <listitem>
            <simpara>Unlocks the conference.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>M</code></term>

          <listitem>
            <simpara>Mute a conference participant.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>m</code></term>

          <listitem>
            <simpara>Unmute a muted participant.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>N</code></term>

          <listitem>
            <simpara>Mute everyone except the conference
            administrator.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>n</code></term>

          <listitem>
            <simpara>Unmute everyone mute by <code>N</code>.</simpara>
          </listitem>
        </varlistentry>
      </variablelist></para>

    <programlisting>; Mute participant 3 in conference 333
exten =&gt; 123,1,MeetMeAdmin(333,M,3)

; Kick participant 3 out of conference 333:
exten =&gt; 123,1,MeetMeAdmin(333,k,3)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'MeetMeAdmin' =- 

[Synopsis]
MeetMe conference Administration

[Description]
  MeetMeAdmin(confno,command[,user]): Run admin command for conference
      'e' -- Eject last user that joined
      'k' -- Kick one user out of conference
      'K' -- Kick all users out of conference
      'l' -- Unlock conference
      'L' -- Lock conference
      'm' -- Unmute one user
      'M' -- Mute one user
      'n' -- Unmute all users in the conference
      'N' -- Mute all non-admin users in the conference
      'r' -- Reset one user's volume settings
      'R' -- Reset all users volume settings
      's' -- Lower entire conference speaking volume
      'S' -- Raise entire conference speaking volume
      't' -- Lower one user's talk volume
      'T' -- Raise one user's talk volume
      'u' -- Lower one user's listen volume
      'U' -- Raise one user's listen volume
      'v' -- Lower entire conference listening volume
      'V' -- Raise entire conference listening volume</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>14,27c14,17
&lt;       'm' -- Unmute one user
&lt;       'M' -- Mute one user
&lt;       'n' -- Unmute all users in the conference
&lt;       'N' -- Mute all non-admin users in the conference
&lt;       'r' -- Reset one user's volume settings
&lt;       'R' -- Reset all users volume settings
&lt;       's' -- Lower entire conference speaking volume
&lt;       'S' -- Raise entire conference speaking volume
&lt;       't' -- Lower one user's talk volume
&lt;       'T' -- Raise one user's talk volume
&lt;       'u' -- Lower one user's listen volume
&lt;       'U' -- Raise one user's listen volume
&lt;       'v' -- Lower entire conference listening volume
&lt;       'V' -- Raise entire conference listening volume
---
&gt;       'm' -- Unmute conference
&gt;       'M' -- Mute conference
&gt;       'n' -- Unmute entire conference (except admin)
&gt;       'N' -- Mute entire conference (except admin)</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-meetme" />, <xref
      linkend="applikationen-meetmecount" /></para>
    </formalpara>
  </section>

  <section id="applikationen-meetmecount">
    <title><code>MeetMeCount()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>MeetMeCount()</code></secondary>
    </indexterm>

    <simpara>Counts the number of participants in a MeetMe
    conference.</simpara>

    <synopsis><command>MeetMeCount(<replaceable>conference</replaceable>[,<replaceable>variablename</replaceable>])</command></synopsis>

    <simpara>Announces the number of participants in the conference. If the
    variable name is provided, the announcement is skipped and the count
    written to this variable.</simpara>

    <simpara>Returns 0 on success, -1 on error.</simpara>

    <programlisting>; die Teilnehmerzahl der Konferenz 333 in ${anzahl} speichern:
exten =&gt; 333,1,MeetMeCount(123,anzahl)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'MeetMeCount' =- 

[Synopsis]
MeetMe participant count

[Description]
  MeetMeCount(confno[|var]): Plays back the number of users in the specified
MeetMe conference. If var is specified, playback will be skipped and the value
will be returned in the variable. Upon app completion, MeetMeCount will hangup
the channel, unless priority n+1 exists, in which case priority progress will
continue.
A ZAPTEL INTERFACE MUST BE INSTALLED FOR CONFERENCING FUNCTIONALITY.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>10,12c10,11
&lt; will be returned in the variable. Upon app completion, MeetMeCount will hangup
&lt; the channel, unless priority n+1 exists, in which case priority progress will
&lt; continue.
---
&gt; will be returned in the variable. Upon app completion, MeetMeCount will hangup the
&gt; channel, unless priority n+1 exists, in which case priority progress will continue.</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-meetme" />, <xref
      linkend="applikationen-meetmeadmin" /></para>
    </formalpara>
  </section>

  <section id="applikationen-milliwatt">
    <title><code>Milliwatt()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Milliwatt()</code></secondary>
    </indexterm>

    <simpara>Generates a 1000 Hz test tone on a channel.</simpara>

    <synopsis>Milliwatt()</synopsis>

    <simpara>Milliwatt tone lines are used by telecommunications carriers for
    testing and measuring line characteristics. They can be used to check for
    echo, excessive or inadequate volume, or some kinds of line noise.
    Standard milliwatt test tones are 1004 Hz at 0 dbm (u-law).</simpara>

    <programlisting>; generate a 1000 Hz Milliwatt test tone:
exten =&gt; 123,1,Milliwatt()</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'Milliwatt' =- 

[Synopsis]
Generate a Constant 1000Hz tone at 0dbm (mu-law)

[Description]
Milliwatt(): Generate a Constant 1000Hz tone at 0dbm (mu-law)</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-echo" /></para>
    </formalpara>
  </section>

  <section id="applikationen-mixmonitor">
    <title><code>MixMonitor()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>MixMonitor()</code></secondary>
    </indexterm>

    <simpara>Records the audio on the current channel but mixes it before
    writing it to a file.</simpara>

    <synopsis><command>MixMonitor(<replaceable>fileprefix</replaceable>.<replaceable>format</replaceable>[,<replaceable>options</replaceable>[,<replaceable>command</replaceable>]])</command></synopsis>

    <simpara>Starts recording the audio on the current channel. Instead of
    recording each direction in a separate file the way
    <code><command>Monitor()</command></code> would, mixes the two audio
    streams on-the-fly and writes the result to the specified file.</simpara>

    <para>Options:<variablelist termlength="6">
        <varlistentry>
          <term><code>a</code></term>

          <listitem>
            <simpara>Appends the audio stream to an existing file.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>b</code></term>

          <listitem>
            <simpara>Saves audio to the file only while the channel is
            bridged, <emphasis>i.e.</emphasis> once a conversation has
            actually begun, and only until it is hung up.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>v(<replaceable>x</replaceable>)</code></term>

          <listitem>
            <simpara>Adjusts the heard volume by an increment of
            <code>x</code> (range -4 to 4).</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>V(<replaceable>x</replaceable>)</code></term>

          <listitem>
            <simpara>Adjusts the spoken volume by an increment of
            <code>x</code> (range -4 to 4).</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>W(<replaceable>x</replaceable>)</code></term>

          <listitem>
            <simpara>Adjusts both heard and spoken volume by an increment of
            <code>x</code> (range -4 to 4).</simpara>
          </listitem>
        </varlistentry>
      </variablelist></para>

    <simpara>The <replaceable>command</replaceable> (if provided) is executed
    after recording. The variable <code>${MIXMONITOR_FILENAME}</code> is set
    to the filename used for the recording.</simpara>

    <simpara>See also additional information in the description to
    <code><command>Monitor()</command></code>.</simpara>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'MixMonitor' =- 

[Synopsis]
Record a call and mix the audio during the recording

[Description]
  MixMonitor(&lt;file&gt;.&lt;ext&gt;[|&lt;options&gt;[|&lt;command&gt;]])

Records the audio on the current channel to the specified file.
If the filename is an absolute path, uses that path, otherwise
creates the file in the configured monitoring directory from
asterisk.conf.

Valid options:
 a      - Append to the file instead of overwriting it.
 b      - Only save audio to the file while the channel is bridged.
          Note: does not include conferences.
 v(&lt;x&gt;) - Adjust the heard volume by a factor of &lt;x&gt; (range -4 to 4)
 V(&lt;x&gt;) - Adjust the spoken volume by a factor of &lt;x&gt; (range -4 to 4)
 W(&lt;x&gt;) - Adjust the both heard and spoken volumes by a factor of &lt;x&gt;
         (range -4 to 4)

&lt;command&gt; will be executed when the recording is over
Any strings matching ^{X} will be unescaped to ${X} and 
all variables will be evaluated at that time.
The variable MIXMONITOR_FILENAME will contain the filename used to record.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-monitor" /></para>
    </formalpara>
  </section>

  <section id="applikationen-monitor">
    <title><code>Monitor()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Monitor()</code></secondary>
    </indexterm>

    <simpara>Records the current channel in two separate files.</simpara>

    <synopsis>Monitor([<replaceable>format</replaceable>[,<replaceable>fileprefix</replaceable>[,<replaceable>options</replaceable>]]])</synopsis>

    <simpara>Starts audio recording on the current channel. Incoming and
    outgoing audio packets are written to separate files until the channel is
    hung up or monitoring is stopped with
    <code><command>StopMonitor()</command></code>.</simpara>

    <simpara>The parameter <replaceable>format</replaceable> sets the file
    format. If this is not specified, <code>wav</code> is used.</simpara>

    <simpara>The parameter <replaceable>fileprefix</replaceable> specifies the
    filename without extension. If this is not specified, the filename is
    assembled out of the channel name and a number, for example,<code>
    IAX2[foo@bar]-3</code>. Incoming audio is written to
    <filename><replaceable>fileprefix</replaceable>-in.<replaceable>format</replaceable></filename>,
    outgoing audio in
    <filename><replaceable>fileprefix</replaceable>-out.<replaceable>format</replaceable></filename>,
    both in <filename>/var/spool/asterisk/monitor/</filename>.</simpara>

    <para>Two options may be specified: <variablelist termlength="3">
        <varlistentry>
          <term><code>m</code></term>

          <listitem>
            <simpara>After recording is complete, mixes the incoming and
            outgoing audio files into a single file and deletes the originals.
            Requires that <command>soxmix</command> from the
            <command>sox</command> package be installed on the
            server.<footnote>
                <simpara><ulink
                url="http://sox.sourceforge.net/">http://sox.sourceforge.net/</ulink>,
                see also an explanation in <xref
                linkend="musiconhold.conf" />, version 12.17.7 or newer. You
                may check your installed version with <command>soxmix
                -help</command></simpara>
              </footnote>If the variable <code>${MONITOR_EXEC}</code> is
            defined, this application is executed instead of
            <command>soxmix</command> and the original incoming and outgoing
            audio files are not deleted.<footnote>
                <para>depends on Asterisk version; older versions do not
                delete automatically. Best to check with a proper test.</para>
              </footnote>. <command>soxmix</command> (or
            <command>${MONITOR_EXEC}</command> if specified) is passed three
            values: the names of the incoming and outgoing audio files and the
            name of the mixed file, which is the fileprefix without
            <code>-in</code>/<code>-out</code>. If
            <code>${MONITOR_EXEC_ARGS}</code> is set, the contents are used as
            arguments to <code>${MONITOR_EXEC}</code>.</simpara>

            <important>
              <para>Bei der Verwendung von <command>soxmix</command> ist zu
              beachten, dass <command>soxmix</command> ohne explizite Angabe
              der Dateitypen diese aus den Endungen erkennt. <code>gsm</code>
              und <code>wav</code> bereiten z.B. keine Probleme, aber für die
              Formate <code>alaw</code> und <code>ulaw</code> werden als
              Endungen <code>al</code> bzw. <code>ul</code> erwartet. Lesen
              Sie also ggf. die Anleitung von sox (/soxmix) und verwenden Sie
              <code>${MONITOR_EXEC_ARGS}</code> oder benutzen Sie ein kleines
              Wrapper-Skript als <code>${MONITOR_EXEC}</code>, das die
              Datei-Parameter liest und soxmix mit Angabe der Typen
              aufruft.</para>
            </important>

            <note>
              <simpara>Wenn Sie eine kombinierte Aufzeichnung wollen, ist
              meist <code>MixMonitor()</code> die bessere Alternative, da es
              die Kanäle direkt während der Aufnahme mischt und dadurch
              Lastspitzen am Ende der Aufzeichnung vermeidet.</simpara>
            </note>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>b</code></term>

          <listitem>
            <simpara>Startet die Aufnahme erst, nachdem ein Anruf zu einem
            anderen Channel verbunden wurde, also nachdem z.B. durch
            <code>Dial()</code> tatsächlich ein Gespräch zustande
            kommt.</simpara>
          </listitem>
        </varlistentry>
      </variablelist></para>

    <simpara>Gibt 0 bei Erfolg zurück oder -1 bei einem Fehler
    (Überwachungsdateien konnten nicht geöffnet werden, Channel wird bereits
    aufgezeichnet, ...)</simpara>

    <programlisting>; das Gespräch aufzeichnen und hinterher die Audio-Kanäle mixen:
exten =&gt; 123,1,Answer()
exten =&gt; 123,n,Monitor(gsm,,mb)
exten =&gt; 123,n,SayDigits(123456789)
exten =&gt; 123,n,Hangup()

; wie oben aber mit einem eigenen Wrapper, der soxmix aufruft:
exten =&gt; 123,1,Answer()
exten =&gt; 123,n,Set(MONITOR_EXEC=/pfad/zu/mein-soxmix-wrapper.sh)
exten =&gt; 123,n,Monitor(gsm,,mb)
exten =&gt; 123,n,SayDigits(123456789)
exten =&gt; 123,n,Hangup()</programlisting>

    <important>
      <para>Stellen Sie vor dem Mitschneiden von Gesprächen sicher, dass die
      rechtlichen Voraussetzungen erfüllt sind. Meist müssen beide Teilnehmer
      von der Aufzeichnung informiert sein.<footnote>
          <simpara>siehe auch <ulink
          url="http://www.voip-info.org/wiki/view/Monitor+Recording+Legal+Issues">http://www.voip-info.org/wiki/view/Monitor+Recording+Legal+Issues</ulink></simpara>
        </footnote></para>
    </important>

    <note>
      <simpara>Einige Anwender, die viele (50-500) Gespräche gleichzeitig
      aufnehmen, berichten von <emphasis>stark</emphasis> verbesserter
      Performance, wenn man auf eine RAM-Disk aufzeichnet (weniger
      Such-Operationen) und die Dateien erst nach Gesprächsende auf die
      Festplatte (lokal oder gemountet) kopiert.</simpara>
    </note>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'Monitor' =- 

[Synopsis]
Monitor a channel

[Description]
Monitor([file_format[:urlbase]|[fname_base]|[options]]):
Used to start monitoring a channel. The channel's input and output
voice packets are logged to files until the channel hangs up or
monitoring is stopped by the StopMonitor application.
  file_format  optional, if not set, defaults to "wav"
  fname_base   if set, changes the filename used to the one specified.
  options:
    m   - when the recording ends mix the two leg files into one and
          delete the two leg files.  If the variable MONITOR_EXEC is set, the
          application referenced in it will be executed instead of
          soxmix and the raw leg files will NOT be deleted automatically.
          soxmix or MONITOR_EXEC is handed 3 arguments, the two leg files
          and a target mixed file name which is the same as the leg file names
          only without the in/out designator.
          If MONITOR_EXEC_ARGS is set, the contents will be passed on as
          additional arguements to MONITOR_EXEC
          Both MONITOR_EXEC and the Mix flag can be set from the
          administrator interface

    b   - Don't begin recording unless a call is bridged to another channel

Returns -1 if monitor files can't be opened or if the channel is already
monitored, otherwise 0.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-changemonitor" />, <xref
      linkend="applikationen-stopmonitor" />, <xref
      linkend="applikationen-pausemonitor" />, <xref
      linkend="applikationen-unpausemonitor" />, <xref
      linkend="applikationen-mixmonitor" />, <xref
      linkend="applikationen-record" /></para>
    </formalpara>
  </section>

  <section id="applikationen-morsecode">
    <title><code>Morsecode()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Morsecode()</code></secondary>
    </indexterm>

    <simpara>Gibt einen angegebenen String als Morsezeichen aus.</simpara>

    <synopsis>Morsecode(<replaceable>String</replaceable>)</synopsis>

    <simpara>Spielt den angegebenen String als Morsezeichen.</simpara>

    <programlisting>exten =&gt; 123,1,Answer()
exten =&gt; 123,n,Morsecode("Das Pferd frisst den Hafer nicht.")
exten =&gt; 123,n,Hangup()</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'Morsecode' =- 

[Synopsis]
Plays morse code

[Description]
Usage: Morsecode(&lt;string&gt;)
Plays the Morse code equivalent of the passed string.  If the variable
MORSEDITLEN is set, it will use that value for the length (in ms) of the dit
(defaults to 80).  Additionally, if MORSETONE is set, it will use that tone
(in Hz).  The tone default is 800.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>-- in Version 1.2 nicht vorhanden --</screen></para>
      </formalpara>
    </note>
  </section>

  <section id="applikationen-mp3player">
    <title><code>MP3Player()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>MP3Player()</code></secondary>
    </indexterm>

    <simpara>Gibt eine MP3-Datei oder einen MP3-Stream wieder.</simpara>

    <synopsis>MP3Player(<replaceable>Dateiname</replaceable>)</synopsis>

    <simpara>Verwendet das Programm <code>mpg123</code><footnote>
        <simpara><ulink url="http://mpg123.org/">http://mpg123.org/</ulink>,
        <ulink
        url="http://sourceforge.net/projects/mpg123/">http://sourceforge.net/projects/mpg123/</ulink>,
        für MacOS X siehe auch <ulink
        url="http://sourceforge.net/projects/mosx-mpg123/">http://sourceforge.net/projects/mosx-mpg123/</ulink></simpara>
      </footnote>, um dem Anrufer eine MP3-Datei vorzuspielen. Der angegebene
    Dateiname kann auch eine URL sein. Der Anrufer kann die Wiedergabe durch
    Betätigung einer beliebigen Taste stoppen.</simpara>

    <simpara>Die richtige Version von <code>mpg123</code> muss installiert
    sein, damit diese Anwendung ordnungsgemäß funktioniert. Asterisk arbeitet
    momentan mit der Version 0.59r ideal.</simpara>

    <note>
      <simpara>Das häufig als Alternative installierte und auf
      <filename>mpg123</filename> verlinkte Programm <command>mpg321</command>
      funktioniert <emphasis>nicht</emphasis> einwandfrei.</simpara>
    </note>

    <simpara>Liefert -1, falls aufgelegt wird, sonst 0.</simpara>

    <programlisting>; lokale Datei spielen:
exten =&gt; 123,1,Answer()
exten =&gt; 123,n,MP3Player(test.mp3)

; Datei von einer URL spielen:
exten =&gt; 123,1,Answer()
exten =&gt; 123,n,MP3Player(http://server.tld/test.mp3)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'MP3Player' =- 

[Synopsis]
Play an MP3 file or stream

[Description]
  MP3Player(location) Executes mpg123 to play the given location,
which typically would be a filename or a URL. User can exit by pressing
any key on the dialpad, or by hanging up.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>
  </section>

  <section id="applikationen-musiconhold">
    <title><code>MusicOnHold()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>MusicOnHold()</code></secondary>
    </indexterm>

    <simpara>Spielt endlos Wartemusik.</simpara>

    <synopsis>MusicOnHold(<replaceable>class</replaceable>)</synopsis>

    <simpara>Spielt die durch class spezifizierte Wartemusik, wie in
    <filename>musiconhold.conf</filename> konfiguriert. Wird
    <code>class</code> nicht angegeben, wird die Standardmusik-Klasse für
    diesen Channel verwendet. Um die Standardmusik-Klasse für einen Channel
    einzustellen, können Sie die Funktion <code>MUSICCLASS()</code>
    verwenden.</simpara>

    <simpara>Liefert -1, falls aufgelegt wird, ansonsten wird sie endlos
    ausgeführt.</simpara>

    <programlisting>; auf diese Extension könnte man Telefonverkäufer schicken:
exten =&gt; 123,1,Answer()
exten =&gt; 123,2,Playback(tt-allbusy)
exten =&gt; 123,3,MusicOnHold(default)
exten =&gt; 123,4,Goto(2)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'MusicOnHold' =- 

[Synopsis]
Play Music On Hold indefinitely

[Description]
MusicOnHold(class): Plays hold music specified by class.  If omitted, the default
music source for the channel will be used. Set the default 
class with the SetMusicOnHold() application.
Returns -1 on hangup.
Never returns otherwise.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-waitmusiconhold" />, <xref
      linkend="funktionen-musicclass" /></para>
    </formalpara>
  </section>

  <section id="applikationen-nbscat">
    <title><code>NBScat()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>NBScat()</code></secondary>
    </indexterm>

    <simpara>Wiedergabe eines lokalen NBS-Streams</simpara>

    <synopsis>NBScat()</synopsis>

    <simpara>Verwendet das <code>nbscat8k</code>-Programm, um den lokalen NBS
    (Network Broadcast Sound)-Stream zu hören. (Schauen Sie sich das
    <filename>nbs</filename>-Modul in Digiums CVS-Server an, um weitere
    Informationen zu erhalten.) Der Anrufer kann durch Drücken einer
    beliebigen Taste aussteigen.</simpara>

    <simpara>Die Anwendung liefert -1, falls aufgelegt wird, ansonsten wird
    sie endlos ausgeführt.</simpara>

    <programlisting>exten =&gt; 123,1,Answer()
exten =&gt; 123,n,NBScat()</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'NBScat' =- 

[Synopsis]
Play an NBS local stream

[Description]
  NBScat: Executes nbscat to listen to the local NBS stream.
User can exit by pressing any key
.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>
  </section>

  <section id="applikationen-nocdr">
    <title><code>NoCDR()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>NoCDR()</code></secondary>
    </indexterm>

    <simpara>Unterdrückt das CDR.</simpara>

    <synopsis>NoCDR()</synopsis>

    <simpara>Unterdrückt die Erstellung eines Anrufprotokolls (Call Detail
    Record) für den aktuellen Anruf.</simpara>

    <programlisting>; für Anrufe an 0123-45678 kein CDR:
exten =&gt; 5551212,1,Answer()
exten =&gt; 5551212,n,NoCDR()
exten =&gt; 5551212,n,Dial(Zap/4/012345678)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'NoCDR' =- 

[Synopsis]
Tell Asterisk to not maintain a CDR for the current call

[Description]
  NoCDR(): This application will tell Asterisk not to maintain a CDR for the
current call.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-forkcdr" /></para>
    </formalpara>
  </section>

  <section id="applikationen-noop">
    <title><code>NoOp()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>NoOp()</code></secondary>
    </indexterm>

    <simpara>Tut nichts (no operation).</simpara>

    <synopsis>NoOp(<replaceable>Text</replaceable>)</synopsis>

    <simpara>Diese Anwendung tut nichts - dem Namen nach. Mit
    <code>NoOp()</code> kann man aber Text auf dem Asterisk-CLI ausgeben -
    eine zum Debugging sehr nützliche Eigenschaft.</simpara>

    <simpara>Sie müssen den Text nicht in Anführungszeichen betten. Stehen
    Anführungszeichen innerhalb der Klammern, werden diese auf der Konsole
    ausgegeben.</simpara>

    <important>
      <para>Die Ausgabe von <code>NoOp()</code> auf dem CLI erfolgt erst ab
      dem Verbose-Level 3. Dieser kann im CLI mit <command>set verbose
      3</command> gesetzt werden.</para>
    </important>

    <programlisting>exten =&gt; 123,1,NoOp(Caller-ID: ${CALLERID})</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'NoOp' =- 

[Synopsis]
Do Nothing

[Description]
  NoOp(): This applicatiion does nothing. However, it is useful for debugging
purposes. Any text that is provided as arguments to this application can be
viewed at the Asterisk CLI. This method can be used to see the evaluations of
variables or functions without having any effect.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-dumpchan" />, <xref
      linkend="applikationen-log" />, <xref
      linkend="applikationen-verbose" /></para>
    </formalpara>
  </section>

  <section id="applikationen-page">
    <title><code>Page()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Page()</code></secondary>
    </indexterm>

    <simpara>Rundruf.</simpara>

    <synopsis>Page(<replaceable>Technology</replaceable>/<replaceable>Resource</replaceable>[&amp;<replaceable>Technology2</replaceable>/<replaceable>Resource2</replaceable>[&amp;<replaceable>...</replaceable>]][,<replaceable>Optionen</replaceable>])</synopsis>

    <simpara>Die als Parameter angegebenen Telefone werden angerufen und
    kommen automatisch in einen Konferenzraum, in dem sie allerdings nicht
    sprechen können. Dies kann nur der Initiator des Rundrufes.
    Optionen:</simpara>

    <variablelist termlength="3">
      <varlistentry>
        <term><code>d</code></term>

        <listitem>
          <simpara>Full-Duplex-Modus aktivieren</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>q</code></term>

        <listitem>
          <simpara>Es wird kein Ton abgespielt.</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>r</code></term>

        <listitem>
          <simpara>Der Rundruf wird in einer Datei aufgezeichnet.</simpara>
        </listitem>
      </varlistentry>
    </variablelist>

    <programlisting>exten =&gt; 123,1,Page(SIP/2000&amp;SIP/2001&amp;SIP/2002)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'Page' =- 

[Synopsis]
Pages phones

[Description]
Page(Technology/Resource&amp;Technology2/Resource2[|options])
  Places outbound calls to the given technology / resource and dumps
them into a conference bridge as muted participants.  The original
caller is dumped into the conference as a speaker and the room is
destroyed when the original caller leaves.  Valid options are:
        d - full duplex audio
        q - quiet, do not play beep to caller
        r - record the page into a file (see 'r' for app_meetme)</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>14,15c14
&lt;         q - quiet, do not play beep to caller
&lt;         r - record the page into a file (see 'r' for app_meetme)
---
&gt;    q - quiet, do not play beep to caller</screen></para>
      </formalpara>
    </note>
  </section>

  <section id="applikationen-park">
    <title><code>Park()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Park()</code></secondary>
    </indexterm>

    <simpara>Parkt den aktuellen Anruf.</simpara>

    <synopsis>Park(<replaceable>Extension</replaceable>)</synopsis>

    <simpara>Parkt den aktuellen Anruf (typischerweise in Kombination mit
    einer beaufsichtigten Übertragung, um die <quote>Parkplatznummer</quote>
    zu bestimmen). Diese Anwendung ist intern stets registriert und muss nicht
    explizit im Wählplan eingefügt werden, jedoch müssen Sie den
    <code>parkedcalls</code>-context mit der Zeile <code>include =&gt;
    parkedcalls</code> einbinden. Die Parkkonfiguration wird in
    <filename>features.conf</filename> vorgenommen.</simpara>

    <programlisting>; den Anruf auf 701 parken:
include =&gt; parkedcalls
exten =&gt; 123,1,Answer()
exten =&gt; 123,n,Park(701)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'Park' =- 

[Synopsis]
Park yourself

[Description]
Park():Used to park yourself (typically in combination with a supervised
transfer to know the parking space). This application is always
registered internally and does not need to be explicitly added
into the dialplan, although you should include the 'parkedcalls'
context (or the context specified in features.conf).

If you set the PARKINGEXTEN variable to an extension in your
parking context, park() will park the call on that extension, unless
it already exists. In that case, execution will continue at next
priority.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>12,17c12
&lt; context (or the context specified in features.conf).
&lt; 
&lt; If you set the PARKINGEXTEN variable to an extension in your
&lt; parking context, park() will park the call on that extension, unless
&lt; it already exists. In that case, execution will continue at next
&lt; priority.
---
&gt; context.</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-parkandannounce" />, <xref
      linkend="applikationen-parkedcall" /></para>
    </formalpara>
  </section>

  <section id="applikationen-parkandannounce">
    <title><code>ParkAndAnnounce()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>ParkAndAnnounce()</code></secondary>
    </indexterm>

    <simpara>Parkt den aktuellen Anruf und macht ihn über den spezifizierten
    Channel bekannt.</simpara>

    <synopsis>ParkAndAnnounce(<replaceable>Template</replaceable>,<replaceable>Timeout</replaceable>,<replaceable>Channel</replaceable>[,<replaceable>Return-context</replaceable>])</synopsis>

    <simpara>Parkt den aktuellen Anruf in dem dafür vorgesehenen Bereich (auf
    dem Parkplatz) und meldet ihn über den spezifizierten Channel.
    <code>Template</code> bezeichnet eine Liste von durch Kommas voneinander
    getrennten Dateien, die anzukündigen sind; das Wort <code>PARKED</code>
    wird durch die Parkplatznummer des Anrufs ersetzt. Der Parameter
    <code>Timeout</code> bestimmt die Zeit in Sekunden, nach deren Ablauf der
    Anruf zum <code>Return-context</code> zurückkehrt. <code>Channel</code>
    bezeichnet den Channel, der anzurufen ist, um die Ankündigung zu machen
    (<code>Console/dsp</code> ruft die Konsole auf).
    <code>Return-context</code> ist ein Label im <code>GoTo()</code>-Stil, um
    den Anruf nach der Beendigung zurückzubringen. Standardeinstellung hierfür
    ist n+1 im context <code>Return-context</code>.</simpara>

    <programlisting>include =&gt; parkedcalls
exten =&gt; 123,1,Answer()
exten =&gt; 123,n,ParkAndAnnounce(vm-youhave:a:pbx-transfer:at:vm-extension:PARKED,120,Console/dsp)
exten =&gt; 123,n,Playback(vm-nobodyavail)
exten =&gt; 123,n,Playback(vm-goodbye)
exten =&gt; 123,n,Hangup()</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'ParkAndAnnounce' =- 

[Synopsis]
Park and Announce

[Description]
  ParkAndAnnounce(announce:template|timeout|dial|[return_context]):
Park a call into the parkinglot and announce the call to another channel.

announce template: Colon-separated list of files to announce.  The word PARKED
                   will be replaced by a say_digits of the extension in which
                   the call is parked.
timeout:           Time in seconds before the call returns into the return
                   context.
dial:              The app_dial style resource to call to make the
                   announcement.  Console/dsp calls the console.
return_context:    The goto-style label to jump the call back into after
                   timeout.  Default &lt;priority+1&gt;.

The variable ${PARKEDAT} will contain the parking extension into which the
call was placed.  Use with the Local channel to allow the dialplan to make
use of this information.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>9,23c9,14
&lt; Park a call into the parkinglot and announce the call to another channel.
&lt; 
&lt; announce template: Colon-separated list of files to announce.  The word PARKED
&lt;                    will be replaced by a say_digits of the extension in which
&lt;                    the call is parked.
&lt; timeout:           Time in seconds before the call returns into the return
&lt;                    context.
&lt; dial:              The app_dial style resource to call to make the
&lt;                    announcement.  Console/dsp calls the console.
&lt; return_context:    The goto-style label to jump the call back into after
&lt;                    timeout.  Default &lt;priority+1&gt;.
&lt; 
&lt; The variable ${PARKEDAT} will contain the parking extension into which the
&lt; call was placed.  Use with the Local channel to allow the dialplan to make
&lt; use of this information.
---
&gt; Park a call into the parkinglot and announce the call over the console.
&gt; announce template: colon separated list of files to announce, the word PARKED
&gt;                    will be replaced by a say_digits of the ext the call is parked in
&gt; timeout: time in seconds before the call returns into the return context.
&gt; dial: The app_dial style resource to call to make the announcement. Console/dsp calls the console.
&gt; return_context: the goto style label to jump the call back into after timeout. default=prio+1</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-park" />, <xref
      linkend="applikationen-parkedcall" /></para>
    </formalpara>
  </section>

  <section id="applikationen-parkedcall">
    <title><code>ParkedCall()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>ParkedCall()</code></secondary>
    </indexterm>

    <simpara>Beantwortet einen geparkten Anruf.</simpara>

    <synopsis>ParkedCall(<replaceable>Extension</replaceable>)</synopsis>

    <simpara>Verbindet den Anrufer mit dem auf dem durch
    <code>Extension</code> identifizierten Parkplatz geparkten Anruf. Diese
    Anwendung ist intern ständig registriert und muss daher dem Wählplan nicht
    explizit hinzugefügt werden. Sie sollten jedoch den
    <code>parkedcalls</code>-context einbinden.</simpara>

    <programlisting>; den Anruf auf "Parkplatz" 701 wiederaufnehmen:
exten =&gt; 123,1,Answer()
exten =&gt; 123,n,ParkedCall(701)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'ParkedCall' =- 

[Synopsis]
Answer a parked call

[Description]
ParkedCall(exten):Used to connect to a parked call.  This application is always
registered internally and does not need to be explicitly added
into the dialplan, although you should include the 'parkedcalls'
context.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-park" />, <xref
      linkend="applikationen-parkandannounce" /></para>
    </formalpara>
  </section>

  <section id="applikationen-pausemonitor">
    <title><code>PauseMonitor()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>PauseMonitor()</code></secondary>
    </indexterm>

    <simpara>Stoppt das Monitoring eines Channels.</simpara>

    <synopsis>PauseMonitor()</synopsis>

    <simpara>Pausiert die Aufzeichnung eines Channels, bis die Pause mit
    <code>UnpauseMonitor()</code> wieder aufgehoben wird.</simpara>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'PauseMonitor' =- 

[Synopsis]
Pause monitoring of a channel

[Description]
PauseMonitor
Pauses monitoring of a channel until it is re-enabled by a call to UnpauseMonitor.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>-- in Version 1.2 nicht vorhanden --</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-monitor" />, <xref
      linkend="applikationen-unpausemonitor" />, <xref
      linkend="applikationen-stopmonitor" />, <xref
      linkend="applikationen-changemonitor" /></para>
    </formalpara>
  </section>

  <section id="applikationen-pausequeuemember">
    <title><code>PauseQueueMember()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>PauseQueueMember()</code></secondary>
    </indexterm>

    <simpara>Pausiert ein Warteschlangenmitglied, so dass es keine Anrufe
    empfangen kann.</simpara>

    <synopsis>PauseQueueMember([<replaceable>Schlange</replaceable>],<replaceable>Interface</replaceable>[,<replaceable>Optionen</replaceable>])</synopsis>

    <simpara>Pausiert die Durchstellung von Anrufen zu einem
    Warteschlangenmitglied. Das spezifizierte Interface wird in der gegebenen
    Warteschlange zeitweilig angehalten. Dadurch wird verhindert, dass Anrufe
    aus der Warteschlange zu diesem Interface durchgestellt werden, bis es
    nicht wieder freigegeben wurde durch <code>UnpauseQueueMember()</code>
    oder das Manager-Interface. Wenn kein Warteschlangenname angegeben ist,
    wird das Interface in jeder Warteschlange, in der es ein Mitglied ist,
    angehalten. Befindet sich das Interface nicht in der benannten
    Warteschlange, oder wenn keine Warteschlange angegeben und das Interface
    nicht Mitglied irgendeiner Warteschlange ist, wird - bei Angabe der Option
    <code>j</code> - die Ausführung bei Priorität n+101 fortgesetzt, falls
    diese existiert.</simpara>

    <simpara>Gibt -1 zurück, falls das Interface nicht gefunden wurde oder
    keine Extension existiert, zu der gesprungen werden kann, sonst 0. Setzt
    die Channel-Variable <code>PQMSTATUS</code> auf <code>PAUSED</code>
    (pausiert) oder <code>NOTFOUND</code> (nicht gefunden).</simpara>

    <programlisting>; wenn *111002 gewählt wird, wird Agent/1002 auf allen Schlangen pausiert:
exten =&gt; *11ZXXX,1,PauseQueueMember(,Agent/${EXTEN:3})

; mit *121002 wird Agent/1002 wieder aktiviert:
exten =&gt; *12ZXXX,1,UnpauseQueueMember(,Agent/${EXTEN:3})</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'PauseQueueMember' =- 

[Synopsis]
Pauses a queue member

[Description]
   PauseQueueMember([queuename]|interface[|options]):
Pauses (blocks calls for) a queue member.
The given interface will be paused in the given queue.  This prevents
any calls from being sent from the queue to the interface until it is
unpaused with UnpauseQueueMember or the manager interface.  If no
queuename is given, the interface is paused in every queue it is a
member of.  If the interface is not in the named queue, or if no queue
is given and the interface is not in any queue, it will jump to
priority n+101, if it exists and the appropriate options are set.
The application will fail if the interface is not found and no extension
to jump to exists.
The option string may contain zero or more of the following characters:
       'j' -- jump to +101 priority when appropriate.
  This application sets the following channel variable upon completion:
     PQMSTATUS      The status of the attempt to pause a queue member as a
                     text string, one of
           PAUSED | NOTFOUND
Example: PauseQueueMember(|SIP/3000)</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-unpausequeuemember" /></para>
    </formalpara>
  </section>

  <section id="applikationen-perl">
    <title><code>Perl()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Perl()</code></secondary>
    </indexterm>

    <indexterm>
      <primary><code>res_perl</code></primary>
    </indexterm>

    <simpara>Führt eine Perl-Funktion oder ein Perl-Skript aus.</simpara>

    <synopsis>Perl(<replaceable>Funktionsname</replaceable>[:<replaceable>Arg1</replaceable>[:<replaceable>Arg2</replaceable>[:<replaceable>...</replaceable>]]])</synopsis>

    <synopsis>Perl(Loadfile:<replaceable>Dateiname</replaceable>[:<replaceable>Arg1</replaceable>[:<replaceable>Arg2</replaceable>[:<replaceable>...</replaceable>]]])</synopsis>

    <important>
      <simpara>Für <code>Perl()</code> muss das Modul
      <code>res_perl</code><footnote>
          <simpara>von <ulink
          url="http://www.pbxfreeware.org/">http://www.pbxfreeware.org/</ulink>,
          Informationen zur Benutzung auf <ulink
          url="http://www.voip-info.org/wiki-Asterisk+cmd+Perl">http://www.voip-info.org/wiki-Asterisk+cmd+Perl</ulink></simpara>
        </footnote> kompiliert und geladen sein! Alternativ können mit
      <code>System()</code> Perl-Skripte ausgeführt werden.</simpara>
    </important>

    <simpara>Führt eine Funktion aus dem Paket <code>Asterisk::Embed</code> in
    <filename>/usr/local/res_perl/modules/asterisk_init.pm</filename> oder ein
    Perl-Skript (z.B. <filename>demo.pl</filename>) aus dem Verzeichnis
    <filename>/usr/local/res_perl/apps/</filename> aus, was im Vergleich zum
    Aufruf auf der Shell den Vorteil hat, dass der Interpreter nicht jedesmal
    neu geladen wird.</simpara>

    <simpara><code>res_perl</code> ist möglicherweise nicht zu aktuellen
    Asterisk-Versionen kompatibel und wird in diesem Buch nicht weiter
    beschrieben.</simpara>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-system" />, <xref
      linkend="applikationen-agi" /></para>
    </formalpara>
  </section>

  <section id="applikationen-php">
    <title><code>PHP()</code></title>

    <indexterm>
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>PHP()</code></secondary>
    </indexterm>

    <indexterm>
      <primary><code>res_php</code></primary>
    </indexterm>

    <simpara>Führt ein PHP-Skript aus.</simpara>

    <synopsis>PHP(<replaceable>Dateiname</replaceable>[|<replaceable>Arg1</replaceable>[|<replaceable>Arg2</replaceable>[|<replaceable>...</replaceable>]]])</synopsis>

    <important>
      <para>Für <code>PHP()</code> muss das Modul
      <code>res_php</code><footnote>
          <simpara>von <ulink
          url="http://eder.us/projects/asterisk_php/">http://eder.us/projects/asterisk_php/</ulink>,
          Informationen zur Benutzung auf <ulink
          url="http://www.voip-info.org/wiki-Asterisk+cmd+PHP">http://www.voip-info.org/wiki-Asterisk+cmd+PHP</ulink></simpara>
        </footnote> kompiliert und geladen sein! Alternativ können mit
      <code>System()</code> PHP-Skripte ausgeführt werden.</para>
    </important>

    <simpara>Führt ein PHP-Skript aus, was im Vergleich zum Aufruf auf der
    Shell den Vorteil hat, dass der Interpreter nicht jedesmal neu geladen
    wird.</simpara>

    <simpara><code>res_php</code> ist z.Zt. nicht mit aktuellen
    Asterisk-Versionen kompatibel und wird in diesem Buch nicht weiter
    beschrieben.</simpara>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-system" />, <xref
      linkend="applikationen-agi" /></para>
    </formalpara>
  </section>

  <section id="applikationen-pickup">
    <title><code>Pickup()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Pickup()</code></secondary>
    </indexterm>

    <simpara>Einen Anruf an eine andere Extension entgegennehmen.</simpara>

    <synopsis>Pickup(<replaceable>Extension</replaceable>[@<replaceable>context</replaceable>][&amp;<replaceable>Extension2</replaceable>@<replaceable>context2</replaceable>[&amp;<replaceable>...</replaceable>]])</synopsis>

    <simpara>Mit <code>Pickup()</code> kann ein Gespräch, das an einem anderen
    Telefon auf Entgegennahme wartet übernommen werden.
    (<quote>Heranholen</quote>)</simpara>

    <programlisting>exten =&gt; 1234,1,Pickup(2000@verkauf)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'Pickup' =- 

[Synopsis]
Directed Call Pickup

[Description]
  Pickup(extension[@context][&amp;extension2@context...]): This application can pickup any ringing channel
that is calling the specified extension. If no context is specified, the current
context will be used. If you use the special string "PICKUPMARK" for the context parameter, for example
10@PICKUPMARK, this application tries to find a channel which has defined a channel variable with the same content
as "extension".</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>8c8
&lt;   Pickup(extension[@context][&amp;extension2@context...]): This application can pickup any ringing channel
---
&gt;   Pickup(extension[@context]): This application can pickup any ringing channel
10,12c10,11
&lt; context will be used. If you use the special string "PICKUPMARK" for the context parameter, for example
&lt; 10@PICKUPMARK, this application tries to find a channel which has defined a channel variable with the same content
&lt; as "extension".
---
&gt; context will be used.
&gt; </screen></para>
      </formalpara>
    </note>
  </section>

  <section id="applikationen-playback">
    <title><code>Playback()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Playback()</code></secondary>
    </indexterm>

    <simpara>Spielt dem Anrufer eine Audiodatei vor.</simpara>

    <synopsis>Playback(<replaceable>Dateiname</replaceable>[,<replaceable>Optionen</replaceable>])</synopsis>

    <simpara>Spielt dem Anrufer die Audiodatei <code>Dateiname</code> (aus dem
    Verzeichnis <filename>/var/lib/asterisk/sounds/</filename>) vor. Der
    Dateiname enthält keine Dateiendung, damit Asterisk automatisch die
    Audiodatei mit dem niedrigsten Konvertierungsaufwand auswählen kann.
    Keine, eine oder mehr Optionen können hinzugefügt werden.</simpara>

    <simpara>Die Option <code>skip</code> bewirkt, dass die Wiedergabe der
    Nachricht übersprungen wird, wenn sich der Channel nicht im Up-Status
    befindet.</simpara>

    <simpara>Normalerweise wird der Channel beantwortet, bevor die Audiodatei
    wiedergegeben wird, es sei denn, <code>noanswer</code> ist angegeben.
    (Nicht alle Kanäle unterstützen die Wiedergabe von Nachrichten, wenn sie
    noch aufgelegt sind.)</simpara>

    <simpara>Liefert -1 zurück, wenn der Channel aufgelegt wurde. Wenn die
    Datei nicht existiert, wird zur Priorität n+101 übergegangen, falls diese
    existiert.</simpara>

    <programlisting>exten =&gt; 123,1,Answer()
exten =&gt; 123,n,Playback(tt-weasels)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'Playback' =- 

[Synopsis]
Play a file

[Description]
  Playback(filename[&amp;filename2...][|option]):  Plays back given filenames (do not put
extension). Options may also be included following a pipe symbol. The 'skip'
option causes the playback of the message to be skipped if the channel
is not in the 'up' state (i.e. it hasn't been  answered  yet). If 'skip' is 
specified, the application will return immediately should the channel not be
off hook.  Otherwise, unless 'noanswer' is specified, the channel will
be answered before the sound is played. Not all channels support playing
messages while still on hook. If 'j' is specified, the application
will jump to priority n+101 if present when a file specified to be played
does not exist.
This application sets the following channel variable upon completion:
 PLAYBACKSTATUS    The status of the playback attempt as a text string, one of
               SUCCESS | FAILED</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-background" /></para>
    </formalpara>
  </section>

  <section id="applikationen-playtones">
    <title><code>Playtones()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Playtones()</code></secondary>
    </indexterm>

    <simpara>Wiedergabe einer Tonliste.</simpara>

    <synopsis>Playtones(<replaceable>Tonliste</replaceable>)</synopsis>

    <simpara>Spielt eine Liste von Tönen ab. Die Ausführung wird
    augenblicklich mit dem nächsten Schritt fortgesetzt, während die Töne
    weiter abgespielt werden. <code>Tonliste</code> ist entweder ein Tonname,
    der in der <filename>indications.conf</filename> definiert ist, oder eine
    Liste von Tonfrequenzen und -dauern. Für eine Beschreibung der
    Spezifikation einer eigenen Tonliste siehe
    <filename>indications.conf</filename>.</simpara>

    <simpara>Verwendet die <code>StopPlaytones()</code>-Anwendung, um die
    Wiedergabe der Töne anzuhalten.</simpara>

    <programlisting>; 2 Sekunden Besetzt-, dann 2 Sekunden Stau-Signal spielen:
exten =&gt; 123,1,Playtones(busy)
exten =&gt; 123,n,Wait(2)
exten =&gt; 123,n,StopPlaytones()
exten =&gt; 123,n,Playtones(congestion)
exten =&gt; 123,n,Wait(2)
exten =&gt; 123,n,StopPlaytones()
exten =&gt; 123,n,Goto(1)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'PlayTones' =- 

[Synopsis]
Play a tone list

[Description]
PlayTones(arg): Plays a tone list. Execution will continue with the next step immediately,
while the tones continue to play.
Arg is either the tone name defined in the indications.conf configuration file, or a directly
specified list of frequencies and durations.
See the sample indications.conf for a description of the specification of a tonelist.

Use the StopPlayTones application to stop the tones playing.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-stopplaytones" />,
      <filename>indications.conf</filename>, <xref
      linkend="applikationen-busy" />, <xref
      linkend="applikationen-congestion" />, <xref
      linkend="applikationen-progress" />, <xref
      linkend="applikationen-ringing" /></para>
    </formalpara>
  </section>

  <section id="applikationen-privacymanager">
    <title><code>PrivacyManager()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>PrivacyManager()</code></secondary>
    </indexterm>

    <simpara>Verlangt die Eingabe der Telefonnummer eines Teilnehmers, falls
    keine Caller-ID-Informationen empfangen werden.</simpara>

    <synopsis>PrivacyManager([<replaceable>Versuche</replaceable>[,<replaceable>Länge</replaceable>[,<replaceable>Optionen</replaceable>]]])</synopsis>

    <simpara>Wird keine Caller-ID empfangen, wird der Channel beantwortet und
    der Anrufer aufgefordert, seine Telefonnummer einzugeben. Wird auf dem
    Channel eine Caller-ID empfangen, tut <code>PrivacyManager()</code>
    nichts.</simpara>

    <para>Dem Anrufer werden dabei <code>Versuche</code> Versuche (Default: 3)
    gewährt eine Telefonnummer mit mindestens <code>Länge</code> Stellen
    (Default: 10) einzugeben. Diese Default-Werte werden aus der Datei
    <filename>privacy.conf</filename> gelesen. Sie enthält die beiden
    folgenden Einträge: <variablelist termlength="12">
        <varlistentry>
          <term><code>maxretries</code></term>

          <listitem>
            <simpara>Gibt die Anzahl der Versuche an, die einem Anrufer zur
            Eingabe einer Caller-ID gewährt werden (Standard: 3).</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>minlength</code></term>

          <listitem>
            <simpara>Gibt die minimale erlaubte Anzahl von Ziffern in der
            eingegebenen Caller-ID-Nummer an (Standard: 10).</simpara>
          </listitem>
        </varlistentry>
      </variablelist>Wenn Sie nicht wollen, dass bei jedem Aufruf aus der
    Datei gelesen werden muss, geben Sie bei <code>PrivacyManager()</code>
    explizit Werte an.</para>

    <simpara>Mit der Option <code>j</code> wird zur Priorität n+101
    gesprungen, wenn der Anrufer nicht innerhalb der erlaubten Versuche eine
    Nummer der erforderlichen Länge eingibt.</simpara>

    <simpara>Die Channel-Variable <code>PRIVACYMGRSTATUS</code> wird entweder
    auf <code>SUCCESS</code> oder auf <code>FAILED</code> gesetzt.</simpara>

    <programlisting>exten =&gt; 123,1,Answer()
exten =&gt; 123,n,PrivacyManager()
exten =&gt; 123,n,GotoIf($["${PRIVACYMGRSTATUS}" = "FAILED"]?pm-fehler,1)
exten =&gt; 123,n,Dial(Zap/1)

exten =&gt; pm-fehler,1,Playback(tut-uns-leid)
exten =&gt; pm-fehler,n,Playback(vm-goodbye)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'PrivacyManager' =- 

[Synopsis]
Require phone number to be entered, if no CallerID sent

[Description]
  PrivacyManager([maxretries[|minlength[|options]]]): If no Caller*ID 
is sent, PrivacyManager answers the channel and asks the caller to
enter their phone number. The caller is given 3 attempts to do so.
The application does nothing if Caller*ID was received on the channel.
  Configuration file privacy.conf contains two variables:
   maxretries  default 3  -maximum number of attempts the caller is allowed 
               to input a callerid.
   minlength   default 10 -minimum allowable digits in the input callerid number.
If you don't want to use the config file and have an i/o operation with
every call, you can also specify maxretries and minlength as application
parameters. Doing so supercedes any values set in privacy.conf.
The option string may contain the following character: 
  'j' -- jump to n+101 priority after &lt;maxretries&gt; failed attempts to collect
         the minlength number of digits.
The application sets the following channel variable upon completion: 
PRIVACYMGRSTATUS  The status of the privacy manager's attempt to collect 
                  a phone number from the user. A text string that is either:
          SUCCESS | FAILED</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-zapateller" /></para>
    </formalpara>
  </section>

  <section id="applikationen-progress">
    <title><code>Progress()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Progress()</code></secondary>
    </indexterm>

    <simpara>Signalisiert Fortschritt.</simpara>

    <synopsis>Progress()</synopsis>

    <simpara>Signalisiert dem Teilnehmer, dass ein Fortschritt stattfindet
    (... dass sich <quote>was tut</quote> ;-)).</simpara>

    <simpara>Liefert stets 0 zurück.</simpara>

    <programlisting>; Fortschritt anzeigen:
exten =&gt; 123,1,Progress()</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'Progress' =- 

[Synopsis]
Indicate progress

[Description]
  Progress(): This application will request that in-band progress information
be provided to the calling channel.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-busy" />, <xref
      linkend="applikationen-congestion" />, <xref
      linkend="applikationen-playtones" />, <xref
      linkend="applikationen-ringing" /></para>
    </formalpara>
  </section>

  <section id="applikationen-queue">
    <title><code>Queue()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Queue()</code></secondary>
    </indexterm>

    <simpara>Legt den aktuellen Anruf in der spezifizierten Anrufwarteschlange
    ab.</simpara>

    <synopsis>Queue(<replaceable>Schlange</replaceable>[,<replaceable>Optionen</replaceable>[,<replaceable>URL</replaceable>[,<replaceable>Ankündigung</replaceable>[,<replaceable>Timeout</replaceable>]]]])</synopsis>

    <simpara>Fügt der angegebenen Warteschlange - wie in
    <filename>queues.conf</filename> definiert - einen eingehenden Anruf
    hinzu.</simpara>

    <para>Folgende Optionen sind möglich (auch in Kombination): <variablelist
        termlength="3">
        <varlistentry>
          <term><code>t</code></term>

          <listitem>
            <simpara>Erlaubt es dem angerufenen Teilnehmer, den Anruf
            weiterzuleiten.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>T</code></term>

          <listitem>
            <simpara>Erlaubt es dem anrufenden Teilnehmer, den Anruf
            weiterzuleiten.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>d</code></term>

          <listitem>
            <simpara>Spezifiziert einen Anruf mit Datenqualität (Modem,
            minimale Verzögerung).</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>h</code></term>

          <listitem>
            <simpara>Erlaubt es dem Angerufenen, durch Drücken von
            <code>*</code> aufzulegen.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>H</code></term>

          <listitem>
            <simpara>Erlaubt es dem Anrufer, durch Drücken von <code>*</code>
            aufzulegen.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>n</code></term>

          <listitem>
            <simpara>Verbietet eine Wiederholung des Timeouts; beendet diese
            Anwendung und geht weiter zum nächsten Schritt.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>r</code></term>

          <listitem>
            <simpara>Klingelt, statt Wartemusik zu spielen.</simpara>
          </listitem>
        </varlistentry>
      </variablelist></para>

    <simpara>Außer dass ein Anruf weitergeleitet werden kann, kann er auch
    geparkt und dann von einem anderen Teilnehmer aufgenommen
    werden.</simpara>

    <simpara>Der Parameter <code>Ankündigung</code> überschreibt die
    Standardankündigung, die Warteschlangenagenten vorgespielt wird, bevor sie
    den angegebenen Anruf beantworten.</simpara>

    <simpara>Die optionale <code>URL</code> wird dem angerufenen Teilnehmer
    übersendet, falls dies vom Channel unterstützt wird.</simpara>

    <simpara>Nach einer angegebenen Zahl von Sekunden, überprüft zwischen
    jedem <filename>queues.conf</filename> Timeout und Retry-Kreislauf, wird
    <code>Timeout</code> die Queue() zu einem Fehlschlagen zwingen.</simpara>

    <simpara>Liefert -1 zurück, falls der ursprüngliche Channel aufgelegt
    wird, oder falls der Anruf durchgestellt wird und einer der Teilnehmer den
    Anruf beendet. Ist die Warteschlange voll, existiert sie nicht oder hat
    sie keine Mitglieder, wird 0 zurückgeliefert.</simpara>

    <programlisting>; den Anrufer zur "supportschlange" hinzufügen:
exten =&gt; 123,1,Answer()
exten =&gt; 123,n,Queue(supportschlange,t)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'Queue' =- 

[Synopsis]
Queue a call for a call queue

[Description]
  Queue(queuename[|options[|URL][|announceoverride][|timeout][|AGI]):
Queues an incoming call in a particular call queue as defined in queues.conf.
This application will return to the dialplan if the queue does not exist, or
any of the join options cause the caller to not enter the queue.
The option string may contain zero or more of the following characters:
      'd' -- data-quality (modem) call (minimum delay).
      'h' -- allow callee to hang up by hitting *.
      'H' -- allow caller to hang up by hitting *.
      'n' -- no retries on the timeout; will exit this application and 
             go to the next step.
      'i' -- ignore call forward requests from queue members and do nothing
             when they are requested.
      'r' -- ring instead of playing MOH
      't' -- allow the called user transfer the calling user
      'T' -- to allow the calling user to transfer the call.
      'w' -- allow the called user to write the conversation to disk via Monitor
      'W' -- allow the calling user to write the conversation to disk via Monitor
  In addition to transferring the call, a call may be parked and then picked
up by another user.
  The optional URL will be sent to the called party if the channel supports
it.
  The optional AGI parameter will setup an AGI script to be executed on the 
calling party's channel once they are connected to a queue member.
  The timeout will cause the queue to fail out after a specified number of
seconds, checked between each queues.conf 'timeout' and 'retry' cycle.
  This application sets the following channel variable upon completion:
      QUEUESTATUS    The status of the call as a text string, one of
             TIMEOUT | FULL | JOINEMPTY | LEAVEEMPTY | JOINUNAVAIL | LEAVEUNAVAIL</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>8c8
&lt;   Queue(queuename[|options[|URL][|announceoverride][|timeout][|AGI]):
---
&gt;   Queue(queuename[|options[|URL][|announceoverride][|timeout]]):
17,19c17
&lt;              go to the next step.
&lt;       'i' -- ignore call forward requests from queue members and do nothing
&lt;              when they are requested.
---
&gt;        go to the next step.
29,30d26
&lt;   The optional AGI parameter will setup an AGI script to be executed on the 
&lt; calling party's channel once they are connected to a queue member.</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-queuelog" />, <xref
      linkend="warteschleifen" /></para>
    </formalpara>
  </section>

  <section id="applikationen-queuelog">
    <title><code>QueueLog()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>QueueLog()</code></secondary>
    </indexterm>

    <simpara>Schreibt einen Eintrag in das Queue-Log.</simpara>

    <synopsis>QueueLog(<replaceable>Schlangenname</replaceable>,<replaceable>UniqueID</replaceable>,<replaceable>AgentenNr</replaceable>,<replaceable>Event</replaceable>[,<replaceable>weitere Infos</replaceable>])</synopsis>

    <simpara>Schreibt einen Eintrag in das Queue-Log (normalerweise
    <filename>/var/log/asterisk/queue_log</filename>). Damit können Sie z.B.
    selbst-definierte Ereignisse aufzeichnen. Lesen Sie <xref
    linkend="warteschleifen-log" /> für besseres Verständnis.</simpara>

    <programlisting>QueueLog(supportschlange,${UNIQUEID},${AGENT},MITTAGSPAUSE,Guten Appetit)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'QueueLog' =- 

[Synopsis]
Writes to the queue_log

[Description]
   QueueLog(queuename|uniqueid|agent|event[|additionalinfo]):
Allows you to write your own events into the queue log
Example: QueueLog(101|${UNIQUEID}|${AGENT}|WENTONBREAK|600)</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>-- in Version 1.2 nicht vorhanden --</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-queue" />, <xref
      linkend="warteschleifen-log" /></para>
    </formalpara>
  </section>

  <section id="applikationen-random">
    <title><code>Random()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Random()</code></secondary>
    </indexterm>

    <simpara>Springt zu einer zufälligen Priorität.</simpara>

    <synopsis>Random([<replaceable>Wahrscheinlichkeit</replaceable>]:[[<replaceable>context</replaceable>,]<replaceable>Extension</replaceable>,]<replaceable>Priorität</replaceable>)</synopsis>

    <simpara>Springt bedingt zu der spezifizierten Priorität (und optional
    Extension und context), basierend auf der angegebenen Wahrscheinlichkeit,
    die ein ganze Zahl zwischen 1 und 100 sein muss. Die Anwendung springt in
    <code>Wahrscheinlichkeit</code> Prozent der Fälle zu dem angegebenen
    Ziel.</simpara>

    <programlisting>; Glücksspiel mit jedesmal 20% Gewinnchance:
exten =&gt; 123,1,Random(20:gewonnen,1)
exten =&gt; 123,n,Goto(verloren,1)

exten =&gt; gewonnen,1,Playback(gewonnen)
exten =&gt; gewonnen,n,Goto(123,1)

exten =&gt; verloren,1,Playback(verloren)
exten =&gt; verloren,n,Goto(123,1)</programlisting>

    <important>
      <simpara>Die Applikation <code>Random()</code> ist seit 1.4
      <quote>deprecated</quote> und wird durch die Funktion
      <code>RAND()</code> ersetzt.</simpara>
    </important>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'Random' =- 

[Synopsis]
Conditionally branches, based upon a probability

[Description]
Random([probability]:[[context|]extension|]priority)
  probability := INTEGER in the range 1 to 100
DEPRECATED: Use GotoIf($[${RAND(1,100)} &gt; &lt;number&gt;]?&lt;label&gt;)</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>10d9
&lt; DEPRECATED: Use GotoIf($[${RAND(1,100)} &gt; &lt;number&gt;]?&lt;label&gt;)</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="funktionen-rand" /></para>
    </formalpara>
  </section>

  <section id="applikationen-read">
    <title><code>Read()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Read()</code></secondary>
    </indexterm>

    <simpara>Liest DTMF-Ziffern eines Anrufers und weist die Eingabe einer
    Variablen zu.</simpara>

    <synopsis>Read(<replaceable>Variablenname</replaceable>[,<replaceable>Dateiname</replaceable>[,<replaceable>maxZiffern</replaceable>[,<replaceable>Option</replaceable>[,<replaceable>Versuche</replaceable>[,<replaceable>Timeout</replaceable>]]]]])</synopsis>

    <simpara>Liest eine mit <code>#</code> abgeschlossene Reihe von Ziffern
    von einem Teilnehmer, und legt sie in einer gegebenen Variablen
    ab.</simpara>

    <simpara>Wenn <code>Dateiname</code> (ohne Endung!) angegeben ist, wird
    dem Anrufer diese Datei vor dem Einlesen vorgespielt.</simpara>

    <simpara><code>maxZiffern</code> bestimmt die maximal zu akzeptierende
    Anzahl von Ziffern. Ist der Parameter angegeben, beendet die Anwendung das
    Einlesen, nachdem <code>maxZiffern</code> Ziffern eingegeben wurden (ohne
    dass der Teilnehmer mit der <code>#</code>-Taste bestätigen muss).
    Standardeinstellung ist 0, was bedeutet, dass keine Begrenzung existiert
    und auf die Eingabe von <code>#</code> gewartet wird. Der größte
    akzeptierte Wert ist 255.</simpara>

    <simpara>Die Option <code>skip</code> bewirkt sofortige Rückkehr, falls
    der Channel nicht aktiv ist. <code>noanswer</code> bewirkt Einlesen sogar
    bei einem inaktiven Channel.</simpara>

    <simpara>Der Anrufer hat maximal <code>Versuche</code> Versuche, innerhalb
    von <code>Timout</code> Sekunden eine Eingabe zu machen. (Ein Timeout von
    0 bedeutet unendlich.)</simpara>

    <simpara>Liefert -1 zurück im Falle eines Auflegens oder Fehlers, sonst
    0.</simpara>

    <programlisting>; eine maximal vierstellige Zahl einlesen (3 Versuche) und dem Anrufer ansagen:
exten =&gt; 123,1,Read(NUMMER,,4,3)
exten =&gt; 123,n,SayNumber(${NUMMER})
exten =&gt; 123,n,Goto(1)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'Read' =- 

[Synopsis]
Read a variable

[Description]
  Read(variable[|filename][|maxdigits][|option][|attempts][|timeout])

Reads a #-terminated string of digits a certain number of times from the
user in to the given variable.
  filename   -- file to play before reading digits or tone with option i
  maxdigits  -- maximum acceptable number of digits. Stops reading after
                maxdigits have been entered (without requiring the user to
                press the '#' key).
                Defaults to 0 - no limit - wait for the user press the '#' key.
                Any value below 0 means the same. Max accepted value is 255.
  option     -- options are 's' , 'i', 'n'
                's' to return immediately if the line is not up,
                'i' to play  filename as an indication tone from your indications.conf
                'n' to read digits even if the line is not up.
  attempts   -- if greater than 1, that many attempts will be made in the 
                event no data is entered.
  timeout    -- An integer number of seconds to wait for a digit response. If greater
                than 0, that value will override the default timeout.

Read should disconnect if the function fails or errors out.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>12c12
&lt;   filename   -- file to play before reading digits or tone with option i
---
&gt;   filename   -- file to play before reading digits.
18,21c18,19
&lt;   option     -- options are 's' , 'i', 'n'
&lt;                 's' to return immediately if the line is not up,
&lt;                 'i' to play  filename as an indication tone from your indications.conf
&lt;                 'n' to read digits even if the line is not up.
---
&gt;   option     -- may be 'skip' to return immediately if the line is not up,
&gt;                 or 'noanswer' to read digits even if the line is not up.
24,25c22
&lt;   timeout    -- An integer number of seconds to wait for a digit response. If greater
&lt;                 than 0, that value will override the default timeout.
---
&gt;   timeout    -- if greater than 0, that value will override the default timeout.</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-senddtmf" /></para>
    </formalpara>
  </section>

  <section id="applikationen-readfile">
    <title><code>ReadFile()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>ReadFile()</code></secondary>
    </indexterm>

    <simpara>Liest eine Datei ein.</simpara>

    <synopsis>ReadFile(<replaceable>Variablenname</replaceable>=<replaceable>Dateiname</replaceable>,<replaceable>Länge</replaceable>)</synopsis>

    <simpara>Liest den Inhalt einer Datei und speichert ihn in einer Variable.
    Dabei werden maximal <code>Länge</code> Zeichen eingelesen.</simpara>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'ReadFile' =- 

[Synopsis]
ReadFile(varname=file,length)

[Description]
ReadFile(varname=file,length)
  Varname - Result stored here.
  File - The name of the file to read.
  Length - Maximum number of characters to capture.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>
  </section>

  <section id="applikationen-realtime">
    <title><code>RealTime()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>RealTime()</code></secondary>
    </indexterm>

    <simpara>Holt Informationen vom
    RealTime-Konfigurationssteuerprogramm.</simpara>

    <synopsis>RealTime(<replaceable>Familie</replaceable>,<replaceable>Spalte</replaceable>,<replaceable>Wert</replaceable>[,<replaceable>Präfix</replaceable>])</synopsis>

    <simpara>Benutzt das RealTime-Konfigurationssteuerprogramm, um Daten in
    Channelvariablen einzulesen. Alle eindeutigen Spaltennamen aus der
    angegebenen Familie werden als Channelvariablen gesetzt. Dabei kann ihr
    Name ein optionales Namenspräfix <code>Präfix</code> erhalten (zum
    Beispiel würde ein Präfix <code>var_</code> den Spaltennamen
    <code>test</code> in die Variable <code>${var_test}</code>
    überführen).</simpara>

    <simpara>Die Channelvariable <code>REALTIMECOUNT</code> wird auf die
    Anzahl der gelesenen Werte gesetzt.</simpara>

    <para>In der <filename>extconfig.conf</filename>:<programlisting>; Familie =&gt; DBMS,DB-Name,Tabelle
sipusers =&gt; mysql,asterisk,sip_users</programlisting>In der
    <filename>extensions.conf</filename>:<programlisting>exten =&gt; 123,1,RealTime(sipusers,ext,5678,var_)</programlisting>Führt
    das folgende SQL-Query in der Datenbank <code>asterisk</code> aus:</para>

    <simpara><code>SELECT * FROM sip_users WHERE ext = 5678</code></simpara>

    <para>Angenommen die Tabelle hat eine Spalte <code>vorname</code> und eine
    Spalte <code>nachname</code>, dann können wir die Werte so im CLI
    ausgeben:<programlisting>exten =&gt; 123,n,NoOp(Der Vorname von Ext. 5678: ${var_vorname})
exten =&gt; 123,n,NoOp(Der Nachname von Ext. 5678: ${var_nachname})</programlisting></para>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'RealTime' =- 

[Synopsis]
Realtime Data Lookup

[Description]
Use the RealTime config handler system to read data into channel variables.
RealTime(&lt;family&gt;|&lt;colmatch&gt;|&lt;value&gt;[|&lt;prefix&gt;])

All unique column names will be set as channel variables with optional prefix
to the name.  For example, a prefix of 'var_' would make the column 'name'
become the variable ${var_name}.  REALTIMECOUNT will be set with the number
of values read.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>11,14c11,13
&lt; All unique column names will be set as channel variables with optional prefix
&lt; to the name.  For example, a prefix of 'var_' would make the column 'name'
&lt; become the variable ${var_name}.  REALTIMECOUNT will be set with the number
&lt; of values read.
---
&gt; All unique column names will be set as channel variables with optional prefix to the name.
&gt; e.g. prefix of 'var_' would make the column 'name' become the variable ${var_name}
&gt; </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-realtimeupdate" /></para>
    </formalpara>
  </section>

  <section id="applikationen-realtimeupdate">
    <title><code>RealTimeUpdate()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>RealTimeUpdate()</code></secondary>
    </indexterm>

    <simpara>Aktualisiert einen Wert mit Hilfe des
    RealTime-Konfigurationssteuerprogramms.</simpara>

    <synopsis>RealTimeUpdate(<replaceable>Familie</replaceable>,<replaceable>Spalte</replaceable>,<replaceable>Wert</replaceable>,<replaceable>UpdateSpalte</replaceable>,<replaceable>UpdateWert</replaceable>)</synopsis>

    <simpara>Benutzt das RealTime-Konfigurationssteuerprogrammsystem, um einen
    Wert zu aktualisieren. Das Feld <code>UpdateSpalte</code> in der Zeile,
    bei der die Spalte <code>UpdateSpalte</code> in der Familie
    <code>Familie</code> mit <code>Wert</code> übereinstimmt, wird auf den
    Wert <code>UpdateWert</code> aktualisiert.</simpara>

    <programlisting>; bei der Situation wie im Beispiel zu RealTime() könnten wir diesen
; Befehl ausführen:
exten =&gt; 123,1,RealTimeUpdate(sipusers,ext,5678,vorname,Peter)
; resultierender SQL-Befehl:
UPDATE sip_users SET vorname = 'Peter' WHERE ext = '5678'</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'RealTimeUpdate' =- 

[Synopsis]
Realtime Data Rewrite

[Description]
Use the RealTime config handler system to update a value
RealTimeUpdate(&lt;family&gt;|&lt;colmatch&gt;|&lt;value&gt;|&lt;newcol&gt;|&lt;newval&gt;)

The column &lt;newcol&gt; in 'family' matching column &lt;colmatch&gt;=&lt;value&gt; will be
updated to &lt;newval&gt;.  REALTIMECOUNT will be set with the number of rows
updated or -1 if an error occurs.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>11,13c11
&lt; The column &lt;newcol&gt; in 'family' matching column &lt;colmatch&gt;=&lt;value&gt; will be
&lt; updated to &lt;newval&gt;.  REALTIMECOUNT will be set with the number of rows
&lt; updated or -1 if an error occurs.
---
&gt; The column &lt;newcol&gt; in 'family' matching column &lt;colmatch&gt;=&lt;value&gt; will be updated to &lt;newval&gt;</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-realtime" /></para>
    </formalpara>
  </section>

  <section id="applikationen-record">
    <title><code>Record()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Record()</code></secondary>
    </indexterm>

    <simpara>Aufnahme von Audio auf einem Channel in eine Datei</simpara>

    <para>ab Asterisk 1.2: <synopsis>Record(<replaceable>Basisname</replaceable>[.<replaceable>Format</replaceable>[,<replaceable>Stille</replaceable>[,<replaceable>maxDauer</replaceable>[,<replaceable>Optionen</replaceable>]]]])</synopsis></para>

    <simpara>Nimmt Audio auf dem Channel auf und speichert es in der Datei
    <code>Basisname.Format</code>. Existiert diese Datei bereits, wird sie
    überschrieben.</simpara>

    <para>Optionale Parameter sind: <variablelist termlength="10">
        <varlistentry>
          <term><code>format</code></term>

          <listitem>
            <simpara>Spezifiziert das Dateiformat der Aufnahmedatei
            (<code>g723</code>, <code>g729</code>, <code>gsm</code>,
            <code>h263</code>, <code>ulaw</code>, <code>alaw</code>,
            <code>wav</code>, ...)</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>Stille</code></term>

          <listitem>
            <simpara>Gibt die Dauer in Sekunden an, die geräuschlos
            verstreichen darf, bevor die Aufnahme beendet wird.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>maxDauer</code></term>

          <listitem>
            <simpara>Gibt die maximale Aufnahmedauer in Sekunden an. Falls
            nicht angegeben oder 0, gibt es keine Obergrenze.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>Optionen</code></term>

          <listitem>
            <para>Kann beliebige der aufgeführten Flags enthalten:
            <variablelist termlength="3">
                <varlistentry>
                  <term><code>s</code></term>

                  <listitem>
                    <simpara>Nimmt nicht auf, wenn die Leitung bisher nicht
                    beantwortet wurde.</simpara>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term><code>n</code></term>

                  <listitem>
                    <simpara>Antwortet nicht, aber nimmt trotzdem auf, auch
                    wenn die Leitung bisher nicht beantwortet wurde.</simpara>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term><code>a</code></term>

                  <listitem>
                    <simpara>Hängt die Aufnahme an die bereits bestehende
                    Aufnahme an, statt sie zu überschreiben.</simpara>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term><code>t</code></term>

                  <listitem>
                    <simpara>Benutzt die alternative Abschlusstaste
                    <code>*</code> an Stelle der standardmäßig eingestellten
                    <code>#</code>-Taste.</simpara>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term><code>q</code></term>

                  <listitem>
                    <simpara>Keinen Piep-Ton vor der Aufnahme
                    spielen.</simpara>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term><code>x</code></term>

                  <listitem>
                    <simpara>Auch die Abbruchtasten <code>#</code> oder
                    <code>*</code> als DTMF-Töne aufzeichnen. Die Aufnahme
                    kann dann nur durch Timeout von <code>maxDauer</code> oder
                    Auflegen beendet werden.</simpara>
                  </listitem>
                </varlistentry>
              </variablelist></para>
          </listitem>
        </varlistentry>
      </variablelist></para>

    <simpara>Enthält der <code>Basisname</code> die Zeichenkette
    <code>%d</code>, wird diese durch eine Nummerierung ersetzt, die bei jedem
    erneuten Aufnehmen der Datei um 1 erhöht wird.</simpara>

    <simpara>Der Teilnehmer kann die Taste <code>#</code> benutzen, um die
    Aufnahme abzubrechen und zur nächsten Priorität überzugehen. Beim Auflegen
    wird die Aufnahme verworfen.</simpara>

    <simpara>Liefert -1 zurück, wenn der Benutzer auflegt, sonst 0.</simpara>

    <programlisting>; den Namen des Anrufers aufzeichnen:
exten =&gt; 123,1,Playback(bitte-sprechen-sie-ihren-namen-nach-dem-ton)
exten =&gt; 123,n,Record(/tmp/name.gsm,3,10)
exten =&gt; 123,n,Playback(/tmp/name)</programlisting>

    <simpara>Beachten Sie auch die Hinweise bei
    <code>Monitor()</code>.</simpara>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'Record' =- 

[Synopsis]
Record to a file

[Description]
  Record(filename.format|silence[|maxduration][|options])

Records from the channel into a given filename. If the file exists it will
be overwritten.
- 'format' is the format of the file type to be recorded (wav, gsm, etc).
- 'silence' is the number of seconds of silence to allow before returning.
- 'maxduration' is the maximum recording duration in seconds. If missing
or 0 there is no maximum.
- 'options' may contain any of the following letters:
     'a' : append to existing recording rather than replacing
     'n' : do not answer, but record anyway if line not yet answered
     'q' : quiet (do not play a beep tone)
     's' : skip recording if the line is not yet answered
     't' : use alternate '*' terminator key (DTMF) instead of default '#'
     'x' : ignore all terminator keys (DTMF) and keep recording until hangup

If filename contains '%d', these characters will be replaced with a number
incremented by one each time the file is recorded. 

Use 'show file formats' to see the available formats on your system

User can press '#' to terminate the recording and continue to the next priority.

If the user should hangup during a recording, all data will be lost and the
application will teminate.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>21,22c21
&lt;      't' : use alternate '*' terminator key (DTMF) instead of default '#'
&lt;      'x' : ignore all terminator keys (DTMF) and keep recording until hangup
---
&gt;      't' : use alternate '*' terminator key instead of default '#'</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-dictate" />, <xref
      linkend="applikationen-monitor" />, <xref
      linkend="applikationen-mixmonitor" /></para>
    </formalpara>
  </section>

  <section id="applikationen-removequeuemember">
    <title><code>RemoveQueueMember()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>RemoveQueueMember()</code></secondary>
    </indexterm>

    <simpara>Entfernt dynamisch Warteschlangenmitglieder.</simpara>

    <synopsis>RemoveQueueMember(<replaceable>Schlange</replaceable>[,<replaceable>Interface</replaceable>])</synopsis>

    <simpara>Enfernt das spezifizierte Interface dynamisch aus der
    Warteschlange. Ist <code>Interface</code> nicht angegeben, entfernt die
    Anwendung das momentan in Verwendung befindliche Interface aus der
    Warteschlange.</simpara>

    <simpara>Ist das Interface nicht in der Warteschlange enthalten und eine
    Priorität n+101 existiert, wird die Anwendung zu dieser Priorität
    übergehen. Andernfalls wird sie einen Fehler zurückliefern.</simpara>

    <simpara>Liefert -1, wenn ein Fehler auftritt, sonst 0.</simpara>

    <programlisting>; SIP/3000 aus der "supportschlange" entfernen:
exten =&gt; 123,1,RemoveQueueMember(supportschlange,SIP/3000)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'RemoveQueueMember' =- 

[Synopsis]
Dynamically removes queue members

[Description]
   RemoveQueueMember(queuename[|interface[|options]]):
Dynamically removes interface to an existing queue
If the interface is NOT in the queue and there exists an n+101 priority
then it will then jump to this priority.  Otherwise it will return an error
The option string may contain zero or more of the following characters:
       'j' -- jump to +101 priority when appropriate.
  This application sets the following channel variable upon completion:
     RQMSTATUS      The status of the attempt to remove a queue member as a
                     text string, one of
           REMOVED | NOTINQUEUE | NOSUCHQUEUE 
Example: RemoveQueueMember(techsupport|SIP/3000)</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-addqueuemember" />, <xref
      linkend="applikationen-queue" />,
      <filename>queues.conf</filename></para>
    </formalpara>
  </section>

  <section id="applikationen-resetcdr">
    <title><code>ResetCDR()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>ResetCDR()</code></secondary>
    </indexterm>

    <simpara>Setzt das Anrufprotokoll (Call Detail Record) zurück.</simpara>

    <synopsis>ResetCDR([<replaceable>Optionen</replaceable>])</synopsis>

    <simpara>Setzt das Anrufprotokoll (Call Detail Record) zurück. Ist die
    Option <code>w</code> angegeben, wird eine Kopie des aktuellen
    Anrufprotokolls gespeichert, bevor das aktuelle CDR gelöscht
    wird.</simpara>

    <simpara>Liefert stets 0 zurück.</simpara>

    <programlisting>; das aktuelle CDR speichern und dann zurücksetzen:
exten =&gt; 123,1,Answer()
exten =&gt; 123,n,Playback(tt-monkeys)
exten =&gt; 123,n,ResetCDR(w)
exten =&gt; 123,n,Playback(tt-monkeys)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'ResetCDR' =- 

[Synopsis]
Resets the Call Data Record

[Description]
  ResetCDR([options]):  This application causes the Call Data Record to be
reset.
  Options:
    w -- Store the current CDR record before resetting it.
    a -- Store any stacked records.
    v -- Save CDR variables.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-forkcdr" />, <xref
      linkend="applikationen-nocdr" /></para>
    </formalpara>
  </section>

  <section id="applikationen-retrydial">
    <title><code>RetryDial()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>RetryDial()</code></secondary>
    </indexterm>

    <simpara>Versucht, einen Anruf zu tätigen, und wiederholt den Versuch bei
    einem Fehlschlag.</simpara>

    <synopsis>RetryDial(<replaceable>Ankündigung</replaceable>,<replaceable>Wartezeit</replaceable>,<replaceable>Versuche</replaceable>,<replaceable>Tech</replaceable>/<replaceable>Res</replaceable>[&amp;<replaceable>Tech2</replaceable>/<replaceable>Res2</replaceable>...][,<replaceable>Timeout</replaceable>[,<replaceable>Optionen</replaceable>[,<replaceable>URL</replaceable>]]])</synopsis>

    <simpara>Versucht, wie <code>Dial()</code>, einen Anruf zu tätigen. Kann
    kein Channel erreicht werden, wird die Datei <code>Ankündigung</code>
    (ohne Endung!) abgespielt und <code>Wartezeit</code> Sekunden gewartet,
    bis der Versuch wiederholt wird. Per Default wir 10 Sekunden gewartet.
    Nach <code>Versuche</code> Versuchen wird der Anruft mit der nächsten
    Priorität im Wählplan fortgesetzt. Ist <code>Versuche</code> auf 0 oder -1
    gesetzt, wird der Anrufversuch endlos wiederholt.</simpara>

    <simpara>In der Wartezeit kann eine einziffrige Extension gewählt werden.
    Existiert diese Extensions im durch <code>${EXITCONTEXT}</code>
    spezifizierten context (oder im aktuellen), wird der Anruf unmittelbar an
    diese Extension weitergeleitet.</simpara>

    <simpara>Alle Parameter nach <code>Versuche</code> werden direkt an die
    <code>Dial()</code>-Anwendung weitergeleitet.</simpara>

    <programlisting>; 3-mal versuchen, die Nummer zu erreichen, Wdh. nach 5 Sekunden:
exten =&gt; 123,1,RetryDial(versuche-zu-verbinden,5,3,IAX2/VOIP/012345678,30)
; wenn der Anrufer während des Wählens 0 drückt, auf Zap/4 versuchen:
exten =&gt; 0,1,RetryDial(versuche-zu-verbinden,5,3,Zap/4/012345678,30)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'RetryDial' =- 

[Synopsis]
Place a call, retrying on failure allowing optional exit extension.

[Description]
  RetryDial(announce|sleep|retries|dialargs): This application will attempt to
place a call using the normal Dial application. If no channel can be reached,
the 'announce' file will be played. Then, it will wait 'sleep' number of
seconds before retying the call. After 'retires' number of attempts, the
calling channel will continue at the next priority in the dialplan. If the
'retries' setting is set to 0, this application will retry endlessly.
  While waiting to retry a call, a 1 digit extension may be dialed. If that
extension exists in either the context defined in ${EXITCONTEXT} or the current
one, The call will jump to that extension immediately.
  The 'dialargs' are specified in the same format that arguments are provided
to the Dial application.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-dial" /></para>
    </formalpara>
  </section>

  <section id="applikationen-return">
    <title><code>Return()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Return()</code></secondary>
    </indexterm>

    <simpara>Kehrt von einem Unterprogramm zurück.</simpara>

    <synopsis>Return()</synopsis>

    <simpara>Kehrt von einem Unterprogramm, das mit <code>Gosub()</code> oder
    <code>GosubIf()</code> aufgerufen wurde, zurück an die Anweisung, die im
    Dialplan auf den Sprungbefehl folgt.</simpara>

    <programlisting>exten =&gt; 123,1,Playback(tt-monkeys)
exten =&gt; 123,n,Gosub(mein-unterprogramm,s,1)
exten =&gt; 123,n,Playback(tt-monkeys)
exten =&gt; 123,n,Hangup()

[mein-unterprogramm]
exten =&gt; s,1,Playback(tt-weasels)
exten =&gt; s,n,Return()</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'Return' =- 

[Synopsis]
Return from gosub routine

[Description]
Return()
  Jumps to the last label on the stack, removing it.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-gosub" />, <xref
      linkend="applikationen-gosubif" /></para>
    </formalpara>
  </section>

  <section id="applikationen-ringing">
    <title><code>Ringing()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Ringing()</code></secondary>
    </indexterm>

    <simpara>Signalisiert Klingelton.</simpara>

    <synopsis>Ringing()</synopsis>

    <simpara>Signalisiert dem Teilnehmer Klingeln. Wie diese Signalisierung
    erfolgt, hängt vom Channeltreiber ab. Beachten Sie, dass diese Anwendung
    den Anrufer nicht mit tatsächlichem Klingeln versieht. Benutzen Sie hierzu
    die Anwendung <code>Playtones()</code>.</simpara>

    <simpara>Liefert stets 0 zurück.</simpara>

    <programlisting>; Klingeln vortäuschen:
exten =&gt; 123,1,Ringing()
exten =&gt; 123,n,Wait(5)
exten =&gt; 123,n,Playback(tt-somethingwrong)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'Ringing' =- 

[Synopsis]
Indicate ringing tone

[Description]
  Ringing(): This application will request that the channel indicate a ringing
tone to the user.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-busy" />, <xref
      linkend="applikationen-congestion" />, <xref
      linkend="applikationen-progress" />, <xref
      linkend="applikationen-ringing" />, <xref
      linkend="applikationen-playtones" /></para>
    </formalpara>
  </section>

  <section id="applikationen-sayalpha">
    <title><code>SayAlpha()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>SayAlpha()</code></secondary>
    </indexterm>

    <simpara>Spricht eine Zeichenkette.</simpara>

    <synopsis>SayAlpha(<replaceable>String</replaceable>)</synopsis>

    <simpara>Buchstabiert den übergebenen String unter Verwendung der
    aktuellen Spracheinstellung für den Channel. Die Sprache kann mit der
    Funktion <code>LANGUAGE()</code> geändert werden.</simpara>

    <programlisting>exten =&gt; 123,1,SayAlpha(ABC123)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'SayAlpha' =- 

[Synopsis]
Say Alpha

[Description]
  SayAlpha(string): This application will play the sounds that correspond to
the letters of the given string.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-saydigits" />, <xref
      linkend="applikationen-saynumber" />, <xref
      linkend="applikationen-sayphonetic" /></para>
    </formalpara>
  </section>

  <section id="applikationen-saydigits">
    <title><code>SayDigits()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>SayDigits()</code></secondary>
    </indexterm>

    <simpara>Spricht die übergebenen Ziffern.</simpara>

    <synopsis>SayDigits(<replaceable>Ziffern</replaceable>)</synopsis>

    <simpara>Spricht die übergebenen Ziffern unter Verwendung der aktuellen
    Spracheinstellung für den Channel. Die Sprache kann mit der Funktion
    <code>LANGUAGE()</code> geändert werden.</simpara>

    <programlisting>exten =&gt; 123,1,SayDigits(1234)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'SayDigits' =- 

[Synopsis]
Say Digits

[Description]
  SayDigits(digits): This application will play the sounds that correspond
to the digits of the given number. This will use the language that is currently
set for the channel. See the LANGUAGE function for more information on setting
the language for the channel.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-sayalpha" />, <xref
      linkend="applikationen-saynumber" />, <xref
      linkend="applikationen-sayphonetic" /></para>
    </formalpara>
  </section>

  <section id="applikationen-saynumber">
    <title><code>SayNumber()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>SayNumber()</code></secondary>
    </indexterm>

    <simpara>Spricht die angegebene Zahl.</simpara>

    <synopsis>SayNumber(<replaceable>Nummer</replaceable>[,<replaceable>Genus</replaceable>])</synopsis>

    <simpara>Spricht die angegebene Zahl unter Verwendung der aktuellen
    Spracheinstellung für den Channel. Die Sprache kann mit der Funktion
    <code>LANGUAGE()</code> geändert werden.</simpara>

    <para>Bisher werden Ganzzahlen von 1 bis 99.999.999 in den folgenden
    Sprachen syntaktisch unterstützt: <variablelist termlength="4">
        <varlistentry>
          <term><code>da</code></term>

          <listitem>
            <simpara>Dänisch</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>de</code></term>

          <listitem>
            <simpara>Deutsch</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>en</code></term>

          <listitem>
            <simpara>Englisch</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>es</code></term>

          <listitem>
            <simpara>Spanisch</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>fr</code></term>

          <listitem>
            <simpara>Französisch</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>it</code></term>

          <listitem>
            <simpara>Italienisch</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>nl</code></term>

          <listitem>
            <simpara>Niederländisch</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>no</code></term>

          <listitem>
            <simpara>Norwegisch</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>pl</code></term>

          <listitem>
            <simpara>Polnisch</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>pt</code></term>

          <listitem>
            <simpara>Portugiesisch</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>se</code></term>

          <listitem>
            <simpara>Schwedisch</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>tw</code></term>

          <listitem>
            <simpara>Taiwanesisch</simpara>
          </listitem>
        </varlistentry>
      </variablelist></para>

    <simpara>Kennt die aktuelle Sprache Geschlechter (Genus, Sexus), kann der
    Parameter <code>Genus</code> übergeben werden und das Genus der zu
    sprechenden Zahl zu ändern.</simpara>

    <simpara>Benutzen Sie bei europäischen Sprachen wie Deutsch, Französisch,
    Spanisch, Portugiesisch das Genus <code>f</code> für Femininum,
    <code>m</code> für Maskulinum und <code>n</code> für Neutrum.</simpara>

    <simpara>Benutzen Sie bei nordischen Sprachen wie Dänisch, Schwedisch oder
    Norwegisch das <code>Genus</code> <code>c</code> für Commune (/Utrum,
    belebt) und <code>n</code> für Neutrum (/Ne-utrum, unbelebt).</simpara>

    <simpara>Benutzen Sie für Aufzählungen im deutschen Plural das
    <code>Genus</code> <code>p</code>.</simpara>

    <simpara>Damit diese Anwendung mit anderen Sprachen als Englisch
    funktioniert, müssen die entsprechenden Audiodateien für die jeweilige
    gewünschte Sprache in
    <filename>/var/lib/asterisk/sounds/digits/</filename> (bzw.
    Unterverzeichnissen wie <filename>de/</filename>) vorhanden
    sein.</simpara>

    <programlisting>; in Englisch sprechen:
exten =&gt; 123,1,Set(LANGUAGE=en)
exten =&gt; 123,n,SayNumber(1234)
; "one - thousand - two - hundred - and - thirty - four"

; in Deutsch sprechen:
exten =&gt; 123,1,Set(LANGUAGE=de)
exten =&gt; 123,n,SayNumber(1234)
; "ein - Tausend - zwei - Hundert - und - vier - und - dreißig"</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'SayNumber' =- 

[Synopsis]
Say Number

[Description]
  SayNumber(digits[,gender]): This application will play the sounds that
correspond to the given number. Optionally, a gender may be specified.
This will use the language that is currently set for the channel. See the
LANGUAGE function for more information on setting the language for the channel.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-sayalpha" />, <xref
      linkend="applikationen-saydigits" />, <xref
      linkend="applikationen-sayphonetic" /></para>
    </formalpara>
  </section>

  <section id="applikationen-sayphonetic">
    <title><code>SayPhonetic()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>SayPhonetic()</code></secondary>
    </indexterm>

    <simpara>Buchstabiert die angegebene Zeichenkette phonetisch.</simpara>

    <synopsis>SayPhonetic(<replaceable>String</replaceable>)</synopsis>

    <simpara>Buchstabiert den angegebenen String unter Verwendung des
    phonetischen NATO-Alphabets bzw. Funker-Alphabets (je nach Sprache). Die
    Sprache kann mit der Funktion <code>LANGUAGE()</code> geändert werden.
    Umlaute/Sonderzeichen sind bisher nicht möglich.</simpara>

    <programlisting>exten =&gt; 123,1,Set(LANGUAGE=en)
exten =&gt; 123,n,SayPhonetic(asterisk)
; Alpha Sierra Tango Echo Romeo India Sierra Kilo

exten =&gt; 123,n,Set(LANGUAGE=de)
exten =&gt; 123,n,SayPhonetic(asterisk)
; Anton Samuel Theodor Emil Richard Ida Samuel Kaufmann</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'SayPhonetic' =- 

[Synopsis]
Say Phonetic

[Description]
  SayPhonetic(string): This application will play the sounds from the phonetic
alphabet that correspond to the letters in the given string.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-sayalpha" />, <xref
      linkend="applikationen-saydigits" />, <xref
      linkend="applikationen-saynumber" /></para>
    </formalpara>
  </section>

  <section id="applikationen-sayunixtime">
    <title><code>SayUnixTime()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>SayUnixTime()</code></secondary>
    </indexterm>

    <simpara>Zeitansage in einem spezifischen Format</simpara>

    <synopsis>SayUnixTime([<replaceable>Unixzeit</replaceable>][,<replaceable>Zeitzone</replaceable>[,<replaceable>Format</replaceable>]])</synopsis>

    <para>Sagt die angegebene Zeit unter Berücksichtigung der angegebenen
    Zeitzone und des vorgegebenen Formats. Die Parameter sind: <variablelist
        termlength="10">
        <varlistentry>
          <term><code>Unixzeit</code></term>

          <listitem>
            <simpara>Unix-Timestamp, also die Anzahl der Sekunden seit dem 1.
            Januar 1970, 0 Uhr GMT. Kann negative Werte annehmen. Standardwert
            ist die aktuelle Zeit.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>Zeitzone</code></term>

          <listitem>
            <simpara>Die Zeitzone. Eine Liste findet sich in
            <filename>/usr/share/zoneinfo/</filename>. Standardwert ist die
            Geräteeinstellung.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>Format</code></term>

          <listitem>
            <simpara>Das Format, in der die Zeit gesprochen werden soll. Eine
            Liste von Formaten findet sich in
            <filename>voicemail.conf</filename>. Als Standardformat wird
            <code>ABdY 'digits/at' IMp</code> verwendet.</simpara>
          </listitem>
        </varlistentry>
      </variablelist></para>

    <simpara>Liefert 0 zurück oder -1, wenn aufgelegt wird.</simpara>

    <programlisting>exten =&gt; 123,1,SayUnixTime(,,IMp)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'SayUnixTime' =- 

[Synopsis]
Says a specified time in a custom format

[Description]
SayUnixTime([unixtime][|[timezone][|format]])
  unixtime: time, in seconds since Jan 1, 1970.  May be negative.
              defaults to now.
  timezone: timezone, see /usr/share/zoneinfo for a list.
              defaults to machine default.
  format:   a format the time is to be said in.  See voicemail.conf.
              defaults to "ABdY 'digits/at' IMp"</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>
  </section>

  <section id="applikationen-senddtmf">
    <title><code>SendDTMF()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>SendDTMF()</code></secondary>
    </indexterm>

    <simpara>Sendet beliebige DTMF-Ziffern zu dem Channel.</simpara>

    <synopsis>SendDTMF(<replaceable>Ziffern</replaceable>[,<replaceable>Timeout_ms</replaceable>])</synopsis>

    <simpara>Sendet die angegebenen DTMF-Ziffern auf einem Channel. Gültige
    DTMF-Symbole sind <code>0</code>-<code>9</code>, <code>*</code>,
    <code>#</code> und <code>A</code>-<code>D</code>. Sie können auch den
    Buchstaben <code>w</code> als eine Ziffer verwendet, er steht für eine
    Wartezeit von 500 Millisekunden. Der Parameter <code>Timeout_ms</code>
    bezeichnet die Zeitdauer in Millisekunden zwischen den Ziffern. Falls
    nicht angegeben, wird ein Wert von 250 Millisekunden für
    <code>Timeout_ms</code> angenommen.</simpara>

    <simpara>Liefert bei Erfolg 0 zurück oder -1, wenn aufgelegt
    wird.</simpara>

    <programlisting>exten =&gt; 123,1,SendDTMF(123w456w789,200)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'SendDTMF' =- 

[Synopsis]
Sends arbitrary DTMF digits

[Description]
 SendDTMF(digits[|timeout_ms]): Sends DTMF digits on a channel. 
 Accepted digits: 0-9, *#abcd, w (.5s pause)
 The application will either pass the assigned digits or terminate if it
 encounters an error.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-read" /></para>
    </formalpara>
  </section>

  <section id="applikationen-sendimage">
    <title><code>SendImage()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>SendImage()</code></secondary>
    </indexterm>

    <simpara>Sendet eine Bilddatei.</simpara>

    <synopsis>SendImage(<replaceable>Dateiname</replaceable>[,<replaceable>Optionen</replaceable>])</synopsis>

    <simpara>Sendet eine Bilddatei auf einem Channel. Falls die Übermittlung
    von Bildern unterstützt wird und die Übertragung fehlschlägt, wird
    aufgelegt, sonst bei der nächsten Priorität fortgefahren. Mit der Option
    <code>j</code> wird, wenn der Channel keine Bildübertragung unterstützt,
    zur Priorität n+101 gesprungen.</simpara>

    <simpara>Liefert 0 zurück, wenn das Bild fehlerfrei übertragen wurde oder
    der Channel eine Bildübertragung nicht unterstützt, sonst -1. Setzt die
    Channelvariable <code>SENDIMAGESTATUS</code> entweder auf <code>OK</code>
    (Erfolg) oder <code>NOSUPPORT</code> (nicht unterstützt).</simpara>

    <programlisting>exten =&gt; 123,1,SendImage(logo.jpg)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'SendImage' =- 

[Synopsis]
Send an image file

[Description]
  SendImage(filename): Sends an image on a channel. 
If the channel supports image transport but the image send
fails, the channel will be hung up. Otherwise, the dialplan
continues execution.
The option string may contain the following character:
 'j' -- jump to priority n+101 if the channel doesn't support image transport
This application sets the following channel variable upon completion:
 SENDIMAGESTATUS  The status is the result of the attempt as a text string, one of
  OK | NOSUPPORT</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-sendtext" />, <xref
      linkend="applikationen-sendurl" /></para>
    </formalpara>
  </section>

  <section id="applikationen-sendtext">
    <title><code>SendText()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>SendText()</code></secondary>
    </indexterm>

    <simpara>Sendet Text zu dem Channel.</simpara>

    <synopsis>SendText(<replaceable>Text</replaceable>[,<replaceable>Optionen</replaceable>])</synopsis>

    <simpara>Überträgt den Text auf einem Channel (z.B. zur Anzeige im
    Display), falls die Übertragung von Text unterstützt wird. Danach wird die
    Ausführung bei der nächsten Priorität fortgesetzt. Mit der Option
    <code>j</code> wird, wenn der Channel keine Textübertragung unterstützt,
    zur Priorität n+101 gesprungen.</simpara>

    <simpara>Der Text sollte bisher bei den meisten Kanälen 7-Bit-ASCII
    sein.</simpara>

    <simpara>Liefert 0 zurück, wenn der Text fehlerfrei übertragen wurde oder
    der Channel eine Textübertragung nicht unterstützt, sonst -1. Setzt die
    Channelvariable <code>SENDTEXTSTATUS</code> auf <code>SUCCESS</code>
    (Erfolg), <code>FAILURE</code> (Sendefehler) oder <code>UNSUPPORTED</code>
    (nicht unterstützt).</simpara>

    <programlisting>exten =&gt; 123,1,SendText(Willkommen zu Asterisk)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'SendText' =- 

[Synopsis]
Send a Text Message

[Description]
  SendText(text[|options]): Sends text to current channel (callee).
Result of transmission will be stored in the SENDTEXTSTATUS
channel variable:
      SUCCESS      Transmission succeeded
      FAILURE      Transmission failed
      UNSUPPORTED  Text transmission not supported by channel

At this moment, text is supposed to be 7 bit ASCII in most channels.
The option string many contain the following character:
'j' -- jump to n+101 priority if the channel doesn't support
       text transport</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-sendimage" />, <xref
      linkend="applikationen-sendurl" /></para>
    </formalpara>
  </section>

  <section id="applikationen-sendurl">
    <title><code>SendURL()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>SendURL()</code></secondary>
    </indexterm>

    <simpara>Sendet dem Channel eine URL.</simpara>

    <synopsis>SendURL(<replaceable>URL</replaceable>[,<replaceable>Option</replaceable>])</synopsis>

    <simpara>Sendet dem Channel eine URL, die das Gerät aufrufen soll (IAX2).
    Setzt die Ausführung beim nächsten Schritt fort.</simpara>

    <simpara>Mit der Option <code>j</code> wird, wenn der Channel keine
    Übertragung von URLs unterstützt, zur Priorität n+101 gesprungen. Mit der
    Option <code>wait</code> wird vor dem Fortfahren auf eine Bestätigung
    gewartet, dass die URL geladen wurde.</simpara>

    <simpara>Liefert 0 zurück, wenn die URL fehlerfrei übertragen wurde oder
    der Channel die Übertragung nicht unterstützt, sonst -1. Setzt die
    Channelvariable <code>SENDURLSTATUS</code> auf <code>SUCCESS</code>
    (Erfolg), <code>FAILURE</code> (Sendefehler), <code>UNSUPPORTED</code>
    (nicht unterstützt) oder <code>NOLOAD</code> (bei <code>wait</code>:
    Client konnte die URL nicht laden).</simpara>

    <programlisting>exten =&gt; 123,1,SendURL(http://www.asterisk.org/,wait)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'SendURL' =- 

[Synopsis]
Send a URL

[Description]
  SendURL(URL[|option]): Requests client go to URL (IAX2) or sends the 
URL to the client (other channels).
Result is returned in the SENDURLSTATUS channel variable:
    SUCCESS       URL successfully sent to client
    FAILURE       Failed to send URL
    NOLOAD        Client failed to load URL (wait enabled)
    UNSUPPORTED   Channel does not support URL transport

If the option 'wait' is specified, execution will wait for an
acknowledgement that the URL has been loaded before continuing

If jumping is specified as an option (the 'j' flag), the client does not
support Asterisk "html" transport, and there exists a step with priority
n + 101, then execution will continue at that step.

SendURL continues normally if the URL was sent correctly or if the channel
does not support HTML transport.  Otherwise, the channel is hung up.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>13c13
&lt;     NOLOAD        Client failed to load URL (wait enabled)
---
&gt;     NOLOAD        Clien failed to load URL (wait enabled)
17a18
&gt; and will return -1 if the peer is unable to load the URL
19,24c20,26
&lt; If jumping is specified as an option (the 'j' flag), the client does not
&lt; support Asterisk "html" transport, and there exists a step with priority
&lt; n + 101, then execution will continue at that step.
&lt; 
&lt; SendURL continues normally if the URL was sent correctly or if the channel
&lt; does not support HTML transport.  Otherwise, the channel is hung up.
---
&gt; Old behaviour (deprecated): 
&gt;  If the client does not support Asterisk "html" transport, 
&gt;  and there exists a step with priority n + 101, then execution will
&gt;  continue at that step.
&gt;  Otherwise, execution will continue at the next priority level.
&gt;  SendURL only returns 0 if the URL was sent correctly  or if
&gt;  the channel does not support HTML transport, and -1 otherwise.</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-sendimage" />, <xref
      linkend="applikationen-sendtext" /></para>
    </formalpara>
  </section>

  <section id="applikationen-set">
    <title><code>Set()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Set()</code></secondary>
    </indexterm>

    <simpara>Setzt eine Variable auf den angegebenen Wert.</simpara>

    <synopsis>Set(<replaceable>Variable</replaceable>=<replaceable>Wert</replaceable>[,<replaceable>Variable2</replaceable>=<replaceable>Wert2</replaceable>,...][,<replaceable>Optionen</replaceable>])</synopsis>

    <simpara>Setzt die Variable auf den angegebenen Wert. Beginnt der Name der
    Variablen mit dem Zeichen <code>_</code>, wird einfache Vererbung
    angenommen (d.h. wird auf Kanäle vererbt, die von diesem Channel erzeugt
    werden), beginnt er mit <code>__</code>, wird Endlosvererbung angenommen
    (d.h. wird auf alle Kinder-Kanäle vererbt). Bis zu 24 Variablen können
    gesetzt werden. Variablen sind normalerweise nur innerhalb eines Channels
    gültig und werden beim Auflegen gelöscht. Mit der Option <code>g</code>
    setzt man in Asterisk 1.2 eine Variable (nicht eine Funktion!) global; in
    1.4 macht man das mit Hilfe der Funktion <code>GLOBAL()</code>.</simpara>

    <programlisting>; die Variable TEST auf "123" setzen:
exten =&gt; 123,1,Set(TEST=123)
exten =&gt; 123,n,SayDigits(${TEST})

; die globale Variable TEST2 auf "456" setzen:
exten =&gt; 123,n,Set(TEST2=456,g)         ; Asterisk 1.2
exten =&gt; 123,n,Set(GLOBAL(TEST2)=456)   ; Asterisk 1.4</programlisting>

    <note>
      <para>Ob globale Variablen auch nach einem Reload von Asterisk noch
      gültig sind, wird durch die Einstellung <code>clearglobalvars</code> in
      der <filename>extensions.conf</filename> bestimmt.</para>
    </note>

    <simpara><code>Set()</code> wird auch verwendet, um in Funktionen zu
    schreiben (siehe <xref linkend="funktionen" />).</simpara>

    <programlisting>exten =&gt; 123,1,Set(CALLERID(name)=Widgets)  ; CALLERID(name) setzen
exten =&gt; 123,n,Set(CALLERID(name)=)          ; CALLERID(name) leeren

exten =&gt; 123,n,Set(DB(mein/test)=ok)         ; in AstDB schreiben
exten =&gt; 123,n,Set(var=${DB(mein/test)})     ; aus AstDB lesen</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'Set' =- 

[Synopsis]
Set channel variable(s) or function value(s)

[Description]
  Set(name1=value1|name2=value2|..[|options])
This function can be used to set the value of channel variables or dialplan
functions. It will accept up to 24 name/value pairs. When setting variables,
if the variable name is prefixed with _, the variable will be inherited into
channels created from the current channel. If the variable name is prefixed
with __, the variable will be inherited into channels created from the current
channel and all children channels.
  Options:
    g - Set variable globally instead of on the channel
        (applies only to variables, not functions)</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-importvar" />,
      <filename>doc/README.variables</filename> (1.2) /
      <filename>doc/channelvariables.txt</filename> (1.4), <xref
      linkend="funktionen-global" /></para>
    </formalpara>
  </section>

  <section id="applikationen-setamaflags">
    <title><code>SetAMAFlags()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>SetAMAFlags()</code></secondary>
    </indexterm>

    <simpara>Setzt AMA-Flags im Anrufprotokoll.</simpara>

    <synopsis>SetAMAFlags(<replaceable>Flags</replaceable>)</synopsis>

    <simpara>Setzt zu Abrechnungszwecken die AMA-Flags im Anrufprotokoll (Call
    Detail Record), wobei die AMA-Einstellungen in den
    Channelkonfigurationsdateien überschrieben werden. Gültige Werte sind
    <code>default</code>, <code>omit</code>, <code>billing</code> und
    <code>documentation</code>.</simpara>

    <simpara>Liefert stets 0 zurück.</simpara>

    <programlisting>exten =&gt; 123,1,SetAMAFlags(billing)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'SetAMAFlags' =- 

[Synopsis]
Set the AMA Flags

[Description]
  SetAMAFlags([flag]): This application will set the channel's AMA Flags for
  billing purposes.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>8,9c8,9
&lt;   SetAMAFlags([flag]): This application will set the channel's AMA Flags for
&lt;   billing purposes.
---
&gt;   SetAMAFlags([flag]): This channel will set the channel's AMA Flags for billing
&gt; purposes.</screen></para>
      </formalpara>
    </note>
  </section>

  <section id="applikationen-setcallerpres">
    <title><code>SetCallerPres()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>SetCallerPres()</code></secondary>
    </indexterm>

    <simpara>Setzt Caller-ID-Darstellungsflags (presentation flags).</simpara>

    <synopsis>SetCallerPres(<replaceable>Darstellung</replaceable>)</synopsis>

    <simpara>Setzt die Caller-ID-Darstellungsflags auf einer
    Q931-PRI-Verbindung.</simpara>

    <para>Gültige Darstellungen sind: <variablelist termlength="23">
        <varlistentry>
          <term><code>allowed_not_screened</code></term>

          <listitem>
            <simpara>Anzeige erlaubt und nicht überprüft.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>allowed_passed_screen</code></term>

          <listitem>
            <simpara>Anzeige erlaubt und Überprüfung erfolgreich.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>allowed_passed_screen</code></term>

          <listitem>
            <simpara>Anzeige erlaubt und Überprüfung nicht
            erfolgreich.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>allowed</code></term>

          <listitem>
            <simpara>Anzeige erlaubt, Netzwerknummer.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>prohib_not_screened</code></term>

          <listitem>
            <simpara>Anzeige verboten und nicht überprüft.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>prohib_passed_screen</code></term>

          <listitem>
            <simpara>Anzeige verboten und Überprüfung erfolgreich.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>prohib_failed_screen</code></term>

          <listitem>
            <simpara>Anzeige verboten und Überprüfung nicht
            erfolgreich.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>prohib</code></term>

          <listitem>
            <simpara>Anzeige verboten, Netzwerknummer.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>unavailable</code></term>

          <listitem>
            <simpara>Nummer nicht verfügbar.</simpara>
          </listitem>
        </varlistentry>
      </variablelist></para>

    <simpara>Liefert stets 0 zurück.</simpara>

    <programlisting>exten =&gt; 123,1,SetCallerPres(allowed_not_screened)
exten =&gt; 123,n,Dial(Zap/4/1234567)</programlisting>

    <simpara>Evtl. müssen Sie <code>usecallingpres=yes</code> in der
    <filename>zapata.conf</filename> setzen.</simpara>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'SetCallerPres' =- 

[Synopsis]
Set CallerID Presentation

[Description]
  SetCallerPres(presentation): Set Caller*ID presentation on a call.
  Valid presentations are:

      allowed_not_screened    : Presentation Allowed, Not Screened
      allowed_passed_screen   : Presentation Allowed, Passed Screen
      allowed_failed_screen   : Presentation Allowed, Failed Screen
      allowed                 : Presentation Allowed, Network Number
      prohib_not_screened     : Presentation Prohibited, Not Screened
      prohib_passed_screen    : Presentation Prohibited, Passed Screen
      prohib_failed_screen    : Presentation Prohibited, Failed Screen
      prohib                  : Presentation Prohibited, Network Number
      unavailable             : Number Unavailable</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>
  </section>

  <section id="applikationen-setcdruserfield">
    <title><code>SetCDRUserField()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>SetCDRUserField()</code></secondary>
    </indexterm>

    <simpara>Setzt den Wert des CDR-Feldes "userfield".</simpara>

    <synopsis>SetCDRUserField(<replaceable>String</replaceable>)</synopsis>

    <simpara>Wird benutzt, um den Wert des CDR Feldes "userfield" zu
    setzen.</simpara>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'SetCDRUserField' =- 

[Synopsis]
Set the CDR user field

[Description]
[Synopsis]
SetCDRUserField(value)

[Description]
SetCDRUserField(value): Set the CDR 'user field' to value
       The Call Data Record (CDR) user field is an extra field you
       can use for data not stored anywhere else in the record.
       CDR records can be used for billing or storing other arbitrary data
       (I.E. telephone survey responses)
       Also see AppendCDRUserField().</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <important>
      <para>Obwohl in der internen Hilfe noch kein Hinweis darauf steht, ist
      diese Applikation deprecated. Im Source-Code wird man
      fündig:<programlisting>ast_log(LOG_WARNING, "SetCDRUserField is deprecated.  Please use CDR(userfield) instead.\n");</programlisting>Bitte
      verwenden Sie also die Funktion <code>CDR(userfield)</code>.</para>
    </important>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="funktionen-cdr" /></para>
    </formalpara>
  </section>

  <section id="applikationen-setglobalvar">
    <title><code>SetGlobalVar()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>SetGlobalVar()</code></secondary>
    </indexterm>

    <simpara>Setzt den Wert einer globalen Variable.</simpara>

    <synopsis>SetGlobalVar(variable=value)</synopsis>

    <simpara>Setzt eine globale Variable. Falls die Variable nicht existiert,
    wird sie gleichzeitig definiert.</simpara>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'SetGlobalVar' =- 

[Synopsis]
Set a global variable to a given value

[Description]
  SetGlobalVar(variable=value): This application sets a given global variable to
the specified value.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <important>
      <para>Obwohl in der internen Hilfe noch kein Hinweis darauf steht, ist
      diese Applikation deprecated. Im Source-Code wird man
      fündig:<programlisting>ast_log(LOG_WARNING, "SetGlobalVar is deprecated.  Please use Set(GLOBAL(%s)=%s) instead.\n", name, stringp);</programlisting>Bitte
      verwenden Sie also in Asterisk 1.2 <code>Set()</code> mit der Option
      <code>g</code> und in Asterisk 1.4 <code>GLOBAL()</code>.</para>
    </important>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-set" />, <xref
      linkend="funktionen-global" /></para>
    </formalpara>
  </section>

  <section id="applikationen-setmusiconhold">
    <title><code>SetMusicOnHold()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>SetMusicOnHold()</code></secondary>
    </indexterm>

    <simpara>Setzt den Wert der Default Wartemusik Klasse.</simpara>

    <synopsis>SetMusicOnHold(<replaceable>Klasse</replaceable>)</synopsis>

    <simpara>Setzt den Wert der Default Wartemusik Klasse.</simpara>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'SetMusicOnHold' =- 

[Synopsis]
Set default Music On Hold class

[Description]
SetMusicOnHold(class): Sets the default class for music on hold for a given channel.  When
music on hold is activated, this class will be used to select which
music is played.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <important>
      <para>Bitte verwenden Sie ab Asterisk 1.4
      <code>CHANNEL(musicclass)</code>.</para>
    </important>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="funktionen-channel" /></para>
    </formalpara>
  </section>

  <section id="applikationen-settransfercapability">
    <title><code>SetTransferCapability()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>SetTransferCapability()</code></secondary>
    </indexterm>

    <simpara>Setzt den Wert der ISDN-Transfer-Capability neu.</simpara>

    <synopsis>SetTransferCapability(<replaceable>transferCapability</replaceable>)</synopsis>

    <simpara>Mögliche Werte:</simpara>

    <variablelist termlength="20">
      <varlistentry>
        <term><code>SPEECH</code></term>

        <listitem>
          <simpara>0x00 - Speech (default, voice calls)</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>DIGITAL</code></term>

        <listitem>
          <simpara>0x08 - Unrestricted digital information (data
          calls)</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>RESTRICTED_DIGITAL</code></term>

        <listitem>
          <simpara>0x09 - Restricted digital information</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>3K1AUDIO</code></term>

        <listitem>
          <simpara>0x10 - 3.1 kHz Audio (fax calls)</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>DIGITAL_W_TONES</code></term>

        <listitem>
          <simpara>0x11 - Unrestricted digital information with
          tones/announcements</simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><code>VIDEO</code></term>

        <listitem>
          <simpara>0x18 - Video</simpara>
        </listitem>
      </varlistentry>
    </variablelist>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'SetTransferCapability' =- 

[Synopsis]
Set ISDN Transfer Capability

[Description]
  SetTransferCapability(transfercapability): Set the ISDN Transfer 
Capability of a call to a new value.
Valid Transfer Capabilities are:

  SPEECH             : 0x00 - Speech (default, voice calls)
  DIGITAL            : 0x08 - Unrestricted digital information (data calls)
  RESTRICTED_DIGITAL : 0x09 - Restricted digital information
  3K1AUDIO           : 0x10 - 3.1kHz Audio (fax calls)
  DIGITAL_W_TONES    : 0x11 - Unrestricted digital information with tones/announcements
  VIDEO              : 0x18 - Video</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>17c17
&lt;   VIDEO              : 0x18 - Video
---
&gt;   VIDEO              : 0x18 - Video:</screen></para>
      </formalpara>
    </note>
  </section>

  <section id="applikationen-sipaddheader">
    <title><code>SIPAddHeader()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>SIPAddHeader()</code></secondary>
    </indexterm>

    <simpara>Fügt dem ausgehenden SIP-Anruf einen Header hinzu.</simpara>

    <synopsis>SIPAddHeader(<replaceable>Header</replaceable>: <replaceable>Wert</replaceable>)</synopsis>

    <simpara>Fügt einem mit der <code>Dial()</code>-Anwendung initiierten
    SIP-Anruf einen Header hinzu. Ein nicht standardisierter SIP-Header sollte
    mit einem <code>X-</code> beginnen, wie etwa
    <code>X-Asterisk-Accountcode:</code>. Verwenden Sie diese Anwendung mit
    Vorsicht, denn das Hinzufügen eines falschen Headers kann Probleme
    verursachen. Mit dieser Applikation können keine SIP-Header verändert
    werden.</simpara>

    <simpara>Liefert stets 0 zurück.</simpara>

    <programlisting>exten =&gt; 123,1,SIPAddHeader(X-Asterisk-Account: ${CDR(accountcode)})
exten =&gt; 123,n,Dial(SIP/123)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'SIPAddHeader' =- 

[Synopsis]
Add a SIP header to the outbound call

[Description]
  SIPAddHeader(Header: Content)
Adds a header to a SIP call placed with DIAL.
Remember to user the X-header if you are adding non-standard SIP
headers, like "X-Asterisk-Accountcode:". Use this with care.
Adding the wrong headers may jeopardize the SIP dialog.
Always returns 0</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="funktionen-sip_header" /></para>
    </formalpara>
  </section>

  <section id="applikationen-sipdtmfmode">
    <title><code>SIPdtmfMode()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>SIPdtmfMode()</code></secondary>
    </indexterm>

    <simpara>Ändert das DTMF-Verfahren für einen SIP-Anruf.</simpara>

    <synopsis>SIPdtmfMode(Methode)</synopsis>

    <simpara>Ändert den DTMF-Modus für einen Anruf, der von einem SIP-Channel
    ausgeht (nicht für einen Anruf auf einen SIP-Channel).
    <code>Methode</code> kann die Werte <code>inband</code> (RTP),
    <code>info</code> oder <code>rfc2833</code> annehmen.</simpara>

    <programlisting>exten =&gt; 123,n,SIPdtmfMode(rfc2833)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'SIPDtmfMode' =- 

[Synopsis]
Change the dtmfmode for a SIP call

[Description]
SIPDtmfMode(inband|info|rfc2833): Changes the dtmfmode for a SIP call</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para>RFC 2833<footnote>
          <simpara><ulink
          url="http://www.ietf.org/rfc/rfc2833.txt">http://www.ietf.org/rfc/rfc2833.txt</ulink></simpara>
        </footnote>, RFC 2976<footnote>
          <simpara><ulink
          url="http://www.ietf.org/rfc/rfc2976.txt">http://www.ietf.org/rfc/rfc2976.txt</ulink></simpara>
        </footnote></para>
    </formalpara>
  </section>

  <section id="applikationen-sms">
    <title><code>SMS()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>SMS()</code></secondary>
    </indexterm>

    <indexterm>
      <primary>SMS</primary>
    </indexterm>

    <simpara>Sendet oder empfängt SMS-Nachrichten.</simpara>

    <synopsis>SMS(<replaceable>Schlange</replaceable>[,<replaceable>Optionen</replaceable>])</synopsis>

    <simpara>Regelt den Austausch von SMS-Nachrichten mit einem SMS-fähigen
    Telefon oder über ein SMS-Service-Center nach dem Protokoll ETSI ES 201
    912 auf analogen oder ISDN-Leitungen. Das Shell-Programm
    <command>smsq</command> verwendet dazu FSK<footnote>
        <simpara>Frequency Shift Keying, <xref
        linkend="glossar-fsk" /></simpara>
      </footnote> - die Funktion über komprimierte Codecs wie GSM ist daher
    unwahrscheinlich.</simpara>

    <para>Optionen:<variablelist termlength="3">
        <varlistentry>
          <term>a</term>

          <listitem>
            <simpara>Als antwortende Seite agieren.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>s</term>

          <listitem>
            <simpara>Als Service-Center agieren, das mit einem Telefon
            kommuniziert.</simpara>
          </listitem>
        </varlistentry>
      </variablelist></para>

    <simpara>Alle Sende-/Empfangsschlangen werden in
    <filename>/var/spool/asterisk/sms/</filename> gespeichert: die Nachrichten
    vom Service-Center zum Telefon in
    <filename>sc-me.<replaceable>Schlange</replaceable>/</filename>, die
    Nachrichten vom Telefon zum SMSC in
    <filename>me-sc.<replaceable>Schlange</replaceable>/</filename>. In
    <filename>/var/log/asterisk/sms</filename> wird ein Log
    geschrieben.</simpara>

    <simpara>Beim Verbinden als Client (<code>a</code>) werden alle im
    Verzeichnis
    <filename>me-sc.<replaceable>Schlange</replaceable>/</filename> wartenden
    Nachrichten gesendet und dann gelöscht; die empfangenen werden in
    <filename>sc-me.<replaceable>Schlange</replaceable>/</filename> mit einem
    Timestamp im Dateinamen gespeichert. Wenn wir uns als Service-Center
    verbinden (<code>s</code>) ist das genau umgekehrt.</simpara>

    <para>Die Nachrichten-Dateien haben folgendes Format, wobei ausgelassene
    Parameter Default-Werte haben:<programlisting>oa=<replaceable>Originating Address (Absendernummer)</replaceable></programlisting>Nationale
    Telefonnummer oder internationale mit vorangehendem <code>+</code> (z.B.
    <code>+49</code>).<programlisting>da=<replaceable>Destination Address (Empfängernummer)</replaceable></programlisting>Nationale
    Telefonnummer oder internationale mit vorangehendem
    <code>+</code>.<programlisting>scts=<replaceable>Service Centre Time Stamp (Zeitstempel vom SC)</replaceable></programlisting>Im
    Format <code>YYYY-MM-DD HH:MM:SS</code> <programlisting>pid=<replaceable>Protocol Identifier (decimal octet value)</replaceable></programlisting><programlisting>dcs=<replaceable>Data coding scheme (decimal octet value)</replaceable></programlisting><programlisting>mr=<replaceable>Message reference (decimal octet value)</replaceable></programlisting><programlisting>ud=<replaceable>Der Nachrichtentext</replaceable></programlisting>Wenn
    andere Zeichen als 10, 13, 32-126, 128-255 (dezimal) in der Nachricht
    vorkommen, wird <code>ud=</code> durch <code>ud#</code> ersetzt und die
    Zeichen folgen hexadezimal kodiert.<programlisting>srr=<replaceable>Status Report Request (0|1)</replaceable></programlisting><programlisting>rp=<replaceable>Return Path (0|1)</replaceable></programlisting><programlisting>vp=<replaceable>Validity Period (Gültigkeitsdauer in Minuten)</replaceable></programlisting>Beim
    Senden an ein SMSC müssen nur <code>da</code> und <code>ud</code>
    verwendet werden, <code>oa</code> wird ignoriert; beim Senden an ein
    Telefon sind nur <code>oa</code> und <code>ud</code> nötig,
    <code>da</code> wird ignoriert.</para>

    <para>Eine Extension zum Empfangen von Nachrichten könnte so aussehen
    (wenn 01930100 die Nummer des für uns zuständigen SMSC - hier T-Com -
    ist):<programlisting>[incoming]
exten =&gt; _X.,1,GotoIf($["${CALLERIDNUM}" = "01930100"]?sms-me-in,${EXTEN},1) 
; oder so:
;exten =&gt; _X./_0193010.,1,Goto(sms-me-in,${EXTEN},1)

[sms-me-in]
exten =&gt; _X.,1,Wait(1)
exten =&gt; _X.,n,SMS(me-eingang,a)
exten =&gt; _X.,n,System(handleincomingsms)
exten =&gt; _X.,n,Hangup()</programlisting>wobei
    <code>handleincomingsms</code> z.B. <code>smsq
    --process=<replaceable>befehl</replaceable> --queue=me-eingang</code> sein
    könnte, was für jede eingegangene Nachricht einen Befehl ausführt.</para>

    <para>Ausgehende Nachrichten sollten als Dateien geschrieben werden, könne
    aber auch mit folgendem (veralteten) Aufruf erzeugt werden (0193010 ist
    die Nummer des SMSC - hier T-Com):<programlisting>[outgoing]
exten = 0193010,1,Goto(sms-me-out,${CALLERIDNUM},1)

[sms-me-out]
exten =&gt; _X.,1,Set(CDR(accountcode)=SMS)
exten =&gt; _X.,n,Set(smsFrom=${CALLERIDNUM})
exten =&gt; _X.,n,SMS(${smsFrom},s,${EXTEN},${smsText})  ; SMS erzeugen
exten =&gt; _X.,n,SMS(${smsFrom},s)                       ; senden
exten =&gt; _X.,n,Hangup()</programlisting></para>

    <simpara>Weitere Informationen und viele Beispiele auf <ulink
    url="http://www.voip-info.org/wiki/view/Asterisk+cmd+Sms">http://www.voip-info.org/wiki/view/Asterisk+cmd+Sms</ulink>
    und <ulink
    url="http://www.pi4tel.de/asterisk/sms.shtml">http://www.pi4tel.de/asterisk/sms.shtml</ulink>.
    Man kann jedoch nicht erwarten, dass <code>SMS()</code> <quote>out of the
    box</quote> sofort funktioniert.</simpara>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'SMS' =- 

[Synopsis]
Communicates with SMS service centres and SMS capable analogue phones

[Description]
  SMS(name|[a][s]):  SMS handles exchange of SMS data with a call to/from SMS capabale
phone or SMS PSTN service center. Can send and/or receive SMS messages.
Works to ETSI ES 201 912 compatible with BT SMS PSTN service in UK
Typical usage is to use to handle called from the SMS service centre CLI,
or to set up a call using 'outgoing' or manager interface to connect
service centre to SMS()
name is the name of the queue used in /var/spool/asterisk/sms
Arguments:
 a: answer, i.e. send initial FSK packet.
 s: act as service centre talking to a phone.
Messages are processed as per text file message queues.
smsq (a separate software) is a command to generate message
queues and send messages.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>
  </section>

  <section id="applikationen-softhangup">
    <title><code>SoftHangup()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>SoftHangup()</code></secondary>
    </indexterm>

    <simpara>Legt den angegebenen Channel auf.</simpara>

    <synopsis>SoftHangup(<replaceable>Technologie</replaceable>/<replaceable>Ressource</replaceable>[,<replaceable>Optionen</replaceable>])</synopsis>

    <simpara>Legt den angegebenen Channel auf. Liefert stets 0 zurück. Der
    <code>Optionen</code>-Parameter kann den Buchstaben <code>a</code>
    enthalten, was bewirkt, dass alle Kanäle auf dem angegebenen Gerät (statt
    nur der Ressource) aufgelegt werden.</simpara>

    <programlisting>; alle Kanäle auflegen, die Zap/4 benutzen:
exten =&gt; 123,1,SoftHangup(Zap/4,a)
exten =&gt; 123,n,Wait(2)
exten =&gt; 123,n,Dial(Zap/4/1234567)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'SoftHangup' =- 

[Synopsis]
Soft Hangup Application

[Description]
  SoftHangup(Technology/resource|options)
Hangs up the requested channel.  If there are no channels to hangup,
the application will report it.
- 'options' may contain the following letter:
     'a' : hang up all channels on a specified device instead of a single resource</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-hangup" /></para>
    </formalpara>
  </section>

  <section id="applikationen-stopmonitor">
    <title><code>StopMonitor()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>StopMonitor()</code></secondary>
    </indexterm>

    <simpara>Beendet die Überwachung eines Channels.</simpara>

    <synopsis>StopMonitor()</synopsis>

    <simpara>Beendet die Überwachung (Aufnahme) eines Channels. Diese
    Anwendung hat keinerlei Auswirkungen, wenn der Channel momentan nicht
    überwacht wird.</simpara>

    <programlisting>exten =&gt; 123,1,Answer()
exten =&gt; 123,n,Monitor(wav,monitor_test,mb)
exten =&gt; 123,n,SayDigits(12345678901234567890)
exten =&gt; 123,n,StopMonitor()</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'StopMonitor' =- 

[Synopsis]
Stop monitoring a channel

[Description]
StopMonitor
Stops monitoring a channel. Has no effect if the channel is not monitored</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-monitor" />, <xref
      linkend="applikationen-pausemonitor" /></para>
    </formalpara>
  </section>

  <section id="applikationen-stopplaytones">
    <title><code>StopPlaytones()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>StopPlaytones()</code></secondary>
    </indexterm>

    <simpara>Beendet die Wiedergabe einer Liste von Tönen.</simpara>

    <synopsis>StopPlaytones()</synopsis>

    <simpara>Beendet die Wiedergabe der momentan laufenden Tonliste.</simpara>

    <programlisting>exten =&gt; 123,1,Playtones(busy)
exten =&gt; 123,n,Wait(2)
exten =&gt; 123,n,StopPlaytones()
exten =&gt; 123,n,Playtones(congestion)
exten =&gt; 123,n,Wait(2)
exten =&gt; 123,n,StopPlaytones()
exten =&gt; 123,n,Goto(1)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'StopPlayTones' =- 

[Synopsis]
Stop playing a tone list

[Description]
Stop playing a tone list</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-playtones" />,
      <filename>indications.conf</filename></para>
    </formalpara>
  </section>

  <section id="applikationen-system">
    <title><code>System()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>System()</code></secondary>
    </indexterm>

    <simpara>Führt einen Shell-Befehl aus.</simpara>

    <synopsis>System(<replaceable>Befehl</replaceable>)</synopsis>

    <simpara>Führt durch die C-Funktion <code>system()</code> einen Befehl auf
    der Shell <command>sh</command> aus.</simpara>

    <simpara>Diese Anwendung ist der <code>TrySystem()</code>-Anwendung sehr
    ähnlich, abgesehen davon, dass sie -1 zurückliefert, falls sie den
    Systembefehl nicht ausführen kann, wohingegen die
    <code>TrySystem()</code>-Anwendung stets 0 zurückliefert.</simpara>

    <simpara>Setzt die Channelvariable <code>SYSTEMSTATUS</code> auf
    <code>SUCCESS</code> (erfolgreich ausgeführt), <code>FAILURE</code>
    (konnte nicht ausgeführt werden) oder (undokumentiert) auf
    <code>APPERROR</code> (Befehl ausgeführt aber mit Exit-Code ungleich
    0).</simpara>

    <programlisting>exten =&gt; s,1,System(echo '${DATETIME} - ${CALLERID} - ${CHANNEL}' &gt;&gt; /var/log/asterisk/anrufe)</programlisting>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-trysystem" /></para>
    </formalpara>

    <note>
      <para>Als Alternative kann die Applikation <code>Backticks()</code> oder
      Funktion <code>BACKTICKS()</code> aus dem Modul
      <code>app_backticks</code><footnote>
          <simpara>von <ulink
          url="http://www.pbxfreeware.org/archives/2005/06/index.html">http://www.pbxfreeware.org/archives/2005/06/index.html</ulink>
          oder <ulink
          url="http://www.pbxfreeware.org/">http://www.pbxfreeware.org/</ulink></simpara>
        </footnote> verwenden, mit denen man auch die Ausgabe des Befehls
      erhält.</para>
    </note>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'System' =- 

[Synopsis]
Execute a system command

[Description]
  System(command): Executes a command  by  using  system(). If the command
fails, the console should report a fallthrough. 
Result of execution is returned in the SYSTEMSTATUS channel variable:
   FAILURE  Could not execute the specified command
   SUCCESS  Specified command successfully executed

Old behaviour:
If the command itself executes but is in error, and if there exists
a priority n + 101, where 'n' is the priority of the current instance,
then  the  channel  will  be  setup to continue at that priority level.
Note that this jump functionality has been deprecated and will only occur
if the global priority jumping option is enabled in extensions.conf.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>
  </section>

  <section id="applikationen-transfer">
    <title><code>Transfer()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Transfer()</code></secondary>
    </indexterm>

    <simpara>Übermittelt den Anruf zu einer anderen Extension.</simpara>

    <synopsis>Transfer([<replaceable>Technologie</replaceable>/]<replaceable>Ziel</replaceable>[,<replaceable>Optionen</replaceable>])</synopsis>

    <simpara>Verlangt die Übermittlung des Anrufers zu einer gegebenen
    Extension. Wird <code>Technologie</code> (<code>SIP</code>,
    <code>IAX2</code> etc.) angegeben, werden nur Anrufe der gleichen
    Technologie transferiert. Bei SIP-Kanälen, die noch nicht beantwortet
    wurden, geschieht das mittels einer 302-<code>REDIRECT</code>-Nachricht an
    den Anrufer, bei beantworteten SIP-Kanälen mit <code>REFER</code>. Ziel
    kann auch z.B. <code>123456@sip.provider.tld</code> sein.</simpara>

    <simpara>Mit der Option <code>j</code> wird zur Priorität n+101
    gesprungen, falls der Transfer-Versuch fehlschlägt.</simpara>

    <simpara>Setzt die Channelvariable <code>TRANSFERSTATUS</code> auf
    <code>SUCCESS</code> (Transfer erfolgreich), <code>FAILURE</code>
    (Transfer fehlgeschlagen) oder <code>UNSUPPORTED</code> (vom Channel nicht
    unterstützt).</simpara>

    <programlisting>; Anrufe an Extension 123 zur Extension 130 umleiten:
exten =&gt; 123,1,Transfer(130)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'Transfer' =- 

[Synopsis]
Transfer caller to remote extension

[Description]
  Transfer([Tech/]dest[|options]):  Requests the remote caller be transferred
to a given destination. If TECH (SIP, IAX2, LOCAL etc) is used, only
an incoming call with the same channel technology will be transfered.
Note that for SIP, if you transfer before call is setup, a 302 redirect
SIP message will be returned to the caller.

The result of the application will be reported in the TRANSFERSTATUS
channel variable:
       SUCCESS      Transfer succeeded
       FAILURE      Transfer failed
       UNSUPPORTED  Transfer unsupported by channel driver
The option string many contain the following character:
'j' -- jump to n+101 priority if the channel transfer attempt
       fails</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>
  </section>

  <section id="applikationen-tryexec">
    <title><code>TryExec()</code></title>

    <indexterm>
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>TryExec()</code></secondary>
    </indexterm>

    <simpara>Versucht die Ausführung einer Dialplan-Applikation.</simpara>

    <synopsis>TryExec(<replaceable>Applikation</replaceable>(<replaceable>Argumente</replaceable>))</synopsis>

    <para>Versucht, wie <code>Exec()</code>, eine Applikation auszuführen,
    aber ohne den Anruf abzubrechen, wenn die Applikation nicht gefunden wird
    oder einen Fehler zurückgibt. Stattdessen wird die Variable
    <code>TRYSTATUS</code> auf einen der folgenden Werte gesetzt:<variablelist
        termlength="9">
        <varlistentry>
          <term><code>SUCCESS</code></term>

          <listitem>
            <simpara>Die Applikation hat 0 zurückgegeben.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>FAILED</code></term>

          <listitem>
            <simpara>Die Applikation hat einen Fehler zurückgegeben (Wert
            ungleich 0).</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>NOAPP</code></term>

          <listitem>
            <simpara>Die Applikation wurde nicht gefunden.</simpara>
          </listitem>
        </varlistentry>
      </variablelist></para>

    <simpara>Für weitere Informationen siehe <xref
    linkend="applikationen-exec" />.</simpara>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-exec" />, <xref
      linkend="applikationen-execif" />, <xref
      linkend="applikationen-trysystem" /></para>
    </formalpara>
  </section>

  <section id="applikationen-trysystem">
    <title><code>TrySystem()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>TrySystem()</code></secondary>
    </indexterm>

    <simpara>Versucht die Ausführung eines Shell-Befehls.</simpara>

    <synopsis>TrySystem(<replaceable>Befehl</replaceable>)</synopsis>

    <simpara>Führt wie <code>System()</code> einen Befehl auf der Shell
    <command>sh</command> aus, liefert aber stets 0 zurück, wohingegen
    <code>System()</code> bei einem Fehler -1 zurückgibt.</simpara>

    <simpara>Setzt die Channelvariable <code>SYSTEMSTATUS</code> auf
    <code>SUCCESS</code> (erfolgreich ausgeführt), <code>FAILURE</code>
    (konnte nicht ausgeführt werden) oder <code>APPERROR</code> (Befehl
    ausgeführt aber mit Exit-Code ungleich 0).</simpara>

    <programlisting>exten =&gt; 123,1,TrySystem(echo 'Hallo Welt' &gt; /tmp/hallo.txt)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'TrySystem' =- 

[Synopsis]
Try executing a system command

[Description]
  TrySystem(command): Executes a command  by  using  system().
on any situation.
Result of execution is returned in the SYSTEMSTATUS channel variable:
   FAILURE  Could not execute the specified command
   SUCCESS  Specified command successfully executed
   APPERROR Specified command successfully executed, but returned error code

Old behaviour:
If  the command itself executes but is in error, and if
there exists a priority n + 101, where 'n' is the priority of the current
instance, then  the  channel  will  be  setup  to continue at that
priority level.  Otherwise, System will terminate.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-system" /></para>
    </formalpara>
  </section>

  <section id="applikationen-unpausemonitor">
    <title><code>UnpauseMonitor()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>UnpauseMonitor()</code></secondary>
    </indexterm>

    <simpara>Hebt die Pausierung der Aufzeichnung auf.</simpara>

    <synopsis>UnpauseMonitor()</synopsis>

    <simpara>Hebt die Pausierung des Mitschnitts eines mit
    <code>PauseMonitor()</code> pausierten Kanals wieder auf.</simpara>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'UnpauseMonitor' =- 

[Synopsis]
Unpause monitoring of a channel

[Description]
UnpauseMonitor
Unpauses monitoring of a channel on which monitoring had
previously been paused with PauseMonitor.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>-- in Version 1.2 nicht vorhanden --</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-monitor" />, <xref
      linkend="applikationen-pausemonitor" /></para>
    </formalpara>
  </section>

  <section id="applikationen-unpausequeuemember">
    <title><code>UnpauseQueueMember()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>UnpauseQueueMember()</code></secondary>
    </indexterm>

    <simpara>Hebt die Pausierung eines Warteschlangenmitglieds auf.</simpara>

    <synopsis>UnpauseQueueMember([<replaceable>Schlange</replaceable>,]<replaceable>Interface</replaceable>[,<replaceable>Optionen</replaceable>])</synopsis>

    <simpara>Hebt die Pausierung für ein Mitglied einer Warteschlange auf,
    d.h. es kann wieder Anrufe entgegennehmen. Dies ist das Gegenstück zu
    <code>PauseQueueMember()</code> - siehe Beispiel dort. Die Arbeitsweise
    ist die gleiche, außer dass das gegebene Interface nicht pausiert, sondern
    wieder aktiviert wird.</simpara>

    <simpara>Setzt die Channel-Variable <code>UPQMSTATUS</code> auf
    <code>UNPAUSED</code> (ent-pausiert) oder <code>NOTFOUND</code> (nicht
    gefunden).</simpara>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'UnpauseQueueMember' =- 

[Synopsis]
Unpauses a queue member

[Description]
   UnpauseQueueMember([queuename]|interface[|options]):
Unpauses (resumes calls to) a queue member.
This is the counterpart to PauseQueueMember and operates exactly the
same way, except it unpauses instead of pausing the given interface.
The option string may contain zero or more of the following characters:
       'j' -- jump to +101 priority when appropriate.
  This application sets the following channel variable upon completion:
     UPQMSTATUS       The status of the attempt to unpause a queue 
                      member as a text string, one of
            UNPAUSED | NOTFOUND
Example: UnpauseQueueMember(|SIP/3000)</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-pausequeuemember" /></para>
    </formalpara>
  </section>

  <section id="applikationen-userevent">
    <title><code>UserEvent()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>UserEvent()</code></secondary>
    </indexterm>

    <simpara>Sendet ein beliebiges Event an das Manager-Interface.</simpara>

    <synopsis>UserEvent(<replaceable>Eventname</replaceable>[,<replaceable>Inhalt</replaceable>])</synopsis>

    <para>Sendet ein beliebiges Event an das Manager-Interface. Das
    resultierende Event-Paket hat folgendes Format:<programlisting>Event: UserEvent <replaceable>Eventname</replaceable>
Channel: <replaceable>Channelname</replaceable>
Uniqueid: <replaceable>Anruf-ID</replaceable>
[<replaceable>Inhalt</replaceable>]</programlisting></para>

    <simpara>Als Inhalt können weitere Zeilen in der Form <code>Feldname:
    Wert</code> angegeben werden. Mehrere Zeilen werden durch <code>|</code>
    (in älteren Asterisk-Versionen durch <code>,</code> oder <code>^</code>)
    getrennt.</simpara>

    <simpara>Liefert stets 0 zurück.</simpara>

    <programlisting>exten =&gt; 123,1,UserEvent(Test,Hinweis: Ich rufe jetzt ${XY} an.)
exten =&gt; 123,n,Dial(${XY})</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'UserEvent' =- 

[Synopsis]
Send an arbitrary event to the manager interface

[Description]
  UserEvent(eventname[|body]): Sends an arbitrary event to the manager
interface, with an optional body representing additional arguments.  The
body may be specified as a | delimeted list of headers. Each additional
argument will be placed on a new line in the event. The format of the
event will be:
    Event: UserEvent
    UserEvent: &lt;specified event name&gt;
    [body]
If no body is specified, only Event and UserEvent headers will be present.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>8,14c8,13
&lt;   UserEvent(eventname[|body]): Sends an arbitrary event to the manager
&lt; interface, with an optional body representing additional arguments.  The
&lt; body may be specified as a | delimeted list of headers. Each additional
&lt; argument will be placed on a new line in the event. The format of the
&lt; event will be:
&lt;     Event: UserEvent
&lt;     UserEvent: &lt;specified event name&gt;
---
&gt;   UserEvent(eventname[|body]): Sends an arbitrary event to the
&gt; manager interface, with an optional body representing additional
&gt; arguments.  The format of the event will be:
&gt;     Event: UserEvent&lt;specified event name&gt;
&gt;     Channel: &lt;channel name&gt;
&gt;     Uniqueid: &lt;call uniqueid&gt;
16,17c15,16
&lt; If no body is specified, only Event and UserEvent headers will be present.
&lt; 
---
&gt; If the body is not specified, only Event, Channel, and Uniqueid fields
&gt; will be present.  Returns 0.</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><filename>manager.conf</filename>, Asterisk Manager
      interface</para>
    </formalpara>
  </section>

  <section id="applikationen-verbose">
    <title><code>Verbose()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Verbose()</code></secondary>
    </indexterm>

    <simpara>Sendet beliebigen Text zum <quote>verbose output</quote> (Ausgabe
    im CLI).</simpara>

    <synopsis>Verbose([<replaceable>Level</replaceable>,]<replaceable>Nachricht</replaceable>)</synopsis>

    <simpara>Sendet die angegebene Nachricht an das CLI. Die Stufe
    <code>Level</code> kann als ganzzahliger Wert angegeben werden, um die
    Nachricht nur bei mindestens diesem Verbosity-Level anzuzeigen<footnote>
        <simpara>z.B. <command>asterisk -vvvr</command> für Level 3 - oder
        <command>set verbose 3</command> im CLI</simpara>
      </footnote>. Ist <code>Level</code> nicht angegeben, wird 0
    angenommen.</simpara>

    <simpara>Liefert stets 0 zurück.</simpara>

    <programlisting>exten =&gt; 123,1,Verbose(1,Jemand ruft Extension 123 an.)
exten =&gt; 123,n,Playback(extension)
exten =&gt; 123,n,SayDigits(${EXTEN})</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'Verbose' =- 

[Synopsis]
Send arbitrary text to verbose output

[Description]
Verbose([&lt;level&gt;|]&lt;message&gt;)
  level must be an integer value.  If not specified, defaults to 0.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-noop" />, <xref
      linkend="applikationen-log" />, <xref
      linkend="applikationen-dumpchan" /></para>
    </formalpara>
  </section>

  <section id="applikationen-vmauthenticate">
    <title><code>VMAuthenticate()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>VMAuthenticate()</code></secondary>
    </indexterm>

    <simpara>Authentifiziert den Anrufer über ein
    Voicemail-password.</simpara>

    <synopsis>VMAuthenticate([<replaceable>mailbox</replaceable>][@<replaceable>context</replaceable>][,<replaceable>Optionen</replaceable>])</synopsis>

    <simpara>Verhält sich wie die <code>Authenticate()</code>-Anwendung, mit
    dem Unterschied, dass die Passwörter aus
    <filename>voicemail.conf</filename> (im optionalen VM-context
    <code>context</code>) gelesen werden.</simpara>

    <simpara>Ist eine mailbox angegeben, wird nur das password dieser mailbox
    als gültig betrachtet. Ohne Angabe kann sich der Anrufer mit jedem(!)
    VM-password authentifizieren; die Channelvariable
    <code>${AUTH_MAILBOX}</code> wird dann mit der authentifizierten mailbox
    belegt.</simpara>

    <simpara>Mit der Option <code>s</code> wird die Ansage der Aufforderung
    unterdrückt.</simpara>

    <programlisting>; als mailbox die Extension annehmen und authentifizieren:
exten =&gt; 123,1,VMAuthenticate(${EXTEN}@verkauf)
exten =&gt; 123,n,SayDigits(${AUTH_MAILBOX})</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'VMAuthenticate' =- 

[Synopsis]
Authenticate with Voicemail passwords

[Description]
  VMAuthenticate([mailbox][@context][|options]): This application behaves the
same way as the Authenticate application, but the passwords are taken from
voicemail.conf.
  If the mailbox is specified, only that mailbox's password will be considered
valid. If the mailbox is not specified, the channel variable AUTH_MAILBOX will
be set with the authenticated mailbox.

  Options:
    s - Skip playing the initial prompts.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-authenticate" />,
      <filename>voicemail.conf</filename></para>
    </formalpara>
  </section>

  <section id="applikationen-voicemail">
    <title><code>VoiceMail()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>VoiceMail()</code></secondary>
    </indexterm>

    <simpara>Hinterlässt eine Voicemail-Nachricht in der angegebenen
    mailbox.</simpara>

    <synopsis>VoiceMail(<replaceable>mailbox</replaceable>[@<replaceable>context</replaceable>][&amp;<replaceable>mailbox</replaceable>[@<replaceable>context</replaceable>][&amp;<replaceable>...</replaceable>]],<replaceable>Optionen</replaceable>)</synopsis>

    <para>alte Syntax:<synopsis>VoiceMail([s|u|b]<replaceable>mailbox</replaceable>[@<replaceable>context</replaceable>][&amp;<replaceable>mailbox</replaceable>[@<replaceable>context</replaceable>][&amp;<replaceable>...</replaceable>]])</synopsis></para>

    <simpara>Erlaubt dem Anrufer, in der angegebenen mailbox eine
    Voicemail-Nachricht zu hinterlassen. Die mailbox muss in
    <filename>voicemail.conf</filename> konfiguriert sein. Sind mehrere
    mailboxen aufgelistet, wird die Begrüßung der ersten gespielt. Wenn die
    mailbox nicht existiert, wird die Ausführung des Dialplans
    abgebrochen.</simpara>

    <simpara>Mit der Option <code>s</code> (silent) werden die Anweisungen zum
    Hinterlassen der Nachricht übersprungen. Mit <code>u</code> (unavailable)
    wird die Nicht-verfügbar-Nachricht abgespielt, falls vorhanden. Bei
    <code>b</code> (busy) wird die Besetzt-Nachricht gespielt (Datei
    <filename>busy</filename> statt <filename>unavail</filename>).</simpara>

    <simpara>Mit <code>j</code> wird bei einem Fehler zur Extension n+101
    gesprungen, wenn vorhanden.</simpara>

    <simpara>Drückt der Teilnehmer während der Eingabeaufforderung
    <code>0</code> (Null), geht der Anruf zur Extension <code>o</code>
    (kleiner Buchstabe o, Operator) im aktuellen context über.</simpara>

    <simpara>Drückt der Teilnehmer während der Eingabeaufforderung
    <code>*</code>, geht der Anruf zur Extension <code>a</code> (Assistant) im
    aktuellen context über.</simpara>

    <simpara>Gibt im Falle eines Fehlers, falls die mailbox nicht gefunden
    wird oder der Teilnehmer auflegt -1 zurück, sonst 0. Setzt die
    Channelvariable <code>VMSTATUS</code> auf <code>SUCCESS</code> (Erfolg),
    <code>USEREXIT</code> (Abbruch durch Anrufer) oder <code>FAILED</code>
    (Fehler).</simpara>

    <programlisting>; den Anrufer zur mailbox 123 leiten, mit Nicht-erreichbar-Nachricht:
exten =&gt; 123,1,VoiceMail(123,u)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'VoiceMail' =- 

[Synopsis]
Leave a Voicemail message

[Description]
  VoiceMail(mailbox[@context][&amp;mailbox[@context]][...][|options]): This
application allows the calling party to leave a message for the specified
list of mailboxes. When multiple mailboxes are specified, the greeting will
be taken from the first mailbox specified. Dialplan execution will stop if the
specified mailbox does not exist.
  The Voicemail application will exit if any of the following DTMF digits are
received:
    0 - Jump to the 'o' extension in the current dialplan context.
    * - Jump to the 'a' extension in the current dialplan context.
  This application will set the following channel variable upon completion:
    VMSTATUS - This indicates the status of the execution of the VoiceMail
               application. The possible values are:
               SUCCESS | USEREXIT | FAILED

  Options:
    b    - Play the 'busy' greeting to the calling party.
    g(#) - Use the specified amount of gain when recording the voicemail
           message. The units are whole-number decibels (dB).
    s    - Skip the playback of instructions for leaving a message to the
           calling party.
    u    - Play the 'unavailble greeting.
    j    - Jump to priority n+101 if the mailbox is not found or some other
           error occurs.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>28c28
&lt;     u    - Play the 'unavailble greeting.
---
&gt;     u    - Play the 'unavailable greeting.</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-voicemailmain" />,
      <filename>voicemail.conf</filename></para>
    </formalpara>
  </section>

  <section id="applikationen-voicemailmain">
    <title><code>VoiceMailMain()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>VoiceMailMain()</code></secondary>
    </indexterm>

    <simpara>Betritt das Voicemailsystem.</simpara>

    <synopsis>VoiceMailMain([<replaceable>mailbox</replaceable>][@<replaceable>context</replaceable>][,<replaceable>Optionen</replaceable>])</synopsis>

    <para>alte Syntax:<synopsis>VoiceMailMain([[s|p]<replaceable>mailbox</replaceable>][@<replaceable>context</replaceable>])</synopsis></para>

    <simpara>Tritt zum Abrufen von Voicemail-Nachrichten in das
    Voicemail-System ein. Ohne Angabe der mailbox wird der Anrufer zur Eingabe
    der mailboxnummer aufgefordert.</simpara>

    <simpara>Mit der Option <code>s</code> wird die Überprüfung des passwords
    übersprungen. Mit der Option <code>p</code> wird der Benutzer zur Eingabe
    einer mailboxnummer aufgefordert, die angegebene Nummer der Eingabe
    vorangestellt und der daraus resultierende String als mailboxnummer
    verwendet. Das ist nützlich bei der Bereitstellung virtueller
    Voicemailboxen (Virtual Hosting). Mit
    <code>a(<replaceable>Ordner</replaceable>)</code> wird direkt zum
    angegebenen Ordner (Default: <code>INBOX</code>) gesprungen.</simpara>

    <simpara>Ist ein context spezifiziert, werden nur mailboxen in diesem
    Voicemail-context berücksichtigt.</simpara>

    <simpara>Liefert -1 zurück, wenn der Benutzer auflegt, sonst 0.</simpara>

    <programlisting>; zum Voicemail-Menü der mailbox 123 im Voicemail-context default gehen:
exten =&gt; 123,1,VoiceMailMain(123@default)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'VoiceMailMain' =- 

[Synopsis]
Check Voicemail messages

[Description]
  VoiceMailMain([mailbox][@context][|options]): This application allows the
calling party to check voicemail messages. A specific mailbox, and optional
corresponding context, may be specified. If a mailbox is not provided, the
calling party will be prompted to enter one. If a context is not specified,
the 'default' context will be used.

  Options:
    p    - Consider the mailbox parameter as a prefix to the mailbox that
           is entered by the caller.
    g(#) - Use the specified amount of gain when recording a voicemail
           message. The units are whole-number decibels (dB).
    s    - Skip checking the passcode for the mailbox.
    a(#) - Skip folder prompt and go directly to folder specified.
           Defaults to INBOX</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>20,21d19
&lt;     a(#) - Skip folder prompt and go directly to folder specified.
&lt;            Defaults to INBOX</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-voicemail" />,
      <filename>voicemail.conf</filename></para>
    </formalpara>
  </section>

  <section id="applikationen-wait">
    <title><code>Wait()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Wait()</code></secondary>
    </indexterm>

    <simpara>Wartet für eine in Sekunden vorgegebene Dauer.</simpara>

    <synopsis>Wait(<replaceable>Sekunden</replaceable>)</synopsis>

    <simpara>Wartet die angegebene Anzahl Sekunden und liefert dann 0 zurück.
    Es können auch Sekundenbruchteile übergeben werden (z.B. <code>1.5</code>
    für 1,5 Sekunden).</simpara>

    <programlisting>exten =&gt; s,1,Answer()
exten =&gt; s,n,Wait(1.5)                        ; 1,5 Sekunden warten
exten =&gt; s,n,Background(enter-ext-of-person)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'Wait' =- 

[Synopsis]
Waits for some time

[Description]
  Wait(seconds): This application waits for a specified number of seconds.
Then, dialplan execution will continue at the next priority.
  Note that the seconds can be passed with fractions of a second. For example,
'1.5' will ask the application to wait for 1.5 seconds.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-waitexten" /></para>
    </formalpara>
  </section>

  <section id="applikationen-waitexten">
    <title><code>WaitExten()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>WaitExten()</code></secondary>
    </indexterm>

    <simpara>Wartet auf die Eingabe einer Extension.</simpara>

    <synopsis>WaitExten([<replaceable>Sekunden</replaceable>][,<replaceable>Optionen</replaceable>])</synopsis>

    <simpara>Wartet die angegebene Anzahl Sekunden auf die Eingabe einer neuen
    Extension durch den Teilnehmer und liefert dann 0 zurück. Es können auch
    Sekundenbruchteile übergeben werden (z.B. <code>1.5</code> für 1,5
    Sekunden). Falls keine Zeitdauer spezifiziert wird, wird die Standardfrist
    (Default Extension-Timeout) gewartet.</simpara>

    <simpara>Als Option ist <code>m</code> möglich, was dem Anrufer während
    auf eine Eingabe gewartet wird, Wartemusik vorspielt. Dabei kann optional
    in runden Klammern die Musikklasse angegeben werden, z.B.
    <code>m(rock)</code>.</simpara>

    <programlisting>; 10 Sekunden auf die Eingabe einer Extension warten:
exten =&gt; s,1,Answer()
exten =&gt; s,n,Playback(enter-ext-of-person)
exten =&gt; s,n,WaitExten(10)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'WaitExten' =- 

[Synopsis]
Waits for an extension to be entered

[Description]
  WaitExten([seconds][|options]): This application waits for the user to enter
a new extension for a specified number of seconds.
  Note that the seconds can be passed with fractions of a second. For example,
'1.5' will ask the application to wait for 1.5 seconds.
  Options:
    m[(x)] - Provide music on hold to the caller while waiting for an extension.
               Optionally, specify the class for music on hold within parenthesis.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-wait" /></para>
    </formalpara>
  </section>

  <section id="applikationen-waitforring">
    <title><code>WaitForRing()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>WaitForRing()</code></secondary>
    </indexterm>

    <simpara>Wartet die in Sekunden vorgegebene Dauer auf ein
    Klingelzeichen.</simpara>

    <synopsis>WaitForRing(<replaceable>Timeout</replaceable>)</synopsis>

    <simpara>Wartet nach dem Abschluss des nächsten Klingelns
    <code>Timeout</code> Sekunden auf ein Klingelzeichen.</simpara>

    <simpara>Liefert bei Erfolg 0, falls aufgelegt wurde, -1 zurück.</simpara>

    <programlisting>; 5 Sekunden auf Klingeln warten, dann ein paar DTMF-Töne senden:
exten =&gt; 123,1,Answer()
exten =&gt; 123,n,WaitForRing(5)
exten =&gt; 123,n,SendDTMF(1234)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'WaitForRing' =- 

[Synopsis]
Wait for Ring Application

[Description]
  WaitForRing(timeout)
Returns 0 after waiting at least timeout seconds. and
only after the next ring has completed.  Returns 0 on
success or -1 on hangup</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>
  </section>

  <section id="applikationen-waitforsilence">
    <title><code>WaitForSilence()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>WaitForSilence()</code></secondary>
    </indexterm>

    <simpara>Wartet auf eine festgelegte Dauer von Stille.</simpara>

    <synopsis>WaitForSilence(<replaceable>Dauer</replaceable>[,<replaceable>Wiederholungen</replaceable>])</synopsis>

    <simpara>Wartet auf <code>Dauer</code> Millisekunden Stille. Mit der
    Angabe von <code>Wiederholungen</code> wird auf soviele Auftreten von
    Stille gewartet, sonst auf das einmalige Auftreten.</simpara>

    <programlisting>; auf 2 Vorkommen von Stille von jeweils 500 ms warten:
exten =&gt; 123,1,WaitForSilence(500,2)
exten =&gt; 123,n,Playback(tt-weasels)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'WaitForSilence' =- 

[Synopsis]
Waits for a specified amount of silence

[Description]
  WaitForSilence(silencerequired[|iterations][|timeout]) 
Wait for Silence: Waits for up to 'silencerequired' 
milliseconds of silence, 'iterations' times or once if omitted.
An optional timeout specified the number of seconds to return
after, even if we do not receive the specified amount of silence.
Use 'timeout' with caution, as it may defeat the purpose of this
application, which is to wait indefinitely until silence is detected
on the line.  This is particularly useful for reverse-911-type
call broadcast applications where you need to wait for an answering
machine to complete its spiel before playing a message.
The timeout parameter is specified only to avoid an infinite loop in
cases where silence is never achieved.  Typically you will want to
include two or more calls to WaitForSilence when dealing with an answering
machine; first waiting for the spiel to finish, then waiting for the beep, etc.

Examples:
  - WaitForSilence(500|2) will wait for 1/2 second of silence, twice
  - WaitForSilence(1000) will wait for 1 second of silence, once
  - WaitForSilence(300|3|10) will wait for 300ms silence, 3 times,
     and returns after 10 sec, even if silence is not detected

Sets the channel variable WAITSTATUS with to one of these values:
SILENCE - if exited with silence detected
TIMEOUT - if exited without silence detected after timeout</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>8,23c8,10
&lt;   WaitForSilence(silencerequired[|iterations][|timeout]) 
&lt; Wait for Silence: Waits for up to 'silencerequired' 
&lt; milliseconds of silence, 'iterations' times or once if omitted.
&lt; An optional timeout specified the number of seconds to return
&lt; after, even if we do not receive the specified amount of silence.
&lt; Use 'timeout' with caution, as it may defeat the purpose of this
&lt; application, which is to wait indefinitely until silence is detected
&lt; on the line.  This is particularly useful for reverse-911-type
&lt; call broadcast applications where you need to wait for an answering
&lt; machine to complete its spiel before playing a message.
&lt; The timeout parameter is specified only to avoid an infinite loop in
&lt; cases where silence is never achieved.  Typically you will want to
&lt; include two or more calls to WaitForSilence when dealing with an answering
&lt; machine; first waiting for the spiel to finish, then waiting for the beep, etc.
&lt; 
&lt; Examples:
---
&gt;   WaitForSilence(x[|y]) Wait for Silence: Waits for up to 'x' 
&gt; milliseconds of silence, 'y' times or 1 if omitted
&gt; Set the channel variable WAITSTATUS with to one of these values:SILENCE - if silence of x ms was detectedTIMEOUT - if silence of x ms was not detected.Examples:
26,31d12
&lt;   - WaitForSilence(300|3|10) will wait for 300ms silence, 3 times,
&lt;      and returns after 10 sec, even if silence is not detected
&lt; 
&lt; Sets the channel variable WAITSTATUS with to one of these values:
&lt; SILENCE - if exited with silence detected
&lt; TIMEOUT - if exited without silence detected after timeout</screen></para>
      </formalpara>
    </note>
  </section>

  <section id="applikationen-waitmusiconhold">
    <title><code>WaitMusicOnHold()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>WaitMusicOnHold()</code></secondary>
    </indexterm>

    <simpara>Wartet für eine in Sekunden vorgegebene Dauer, wobei Wartemusik
    abgespielt wird.</simpara>

    <synopsis>WaitMusicOnHold(<replaceable>Dauer</replaceable>)</synopsis>

    <simpara>Spielt die in Sekunden angegebene Dauer Wartemusik. Ist keine
    Wartemusik vorhanden, wird die Verzögerung dennoch ausgeführt, jedoch ohne
    Musik.</simpara>

    <simpara>Liefert nach Abschluss 0, oder -1, falls aufgelegt
    wurde.</simpara>

    <programlisting>; 5 Minuten Wartemusik:
exten =&gt; 123,1,Answer()
exten =&gt; 123,n,WaitMusicOnHold(300)
exten =&gt; 123,n,Hangup()</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'WaitMusicOnHold' =- 

[Synopsis]
Wait, playing Music On Hold

[Description]
WaitMusicOnHold(delay): Plays hold music specified number of seconds.  Returns 0 when
done, or -1 on hangup.  If no hold music is available, the delay will
still occur with no sound.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><filename>musiconhold.conf</filename></para>
    </formalpara>
  </section>

  <section id="applikationen-while">
    <title><code>While()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>While()</code></secondary>
    </indexterm>

    <simpara>Beginnt eine While-Schleife.</simpara>

    <synopsis>While(<replaceable>Ausdruck</replaceable>)</synopsis>

    <simpara>Beginnt eine While-Schleife. Die Ausführung kehrt zu diesem Punkt
    zurück, wenn <code>EndWhile()</code> aufgerufen wird, solange bis der
    Ausdruck nicht länger wahr ist. Danach wird die Ausführung nach
    <code>EndWhile()</code> fortgesetzt.</simpara>

    <programlisting>exten =&gt; 123,1,Answer()
exten =&gt; 123,n,Set(i=1)
exten =&gt; 123,n,While($[${i} &lt; 5])
exten =&gt; 123,n,SayNumber(${i})
exten =&gt; 123,n,Set(i=$[${i} + 1])
exten =&gt; 123,n,EndWhile()
exten =&gt; 123,n,Hangup()</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'While' =- 

[Synopsis]
Start a while loop

[Description]
Usage:  While(&lt;expr&gt;)
Start a While Loop.  Execution will return to this point when
EndWhile is called until expr is no longer true.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>5c5
&lt; Start a while loop
---
&gt; Start A While Loop</screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-endwhile" />, <xref
      linkend="applikationen-exitwhile" />, <xref
      linkend="applikationen-continuewhile" />, <xref
      linkend="applikationen-gotoif" /></para>
    </formalpara>
  </section>

  <section id="applikationen-zapateller">
    <title><code>Zapateller()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>Zapateller()</code></secondary>
    </indexterm>

    <simpara>Verwendet einen speziellen Informationston, um automatisierte
    Werbeanrufe abzublocken.</simpara>

    <synopsis>Zapateller(<replaceable>Optionen</replaceable>)</synopsis>

    <simpara>Generiert einen speziellen Informationston (SIT, special
    information tone, "Kein Anschluss unter dieser Nummer"), um
    Telefonverkäufer und andere maschinengewählte Anrufe davon abzuhalten, Sie
    zu belästigen.</simpara>

    <para>Die folgenden Optionen sind verfügbar (ggf. durch <code>|</code>
    getrennt):<variablelist termlength="12">
        <varlistentry>
          <term><code>answer</code></term>

          <listitem>
            <simpara>Bewirkt, dass die Leitung beantwortet wird, bevor der Ton
            abgespielt wird.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>nocallerid</code></term>

          <listitem>
            <simpara>Bewirkt, dass Zapateller den Ton nur abspielt, wenn keine
            Caller-ID-Information verfügbar ist.</simpara>
          </listitem>
        </varlistentry>
      </variablelist></para>

    <programlisting>[incoming]
; im context incoming die SIT-Töne spielen, wenn keine Caller-ID vorhanden ist:
exten =&gt; s,1,Zapateller(nocallerid)
exten =&gt; s,n,Wait(3)
exten =&gt; s,n,Answer()</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'Zapateller' =- 

[Synopsis]
Block telemarketers with SIT

[Description]
  Zapateller(options):  Generates special information tone to block
telemarketers from calling you.  Options is a pipe-delimited list of
options.  The following options are available:
'answer' causes the line to be answered before playing the tone,
'nocallerid' causes Zapateller to only play the tone if there
is no callerid information available.  Options should be separated by |
characters</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-privacymanager" /></para>
    </formalpara>
  </section>

  <section id="applikationen-zapbarge">
    <title><code>ZapBarge()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>ZapBarge()</code></secondary>
    </indexterm>

    <simpara>Tritt in einen Zap-Channel ein und überwacht ihn.</simpara>

    <synopsis>ZapBarge([<replaceable>Channel</replaceable>])</synopsis>

    <simpara>Tritt in den angegebenen Zap-Channel ein. Die anderen Teilnehmer
    auf dem Channel können Sie dabei nicht hören und werden auch sonst keine
    Anzeichen wahrnehmen, dass ihr Anruf überwacht wird.</simpara>

    <simpara>Ist der Channel nicht angegeben, werden Sie zunächst zur Eingabe
    einer Channelnummer aufgefordert. Geben Sie z.B. <code>4#</code> für Zap/4
    ein.</simpara>

    <simpara>Liefert -1, wenn der Anrufer auflegt. Ist unabhängig von dem
    Zustand, dass der Channel überwacht wird.</simpara>

    <programlisting>exten =&gt; 123,1,ZapBarge(Zap/2)
exten =&gt; 123,n,Hangup()</programlisting>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-zapscan" />, <xref
      linkend="applikationen-chanspy" /></para>
    </formalpara>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'ZapBarge' =- 

[Synopsis]
Barge in (monitor) Zap channel

[Description]
  ZapBarge([channel]): Barges in on a specified zap
channel or prompts if one is not specified.  Returns
-1 when caller user hangs up and is independent of the
state of the channel being monitored.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>
  </section>

  <section id="applikationen-zapras">
    <title><code>ZapRAS()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>ZapRAS()</code></secondary>
    </indexterm>

    <simpara>Führt den Zaptel ISDN Remote Access Server aus.</simpara>

    <synopsis>ZapRAS(<replaceable>args</replaceable>)</synopsis>

    <simpara>Startet über <command>pppd</command> einen ISDN-RAS-Server auf
    dem aktuellen Channel. Der Channel muss ein freier Channel (z.B. PRI
    Source) und ein Zaptel-Channel sein, um diese Funktion durchführen zu
    können. (Eine Modem-Emulation ist nicht enthalten.)</simpara>

    <simpara>Um Zaptel zu kennen, muss <command>pppd</command> entsprechend
    vorbereitet sein. <code>Argumente</code> ist eine Liste von durch das
    <code>|</code>-Symbol getrennten Argumenten<footnote>
        <simpara>deren Erklärung hier zu weit führen würde; siehe <ulink
        url="http://www.voip-info.org/wiki/view/Asterisk+cmd+ZapRAS">http://www.voip-info.org/wiki/view/Asterisk+cmd+ZapRAS</ulink></simpara>
      </footnote>.</simpara>

    <simpara>Liefert stets -1 zurück.</simpara>

    <simpara>Diese Anwendungen ist nur für die Benutzung mit ISDN-Leitungen
    ausgelegt, und Ihr Kernel muss mit einem Patch für die Unterstützung von
    <code>ZapRAS()</code> versehen sein. Außerdem muss Ihr Kernel
    ppp-Unterstützung bereitstellen.</simpara>

    <programlisting>exten =&gt; 123,1,Answer()
exten =&gt; 123,n,ZapRAS(debug|64000|noauth|netmask|255.255.255.0|10.0.0.1:10.0.0.2)</programlisting>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'ZapRAS' =- 

[Synopsis]
Executes Zaptel ISDN RAS application

[Description]
  ZapRAS(args): Executes a RAS server using pppd on the given channel.
The channel must be a clear channel (i.e. PRI source) and a Zaptel
channel to be able to use this function (No modem emulation is included).
Your pppd must be patched to be zaptel aware. Arguments should be
separated by | characters.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>
  </section>

  <section id="applikationen-zapscan">
    <title><code>ZapScan()</code></title>

    <indexterm significance="preferred">
      <primary>Dialplan-Applikationen</primary>

      <secondary><code>ZapScan()</code></secondary>
    </indexterm>

    <simpara>Durchsucht Zap-Kanäle, um Anrufe zu überwachen.</simpara>

    <synopsis>ZapScan([<replaceable>Gruppe</replaceable>])</synopsis>

    <simpara>Erlaubt einem Call-Center-Manager, Zap-Kanäle auf bequeme Art zu
    überwachen. Benutzen Sie <code>#</code> um den nächsten Channel
    auszuwählen, oder <code>*</code> zum Beenden. Sie können die Abfrage auf
    eine bestimmte Channelgruppe begrenzen, indem Sie den Parameter
    <code>Gruppe</code> verwenden.</simpara>

    <programlisting>exten =&gt; 123,1,ZapScan()</programlisting>

    <formalpara>
      <title>See also</title>

      <para><xref linkend="applikationen-zapbarge" />, <xref
      linkend="applikationen-chanspy" /></para>
    </formalpara>

    <note>
      <formalpara>
        <title>Internal help for this application in Asterisk 1.4:</title>

        <para><screen>  -= Info about application 'ZapScan' =- 

[Synopsis]
Scan Zap channels to monitor calls

[Description]
  ZapScan([group]) allows a call center manager to monitor Zap channels in
a convenient way.  Use '#' to select the next channel and use '*' to exit
Limit scanning to a channel GROUP by setting the option group argument.</screen></para>
      </formalpara>

      <formalpara>
        <title>diff output to internal help in Asterisk 1.2:</title>

        <para><screen>- none - </screen></para>
      </formalpara>
    </note>
  </section>
</section>