<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE appendix PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
<appendix id="funktionen" lang="en" revision="$Revision:528 $">
    <!--% Copyright (c) 2006 - 2007 by 
% Stefan Wintermeyer <sw@amooma.de>
% Permission is granted to copy, distribute and/or modify this document
% under the terms of the GNU Free Documentation License, Version 1.2
% or any later version published by the Free Software Foundation
% with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
% Texts. A copy of the license is included in the section entitled "GNU
% Free Documentation License".
% translated from the German by Stephen Bosch <sbosch@vodacomm.ca>
% Asterisk training and consulting is offered at http://www.amooma.de-->

    <title>Functions in the dialplan</title>

    <simpara>In addition to dialplan applications, which have been part of
    Asterisk almost from the very beginning, Asterisk also supports functions
    as of Asterisk 1.2. This is part of a long-standing effort to make
    Asterisk behave more like a programming environment. In contrast to
    applications, functions may not be called directly. Instead, they are
    called inside applications and return a value, or -- in a departure from
    the classical definition of a function -- they may even be written to
    using the application <command><code>Set()</code></command> (see <xref
    linkend="applications-set" />). Function names are always written in
    uppercase letters. Surprisingly, functions are written in the same way as
    variables, inside curly braces and preceded by a $ character (
    <code>${}</code> ). This is necessary because strings are not always
    bounded by quotation marks.</simpara>

    <sidebar>
      <simpara>We could be forgiven for criticizing the less-than-intuitive
      distinction between Asterisk applications, functions and even variables.
      Nor is there a consistently applied naming convention: for example,
      <code>SIP_HEADER()</code> is broken by an underscore ("_") but
      <code>SIPCHANINFO()</code> is not. This is a problem with many
      programming languages and environments; these differences in convention
      add no useful information but make learning more difficult. In addition
      to this, the use of the delimiters <code>,</code> ("comma"),
      <code>&amp;</code> ("ampersand") and <code>|</code> ("pipe") appears
      arbitrary. The concept of writing to a function in the same way one
      might write to a variable goes counter to the basic definition of a
      function in nearly every other programming language and continues to
      cause confusion, particularly among new Asterisk users with programming
      backgrounds.</simpara>

      <simpara>Despite considerable improvements in Version 1.4, the dialplan
      programming remains rather inflexible when compared with "real"
      programming languages. If this proves bothersome, you might consider
      exploring Asterisk Extension Language (AEL) in more depth (see <xref
      linkend="ael" />) as it uses the same functions and applications but has
      a more robust structure and is often easier to interpret.</simpara>

      <simpara>In any case, it is sensible to start getting comfortable with
      AEL, as the Asterisk development roadmap shows that it will eventually
      replace the current dialplan language entirely.</simpara>
    </sidebar>

    <simpara>To find out which functions are currently available in your
    installation, enter <userinput>show functions</userinput> and
    <userinput>show function
    <replaceable>FUNCTIONNAME</replaceable></userinput> or <userinput>core
    show functions</userinput> and <userinput>core show function
    <replaceable>FUNCTIONNAME</replaceable></userinput> (depending on your
    Asterisk version) in the CLI.<footnote>
        <para>Command Line Interface. This may be invoked with
        <command>asterisk -r</command>.</para>
      </footnote>Note that these commands are case-sensitive. Function names
    must be written entirely in uppercase.</simpara>

    <section id="functions-agent">
      <title><code>AGENT()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>AGENT()</code></secondary>
        </indexterm></title>

      <synopsis>AGENT(<replaceable>agentNumber</replaceable>[:<replaceable>field</replaceable>])</synopsis>

      <para>Returns information about an agent identified by
      <code>agentNumber</code>. The following fields may be
      queried:<variablelist termlength="10">
          <varlistentry>
            <term><code>status</code></term>

            <listitem>
              <simpara>(default) The status of the agent, either
              <code>LOGGEDIN</code> or <code>LOGGEDOUT</code></simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>password</code></term>

            <listitem>
              <simpara>The agent's password</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>name</code></term>

            <listitem>
              <simpara>The agent's name</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>mohclass</code></term>

            <listitem>
              <simpara>The music-on-hold class</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>exten</code></term>

            <listitem>
              <simpara>The callback extension for the agent. This is used by
              <command><code>AgentCallbackLogin()</code></command>.</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>channel</code></term>

            <listitem>
              <simpara>The name of the agent's active channel (used bt
              <command><code>AgentLogin()</code></command>)</simpara>
            </listitem>
          </varlistentry>
        </variablelist><programlisting>; set the variable foo to the name of Agent 42:
exten =&gt; 123,1,Set(foo=${AGENT(42:name)})</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'AGENT' =- 

[Syntax]
AGENT(&lt;agentid&gt;[:item])

[Synopsis]
Gets information about an Agent

[Description]
The valid items to retrieve are:
- status (default)      The status of the agent
                          LOGGEDIN | LOGGEDOUT
- password              The password of the agent
- name                  The name of the agent
- mohclass              MusicOnHold class
- exten                 The callback extension for the Agent (AgentCallbackLogin)
- channel               The name of the active channel for the Agent (AgentLogin)</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>-- not available in Version 1.2 --</screen></para>
        </formalpara>
      </note>
    </section>

    <section id="functions-array">
      <title><code>ARRAY()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>ARRAY()</code></secondary>
        </indexterm></title>

      <synopsis>ARRAY(<replaceable>var1</replaceable>[,<replaceable>var2</replaceable>[,<replaceable>...</replaceable>]])</synopsis>

      <simpara><emphasis>(beginning Asterisk 1.4)</emphasis></simpara>

      <para>Sets multiple variables simultaneously (the name is misleading;
      programmers should note that this does not behave the way an array
      normally would). <code>ARRAY()</code> can only be used for writing, not
      reading. Remember to separate values with commas
      <emphasis>and</emphasis> to escape the commas with a backslash
      (<code>\</code>), or Asterisk will treat the following characters as an
      additional parameter for
      <code><command>Set()</command></code>!<programlisting>; Set var1 to 1 and var2 to 2:
exten =&gt; 123,1,Set(ARRAY(var1,var2)=1\,2)</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'ARRAY' =- 

[Syntax]
ARRAY(var1[|var2[...][|varN]])

[Synopsis]
Allows setting multiple variables at once

[Description]
The comma-separated list passed as a value to which the function is set will
be interpreted as a set of values to which the comma-separated list of
variable names in the argument should be set.
Hence, Set(ARRAY(var1|var2)=1\,2) will set var1 to 1 and var2 to 2
Note: remember to either backslash your commas in extensions.conf or quote the
entire argument, since Set can take multiple arguments itself.</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>-- not available in Version 1.2 --</screen></para>
        </formalpara>
      </note>
    </section>

    <section id="functions-base64_decode">
      <title><code>BASE64_DECODE()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>BASE64_DECODE()</code></secondary>
        </indexterm></title>

      <synopsis>BASE64_DECODE(Base64_String)</synopsis>

      <simpara><emphasis>(beginning Asterisk 1.4)</emphasis></simpara>

      <para>Decodes a base64-encoded string.<programlisting>exten =&gt; 123,1,Set(foo=${BASE64_DECODE("SGFsbG8gV2VsdA==")})</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'BASE64_DECODE' =- 

[Syntax]
BASE64_DECODE(&lt;base64_string&gt;)

[Synopsis]
Decode a base64 string

[Description]
Returns the plain text string</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>-- not available in Version 1.2 --</screen></para>
        </formalpara>
      </note>
    </section>

    <section id="functions-base64_encode">
      <title><code>BASE64_ENCODE()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>BASE64_ENCODE()</code></secondary>
        </indexterm></title>

      <synopsis>BASE64_ENCODE(<replaceable>String</replaceable>)</synopsis>

      <simpara><emphasis>(beginning Asterisk 1.4)</emphasis></simpara>

      <para>Encodes a string in base64.<programlisting>exten =&gt; 123,1,Set(foo=${BASE64_ENCODE("Hey World")})</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'BASE64_ENCODE' =- 

[Syntax]
BASE64_ENCODE(&lt;string&gt;)

[Synopsis]
Encode a string in base64

[Description]
Returns the base64 string</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>-- not available in Version 1.2 --</screen></para>
        </formalpara>
      </note>
    </section>

    <section id="functions-callerid">
      <title><code>CALLERID()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>CALLERID()</code></secondary>
        </indexterm></title>

      <synopsis>CALLERID(<replaceable>field</replaceable>)</synopsis>

      <para>Returns or sets information about the caller. The
      <replaceable>field</replaceable> is one of the following:<variablelist
          termlength="8">
          <varlistentry>
            <term><code>name</code></term>

            <listitem>
              <simpara>Name of the caller, as an alphanumeric string. Keeping
              this string short is recommended (<emphasis>e.g.</emphasis> 15
              characters).</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>num</code></term>

            <listitem>
              <simpara>Number of the caller, digits only. (Sometimes also
              found in field <code>number</code>, perhaps depending on the
              Asterisk version)</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>all</code></term>

            <listitem>
              <simpara>Name and number with the number in angle brackets,
              <emphasis>e.g.</emphasis>: "<code>Robert Cossack
              &lt;2125558721&gt;</code>"</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>ani</code></term>

            <listitem>
              <simpara>ANI<footnote>
                  <simpara>Automatic Number Identification</simpara>
                </footnote>, for outgoing calls</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>dnid</code></term>

            <listitem>
              <simpara>DNID<footnote>
                  <simpara>Dialed/Destination Number Identification
                  Service</simpara>
                </footnote> number. Corresponds to the dialed number
              (Sometimes also found in field <code>dnis</code>, perhaps
              depending on the Asterisk version)</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>rdnis</code></term>

            <listitem>
              <simpara>RDNIS<footnote>
                  <simpara>Redirected Dialed Number Identification
                  Service</simpara>
                </footnote> number. The number which was forwarded to the
              current extension. (This is useful, for example, if the number
              of the active mailbox does not correspond to that of the dialed
              extension.)</simpara>
            </listitem>
          </varlistentry>
        </variablelist>The old channel variable <code>${CALLERIDNUM}</code> is
      replaced by the function <code>${CALLERID(num)}</code> as of Asterisk
      1.4 (Similarly, <code>${RDNIS}</code> is replaced by
      <code>$(CALLERID(rdnis))</code> etc.). The application
      <code><command>SetCIDName()</command></code> is replaced by
      <code><command>Set(CALLERID(name)=<replaceable>Name</replaceable>)</command></code>
      (Similarly, <code>SetCallerID()</code> is replaced by
      <command><code>Set(CALLERID(all)=<replaceable>Name</replaceable>
      &lt;<replaceable>Number</replaceable>&gt;)</code></command>
      etc.).<programlisting>; Set the variable foo to the complete caller ID:
exten =&gt; 123,1,Set(foo=${CALLERID(all)})

; Set the caller namer to "Robert Cossack":
exten =&gt; 123,1,Set(CALLERID(name)="Robert Cossack") </programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'CALLERID' =- 

[Syntax]
CALLERID(datatype[,&lt;optional-CID&gt;])

[Synopsis]
Gets or sets Caller*ID data on the channel.

[Description]
Gets or sets Caller*ID data on the channel.  The allowable datatypes
are "all", "name", "num", "ANI", "DNID", "RDNIS".
Uses channel callerid by default or optional callerid, if specified.</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>5c5
&lt; CALLERID(datatype[,&lt;optional-CID&gt;])
---
&gt; CALLERID(datatype)
13d12
&lt; Uses channel callerid by default or optional callerid, if specified.</screen></para>
        </formalpara>
      </note>
    </section>

    <section id="functions-cdr">
      <title><code>CDR()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>CDR()</code></secondary>
        </indexterm></title>

      <synopsis>CDR(<replaceable>field</replaceable>)</synopsis>

      <para>Reads or sets CDR<footnote>
          <simpara>Call Data Record, siehe <xref
          linkend="glossar-cdr" /></simpara>
        </footnote> fields. The <replaceable>field</replaceable> is one of the
      following (only reading is possible unless otherwise
      noted):<variablelist termlength="13">
          <varlistentry>
            <term><code>clid</code></term>

            <listitem>
              <simpara>Caller ID</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>src</code></term>

            <listitem>
              <simpara>The source number (caller ID number)</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>dst</code></term>

            <listitem>
              <simpara>The call destination</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>dcontext</code></term>

            <listitem>
              <simpara>Destination context</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>channel</code></term>

            <listitem>
              <simpara>Channel name</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>dstchannel</code></term>

            <listitem>
              <simpara>Destination channel, if applicable</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>lastapp</code></term>

            <listitem>
              <simpara>The last executed application</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>lastdata</code></term>

            <listitem>
              <simpara>The arguments to the last executed
              application</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>start</code></term>

            <listitem>
              <simpara>Time the call started</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>answer</code></term>

            <listitem>
              <simpara>Time the call was answered</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>end</code></term>

            <listitem>
              <simpara>Time the call ended</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>duration</code></term>

            <listitem>
              <simpara>Duration of the call in seconds</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>billsec</code></term>

            <listitem>
              <simpara>Duration of the call since the call was answered (in
              other words, the billable duration) in seconds</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>disposition</code></term>

            <listitem>
              <simpara>Status of the call: <code>ANSWERED</code>, <code>NO
              ANSWER</code>, <code>BUSY</code> or
              <code>FAILED</code></simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>amaflags</code></term>

            <listitem>
              <simpara>The AMA<footnote>
                  <simpara>Automated Message Accounting, see <xref
                  linkend="glossar-AMA" /></simpara>
                </footnote> flags. Possible flags are <code>DEFAULT</code>,
              <code>BILLING</code>, <code>DOCUMENTATION</code> and
              <code>OMIT</code>. (Sometimes <code>BILLING</code> and
              <code>OMIT</code> are replaced by <code>BILL</code> and
              <code>IGNORE</code>, perhaps depending on the Asterisk
              version.)</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>accountcode</code></term>

            <listitem>
              <simpara>The alphanumeric ID of the billing account, maximum 20
              characters. May be set as well as read</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>uniqueid</code></term>

            <listitem>
              <simpara>The unique ID of the channel (maximum 32
              characters)</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>userfield</code></term>

            <listitem>
              <simpara>A user field for storing arbitrary information (maximum
              255 characters). May be set as well as read</simpara>
            </listitem>
          </varlistentry>
        </variablelist><programlisting>; Set foo to the duration of the call:
exten =&gt; 123,1,Set(foo=${CDR(duration)})

; Set the user field to "my information":
exten =&gt; 123,1,Set(CDR(userfield)=my information)</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'CDR' =- 

[Syntax]
  Here is a list of all the available cdr field names:
    clid          lastdata       disposition
    src           start          amaflags
    dst           answer         accountcode
    dcontext      end            uniqueid
    dstchannel    duration       userfield
    lastapp       billsec        channel
  All of the above variables are read-only, except for accountcode,
  userfield, and amaflags. You may, however,  supply
  a name not on the above list, and create your own
  variable, whose value can be changed with this function,
  and this variable will be stored on the cdr.
   raw values for disposition:
       1 = NO ANSWER
       2 = BUSY
       3 = FAILED
       4 = ANSWERED
    raw values for amaflags:
       1 = OMIT
       2 = BILLING
       3 = DOCUMENTATION


[Synopsis]
Gets or sets a CDR variable

[Description]
Options:
  'r' searches the entire stack of CDRs on the channel
  'u' retrieves the raw, unprocessed value
  For example, 'start', 'answer', and 'end' will be retrieved as epoch
  values, when the 'u' option is passed, but formatted as YYYY-MM-DD HH:MM:SS
  otherwise.  Similarly, disposition and amaflags will return their raw
  integral values.</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>5,26c5
&lt;   Here is a list of all the available cdr field names:
&lt;     clid          lastdata       disposition
&lt;     src           start          amaflags
&lt;     dst           answer         accountcode
&lt;     dcontext      end            uniqueid
&lt;     dstchannel    duration       userfield
&lt;     lastapp       billsec        channel
&lt;   All of the above variables are read-only, except for accountcode,
&lt;   userfield, and amaflags. You may, however,  supply
&lt;   a name not on the above list, and create your own
&lt;   variable, whose value can be changed with this function,
&lt;   and this variable will be stored on the cdr.
&lt;    raw values for disposition:
&lt;        1 = NO ANSWER
&lt;        2 = BUSY
&lt;        3 = FAILED
&lt;        4 = ANSWERED
&lt;     raw values for amaflags:
&lt;        1 = OMIT
&lt;        2 = BILLING
&lt;        3 = DOCUMENTATION
&lt; 
---
&gt; CDR(&lt;name&gt;[|options])
32,38c11
&lt; Options:
&lt;   'r' searches the entire stack of CDRs on the channel
&lt;   'u' retrieves the raw, unprocessed value
&lt;   For example, 'start', 'answer', and 'end' will be retrieved as epoch
&lt;   values, when the 'u' option is passed, but formatted as YYYY-MM-DD HH:MM:SS
&lt;   otherwise.  Similarly, disposition and amaflags will return their raw
&lt;   integral values.
---
&gt; Option 'r' searches the entire stack of CDRs on the channel</screen></para>
        </formalpara>
      </note>
    </section>

    <section id="functions-channel">
      <title><code>CHANNEL()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>CHANNEL()</code></secondary>
        </indexterm></title>

      <synopsis>CHANNEL(<replaceable>field</replaceable>)</synopsis>

      <simpara><emphasis>(beginning Asterisk 1.4)</emphasis></simpara>

      <para>Reads/sets specific channel parameters. The
      <replaceable>field</replaceable> is one of the following (only reading
      is possible unless otherwise noted):<variablelist>
          <varlistentry>
            <term><code>audioreadformat</code></term>

            <listitem>
              <simpara>The format for incoming audio on the channel</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>audionativeformat</code></term>

            <listitem>
              <simpara>The native audio format of the channel</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>audiowriteformat</code></term>

            <listitem>
              <simpara>The format for outgoing audio on the channel</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>callgroup</code></term>

            <listitem>
              <simpara>Extensions in Asterisk can be sorted into call groups
              numbered from 0 - 63, <emphasis>e.g.</emphasis> as a client
              number.<footnote>
                  <simpara>This limit of 64 call groups appears to be
                  completely arbitrary and may not be sufficient for all
                  users.</simpara>
                </footnote></simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>channeltype</code></term>

            <listitem>
              <simpara>The channel driver, or "technology" of the current
              channel, <emphasis>e.g.</emphasis>: IAX or SIP</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>language</code></term>

            <listitem>
              <simpara>The language for voice prompts. May be set as well as
              read</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>musicclass</code></term>

            <listitem>
              <simpara>The music-on-hold class, as defined in
              <filename>musiconhold.conf</filename>. May be set as well as
              read</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>state</code></term>

            <listitem>
              <para>State of the channel (<code>Down</code>,
              <code>Rsrvd</code>, <code>OffHook</code>, <code>Dialing</code>,
              <code>Ring</code>, <code>Ringing</code>, <code>Up</code>,
              <code>Busy</code>, <code>Dialing Offhook</code>,
              <code>Pre-ring</code>, <code>Unknown</code>)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>tonezone</code></term>

            <listitem>
              <simpara>The "tone zone" defines the standard tone indications
              (dialing, ringing, busy, <emphasis>etc.</emphasis>) for specific
              regions and countries. This is set in the configuration file for
              the channel driver (<emphasis>e.g.</emphasis>
              <filename>zaptel.conf</filename>) with the parameters
              <code>loadzone</code> and <code>defaultzone</code>. Possible
              values are (as defined in
              <filename>indications.conf</filename>): <code>at</code>,
              <code>au</code>, <code>be</code>, <code>br</code>,
              <code>ch</code>, <code>cl</code>, <code>cn</code>,
              <code>cz</code>, <code>de</code>, <code>dk</code>,
              <code>ee</code>, <code>es</code>, <code>fi</code>,
              <code>fr</code>, <code>gr</code>, <code>hu</code>,
              <code>it</code>, <code>lt</code>, <code>mx</code>,
              <code>ml</code>, <code>no</code>, <code>nz</code>,
              <code>pl</code>, <code>pt</code>, <code>ru</code>,
              <code>se</code>, <code>sg</code>, <code>uk</code>,
              <code>us</code>, <code>us-old</code>, <code>tw</code>,
              <code>ve</code>, <code>za</code>.</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>videonativeformat</code></term>

            <listitem>
              <simpara>The native video format of the channel</simpara>
            </listitem>
          </varlistentry>
        </variablelist>In addition to the field described above, specific
      channel drivers can make others available. To learn more about these,
      look in the documentation for the specific channel driver. Fields which
      are unavailable on the current channel will return an empty
      string.<programlisting>; Query the channel type:
exten =&gt; 123,1,Set(foo=${CHANNEL(channeltype)})

; Change language to English:
exten =&gt; 123,1,Set(CHANNEL(language)=en)</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'CHANNEL' =- 

[Syntax]
CHANNEL(item)

[Synopsis]
Gets/sets various pieces of information about the channel.

[Description]
Gets/set various pieces of information about the channel.
Standard items (provided by all channel technologies) are:
R/O  audioreadformat     format currently being read
R/O  audionativeformat   format used natively for audio
R/O  audiowriteformat    format currently being written
R/W  callgroup           call groups for call pickup
R/O  channeltype         technology used for channel
R/W  language            language for sounds played
R/W  musicclass          class (from musiconhold.conf) for hold music
R/W  rxgain              set rxgain level on channel drivers that support it
R/O  state               state for channel
R/W  tonezone            zone for indications played
R/W  txgain              set txgain level on channel drivers that support it
R/O  videonativeformat   format used natively for video

Additional items may be available from the channel driver providing
the channel; see its documentation for details.

Any item requested that is not available on the current channel will
return an empty string.</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>-- not available in Version 1.2 --</screen></para>
        </formalpara>
      </note>
    </section>

    <section id="functions-checksipdomain">
      <title><code>CHECKSIPDOMAIN()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>CHECKSIPDOMAIN()</code></secondary>
        </indexterm></title>

      <synopsis>CHECKSIPDOMAIN(<replaceable>domain</replaceable>)</synopsis>

      <para>Checks to see if the specified SIP domain name (may also be an IP
      address) is local (see <filename>sip.conf</filename>). Returns the
      domain name, IP address or empty string.<programlisting>exten =&gt; 123,1,Set(foo=${CHECKSIPDOMAIN(123.45.67.89)})</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'CHECKSIPDOMAIN' =- 

[Syntax]
CHECKSIPDOMAIN(&lt;domain|IP&gt;)

[Synopsis]
Checks if domain is a local domain

[Description]
This function checks if the domain in the argument is configured
as a local SIP domain that this Asterisk server is configured to handle.
Returns the domain name if it is locally handled, otherwise an empty string.
Check the domain= configuration in sip.conf</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>- none - </screen></para>
        </formalpara>
      </note>
    </section>

    <section id="functions-curl">
      <title><code>CURL()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>CURL()</code></secondary>
        </indexterm></title>

      <synopsis>CURL(<replaceable>URL</replaceable>[|<replaceable>POST-data</replaceable>])</synopsis>

      <para>Loads a web page from the specified <replaceable>URL</replaceable>
      using <code>GET</code>. If
      <code><replaceable>POST-data</replaceable></code> are provided, these
      are sent with <code>POST</code>. Returns the page as a
      string.<programlisting>; Retrieve http://example.com/page.php?id=1&amp;action=view :
exten =&gt; 123,1,Set(foo=${CURL(http://example.com/page.php?id=1&amp;action=view)})</programlisting></para>
    </section>

    <section id="functions-cut">
      <title><code>CUT()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>CUT()</code></secondary>
        </indexterm></title>

      <synopsis>CUT(<replaceable>variablename</replaceable>,<replaceable>delimiter</replaceable>,<replaceable>field</replaceable>)</synopsis>

      <para>(As of Asterisk 1.2.8, use a pipe ("|") character instead of
      commas as a parameter delimiter.)</para>

      <para>Processes a string in a variable according to a specified
      delimiter (default: <code>-</code>) and returns the requested fields.
      The <replaceable>field</replaceable> may also be a range of fields
      (<emphasis>e.g.</emphasis> <code>2-4</code>) or multiple fields and
      ranges, separated with "&amp;", <emphasis>e.g.</emphasis>
      <code>2-4&amp;6</code>; ranges such as <code>3-</code> (everything from
      field 3 on) or <code>-3</code> (everything up to field 3) is
      possible.</para>

      <para>If a comma is used as a delimiter, it must first be escaped with a
      backslash, <emphasis>e.g.</emphasis> <code>CUT(var,\,,2)</code>.</para>

      <para><programlisting>exten =&gt; 123,1,Set(var=1-2-3-4-5)            ; var is "1-2-3-4-5"
exten =&gt; 123,n,Set(var=${CUT(var,,1-3&amp;5)})   ; var is "1-2-3-5"</programlisting></para>

      <important>
        <para>The parameter
        <code><replaceable>variablename</replaceable></code> must be the
        <emphasis>name</emphasis> of a variable, and not a string. If
        <code>foo</code> is the variable name and <code>bar</code> the
        contents, the following example would be incorrect:
        <code>CUT(${bar},,3)</code></para>
      </important>

      <formalpara>
        <title>See also</title>

        <para><xref linkend="functions-fieldqty" /></para>
      </formalpara>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'CUT' =- 

[Syntax]
CUT(&lt;varname&gt;,&lt;char-delim&gt;,&lt;range-spec&gt;)

[Synopsis]
Slices and dices strings, based upon a named delimiter.

[Description]
  varname    - variable you want cut
  char-delim - defaults to '-'
  range-spec - number of the field you want (1-based offset)
             may also be specified as a range (with -)
             or group of ranges and fields (with &amp;)</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>- none - </screen></para>
        </formalpara>
      </note>
    </section>

    <section id="functions-db">
      <title><code>DB()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>DB()</code></secondary>
        </indexterm></title>

      <synopsis>DB(<replaceable>family</replaceable>/<replaceable>key</replaceable>)</synopsis>

      <para>Reads/sets a value in the Asterisk DB (AstDB). When reading,
      either a value is returned, or an empty string if the key does not
      exist. The output can be found in the variable
      <code>DB_RESULT</code>.<programlisting>; Set open/source in the AstDB and then query it:
exten =&gt; 123,1,Set(DB(open/source)=${yes})
exten =&gt; 123,n,Set(var=${DB(open/source)})
exten =&gt; 123,n,GotoIf($[[${DB(open/source)} = 1]?opensource:closedsource)</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'DB' =- 

[Syntax]
DB(&lt;family&gt;/&lt;key&gt;)

[Synopsis]
Read from or write to the Asterisk database

[Description]
This function will read from or write a value to the Asterisk database.  On a
read, this function returns the corresponding value from the database, or blank
if it does not exist.  Reading a database value will also set the variable
DB_RESULT.  If you wish to find out if an entry exists, use the DB_EXISTS
function.</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>- none - </screen></para>
        </formalpara>
      </note>

      <formalpara>
        <title>See also</title>

        <para><xref linkend="functions-db_exists" />, <xref
        linkend="functions-db_delete" />, <xref
        linkend="applications-dbdeltree" /></para>
      </formalpara>
    </section>

    <section id="functions-db_delete">
      <title><code>DB_DELETE()</code><indexterm>
          <primary>Dialplan Functions</primary>

          <secondary><code>DB_DELETE()</code></secondary>
        </indexterm></title>

      <synopsis>DB_DELETE(<replaceable>family/key</replaceable>)</synopsis>

      <para>Deletes a value from the AstDB. Upon completion, the variable
      <code>DB_RESULT</code> is set to this value, if it
      exists.<programlisting>; delete cidnums/4045559814:
exten =&gt; 123,1,Set(ignored=${DB_DELETE(cidnums/4045559814)})</programlisting></para>

      <note>
        <simpara>For versions prior to Asterisk 1.4, use the application
        <code>DBdel()</code>.</simpara>
      </note>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'DB_DELETE' =- 

[Syntax]
DB_DELETE(&lt;family&gt;/&lt;key&gt;)

[Synopsis]
Return a value from the database and delete it

[Description]
This function will retrieve a value from the Asterisk database
 and then remove that key from the database.  DB_RESULT
will be set to the key's value if it exists.</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>-- not available in Version 1.2 --</screen></para>
        </formalpara>
      </note>

      <formalpara>
        <title>See also</title>

        <para><xref linkend="functions-db" />, <xref
        linkend="functions-db_exists" />, <xref
        linkend="applications-dbdel" />, <xref
        linkend="applications-dbdeltree" /></para>
      </formalpara>
    </section>

    <section id="functions-db_exists">
      <title><code>DB_EXISTS()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>DB_EXISTS()</code></secondary>
        </indexterm></title>

      <synopsis>DB_EXISTS(<replaceable>family</replaceable>/<replaceable>key</replaceable>)</synopsis>

      <para>Tests to see if a key exists in the AstDB. Returns 1 or 0. Sets
      the variable <code>DB_RESULT</code> to the value of the key, if it
      exists.<programlisting>; Query if cidnums/4045559814 exists:
exten =&gt; 123,1,Set(foo=${DB_EXISTS(cidnums/4045559814)})</programlisting></para>

      <para>This is one way to replace the application
      <code>LookupBlacklist()</code>. This code example causes Asterisk to
      jump to the context <code>blacklisted</code>, extension <code>s</code>,
      priority <code>1</code>, if the CID can be found in the
      blacklist:<programlisting>exten =&gt; 123,1,GotoIf(${DB_EXISTS(blacklist/${CALLERID(num)})}?blacklisted,s,1)
exten =&gt; 123,n,Dial(IAX2/user:password@example.com/500)

[blacklisted]
exten =&gt; s,1,NoOp(${CALLERID(num)} is in the blacklist)
exten =&gt; s,n,Hangup()</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'DB_EXISTS' =- 

[Syntax]
DB_EXISTS(&lt;family&gt;/&lt;key&gt;)

[Synopsis]
Check to see if a key exists in the Asterisk database

[Description]
This function will check to see if a key exists in the Asterisk
database. If it exists, the function will return "1". If not,
it will return "0".  Checking for existence of a database key will
also set the variable DB_RESULT to the key's value if it exists.</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>- none - </screen></para>
        </formalpara>
      </note>

      <formalpara>
        <title>See also</title>

        <para><xref linkend="functions-db" />, <xref
        linkend="functions-db_delete" />, <xref
        linkend="applications-dbdeltree" /></para>
      </formalpara>
    </section>

    <section id="functions-dundilookup">
      <title><code>DUNDILOOKUP()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>DUNDILOOKUP()</code></secondary>
        </indexterm></title>

      <synopsis>DUNDILOOKUP(<replaceable>number</replaceable>[|<replaceable>DUNDi-context</replaceable>[|<replaceable>options</replaceable>]])</synopsis>

      <para>Looks up a telephone number with DUNDi (<xref
      linkend="glossar-dundi" />). If
      <code><replaceable>DUNDi-context</replaceable></code> is specified,
      <code>e164</code> is assumed. The option <code>b</code> (bypass) will
      cause Asterisk to bypass the internal DUNDi cache. Returns the found
      entry in the form <code>technology/resource</code>, if it exists,
      otherwise returns an empty string.<programlisting>; look up number 5145550123 in DUNDi:
exten =&gt; 123,1,Set(foo=${DUNDILOOKUP(5145550123)})</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'DUNDILOOKUP' =- 

[Syntax]
DUNDILOOKUP(number[|context[|options]])

[Synopsis]
Do a DUNDi lookup of a phone number.

[Description]
This will do a DUNDi lookup of the given phone number.
If no context is given, the default will be e164. The result of
this function will the Technology/Resource found in the DUNDi
lookup. If no results were found, the result will be blank.
If the 'b' option is specified, the internal DUNDi cache will
be bypassed.</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>- none - </screen></para>
        </formalpara>
      </note>

      <formalpara>
        <title>See also</title>

        <para><filename>dundi.conf</filename></para>
      </formalpara>
    </section>

    <section id="functions-enumlookup">
      <title><code>ENUMLOOKUP()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>ENUMLOOKUP()</code></secondary>
        </indexterm></title>

      <para>Asterisk 1.2:<synopsis>ENUMLOOKUP(<replaceable>number</replaceable>[,<replaceable>service</replaceable>[,<replaceable>optionsANDentrynumber</replaceable>[,<replaceable>zone-suffix</replaceable>]]])</synopsis></para>

      <para>Asterisk 1.4:<synopsis>ENUMLOOKUP(<replaceable>number</replaceable>[,<replaceable>service</replaceable>[,<replaceable>options</replaceable>,<replaceable>entrynumber</replaceable>[,<replaceable>Zonen-Suffix</replaceable>]]])</synopsis></para>

      <para>Looks up a number with ENUM (<xref linkend="glossar-enum" />). The
      <replaceable>service</replaceable> can be <code>sip</code> (default),
      <code>iax2</code>, <code>h323</code>, <code>tel</code> or
      <code>ALL</code>. The option <code>c</code> returns the number of
      entries. The <replaceable>entrynumber</replaceable> (default
      <code>1</code>) selects the entry from the list of results. The
      <replaceable>zone-suffix</replaceable> (default: <code>e164.arpa</code>)
      is the ENUM zone. Comprehensive descriptions and examples may be found
      in <filename>doc/README.enum</filename> (1.2) /
      <filename>doc/enum.txt</filename> (1.4).<programlisting>; in Asterisk 1.2:
exten =&gt; 123,1,Set(foo=${ENUMLOOKUP(+${CALLERID(num)},sip,1,freenum.org)})

; in Asterisk 1.4:
exten =&gt; 123,1,Set(foo=${ENUMLOOKUP(+${CALLERID(num)},sip,,1,freenum.org)})</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'ENUMLOOKUP' =- 

[Syntax]
ENUMLOOKUP(number[|Method-type[|options[|record#[|zone-suffix]]]])

[Synopsis]
ENUMLOOKUP allows for general or specific querying of NAPTR records or counts of NAPTR types for ENUM or ENUM-like DNS pointers

[Description]
Option 'c' returns an integer count of the number of NAPTRs of a certain RR type.
Combination of 'c' and Method-type of 'ALL' will return a count of all NAPTRs for the record.
Defaults are: Method-type=sip, no options, record=1, zone-suffix=e164.arpa

For more information, see doc/enum.txt</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>5c5
&lt; ENUMLOOKUP(number[|Method-type[|options[|record#[|zone-suffix]]]])
---
&gt; ENUMLOOKUP(number[,Method-type[,options|record#[,zone-suffix]]])
15c15
&lt; For more information, see doc/enum.txt
---
&gt; For more information, see README.enum</screen></para>
        </formalpara>
      </note>

      <formalpara>
        <title>See also</title>

        <para><filename>enum.conf</filename></para>
      </formalpara>
    </section>

    <section id="functions-env">
      <title><code>ENV()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>ENV()</code></secondary>
        </indexterm></title>

      <synopsis>ENV(<replaceable>variablename</replaceable>)</synopsis>

      <para>Reads/sets an environment variable (a variable in the operating
      system environment - these can be viewed from the shell with
      <command><code>echo
      $<replaceable>variablename</replaceable></code></command>). Environment
      variables are case-sensitive and are almost always written all
      uppercase.<programlisting>; read HOME:
exten =&gt; 123,1,Set(foo=${ENV(HOME)})

; set HOME:
exten =&gt; 123,1,Set(ENV(HOME)=/myAst)</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'ENV' =- 

[Syntax]
ENV(&lt;envname&gt;)

[Synopsis]
Gets or sets the environment variable specified

[Description]
Not available</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>- none - </screen></para>
        </formalpara>
      </note>
    </section>

    <section id="functions-eval">
      <title><code>EVAL()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>EVAL()</code></secondary>
        </indexterm></title>

      <synopsis>EVAL(<replaceable>variable</replaceable>)</synopsis>

      <para>Evaluates a variable twice. An example is useful: If the variable
      <code>${VAR}</code> contains a string "<code>${VAR2}</code>", that is
      what is returned when <code>${VAR}</code> is called. If
      <code>Eval()</code> is used, the nested variable is also evaluated, and
      the contents of <code>${VAR2}</code> are also returned.<programlisting>; If VAR contains the string "${VAR2}" and VAR2 contains the string "Hello World":
exten =&gt; 123,1,Set(foo=${EVAL(${VAR})})
; now foo is "Hello World"</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'EVAL' =- 

[Syntax]
EVAL(&lt;variable&gt;)

[Synopsis]
Evaluate stored variables.

[Description]
Using EVAL basically causes a string to be evaluated twice.
When a variable or expression is in the dialplan, it will be
evaluated at runtime. However, if the result of the evaluation
is in fact a variable or expression, using EVAL will have it
evaluated a second time. For example, if the variable ${MYVAR}
contains "${OTHERVAR}", then the result of putting ${EVAL(${MYVAR})}
in the dialplan will be the contents of the variable, OTHERVAR.
Normally, by just putting ${MYVAR} in the dialplan, you would be
left with "${OTHERVAR}".</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>- none - </screen></para>
        </formalpara>
      </note>
    </section>

    <section id="functions-exists">
      <title><code>EXISTS()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>EXISTS()</code></secondary>
        </indexterm></title>

      <synopsis>EXISTS(<replaceable>variable</replaceable>)</synopsis>

      <para>Checks to see if a variable is defined. Returns 1 or
      0.<programlisting>exten =&gt; 123,1,Set(Var1=test)
exten =&gt; 123,n,Set(Var2=)
exten =&gt; 123,n,Set(foo=${EXISTS(${Var1})})   ; foo is 1
exten =&gt; 123,n,Set(foo=${EXISTS(${Var2})})   ; foo is 0</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'EXISTS' =- 

[Syntax]
EXISTS(&lt;data&gt;)

[Synopsis]
Existence Test: Returns 1 if exists, 0 otherwise

[Description]
Not available</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>- none - </screen></para>
        </formalpara>
      </note>
    </section>

    <section id="functions-fieldqty">
      <title><code>FIELDQTY()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>FIELDQTY()</code></secondary>
        </indexterm></title>

      <synopsis>FIELDQTY(<replaceable>variablename</replaceable>,<replaceable>delimiter</replaceable>)</synopsis>

      <para>Returns the number of fields which exist if
      <replaceable>variablename</replaceable> is partitioned using
      <replaceable>delimiter</replaceable>.<programlisting>exten =&gt; 123,1,Set(Var=hello#you#there#on#the#telephone)
exten =&gt; 123,n,Set(Count=${FIELDQTY(Var,#)})    ; Count ist 6</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'FIELDQTY' =- 

[Syntax]
FIELDQTY(&lt;varname&gt;|&lt;delim&gt;)

[Synopsis]
Count the fields, with an arbitrary delimiter

[Description]
Not available</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>5c5
&lt; FIELDQTY(&lt;varname&gt;|&lt;delim&gt;)
---
&gt; FIELDQTY(&lt;varname&gt;,&lt;delim&gt;)</screen></para>
        </formalpara>
      </note>

      <formalpara>
        <title>See also</title>

        <para><xref linkend="functions-cut" /></para>
      </formalpara>
    </section>

    <section id="functions-filter">
      <title><code>FILTER()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>FILTER()</code></secondary>
        </indexterm></title>

      <synopsis>FILTER(<replaceable>allowedCharacters</replaceable>,<replaceable>string</replaceable>)</synopsis>

      <simpara><emphasis>(beginning Asterisk 1.4)</emphasis></simpara>

      <para>Filters <replaceable>string</replaceable> so that only the allowed
      characters are returned.<programlisting>; allow only 0123456789 from ${cdrnum}:
exten =&gt; 123,1,Set(foo=${FILTER(0123456789,${cdrnum})})</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'FILTER' =- 

[Syntax]
FILTER(&lt;allowed-chars&gt;|&lt;string&gt;)

[Synopsis]
Filter the string to include only the allowed characters

[Description]
Not available</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>-- not available in Version 1.2 --</screen></para>
        </formalpara>
      </note>
    </section>

    <section id="functions-global">
      <title><code>GLOBAL()</code><indexterm>
          <primary>Dialplan Functions</primary>

          <secondary><code>GLOBAL()</code></secondary>
        </indexterm></title>

      <synopsis>GLOBAL(<replaceable>variablename</replaceable>)</synopsis>

      <simpara><emphasis>(beginning Asterisk 1.4)</emphasis></simpara>

      <para>Used to declare a variable global, <emphasis>i.e.</emphasis> valid
      beyond the active life of the current channel. Asterisk 1.2 users use
      <command><code>Set()</code></command> (<xref
      linkend="applications-set" />) with the option
      <code>g</code>.<programlisting>; define global variable ${myvariable}:
exten =&gt; 123,1,Set(GLOBAL(myvariable)=Test)</programlisting></para>

      <note>
        <para>Whether global variables persist through a
        <command>reload</command> on the Asterisk console depends whether
        <code>clearglobalvars</code> is set in
        <filename>extensions.conf</filename>.</para>
      </note>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'GLOBAL' =- 

[Syntax]
GLOBAL(&lt;varname&gt;)

[Synopsis]
Gets or sets the global variable specified

[Description]
Not available</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>-- not available in Version 1.2 --</screen></para>
        </formalpara>
      </note>
    </section>

    <section id="functions-group">
      <title><code>GROUP()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>GROUP()</code></secondary>
        </indexterm></title>

      <synopsis>GROUP([<replaceable>category</replaceable>])</synopsis>

      <para>Reads/sets the group for the channel (channels may be grouped as
      required).<programlisting>exten =&gt; 123,1,Set(GROUP()=outgoing)                ; set group
exten =&gt; 123,n,GotoIf($[${GROUP_COUNT()} &gt; 10]?200)   ; too many outgoing calls?
exten =&gt; 123,n,Dial(7785553233)                          ; dial
exten =&gt; 123,200,SetVar(DIALSTATUS=CHANUNAVAIL)       ; too many outgoing calls, refuse</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'GROUP' =- 

[Syntax]
GROUP([category])

[Synopsis]
Gets or sets the channel group.

[Description]
Gets or sets the channel group.</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>- none - </screen></para>
        </formalpara>
      </note>

      <formalpara>
        <title>See also</title>

        <para><xref linkend="functions-group_count" />, <xref
        linkend="functions-group_list" />, <xref
        linkend="functions-group_match_count" /></para>
      </formalpara>
    </section>

    <section id="functions-group_count">
      <title><code>GROUP_COUNT()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>GROUP_COUNT()</code></secondary>
        </indexterm></title>

      <synopsis>GROUP_COUNT([<replaceable>group</replaceable>[@<replaceable>category</replaceable>]])</synopsis>

      <para>Returns the number of channels in the specified group. If no group
      is specified, the group of the current channel is
      assumed.<programlisting>; Query outgoing for number of channels:
exten =&gt; 123,1,Set(foo=${GROUP_COUNT(outgoing)})</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'GROUP_COUNT' =- 

[Syntax]
GROUP_COUNT([groupname][@category])

[Synopsis]
Counts the number of channels in the specified group

[Description]
Calculates the group count for the specified group, or uses the
channel's current group if not specifed (and non-empty).</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>- none - </screen></para>
        </formalpara>
      </note>

      <formalpara>
        <title>See also</title>

        <para><xref linkend="functions-group" />, <xref
        linkend="functions-group_list" />, <xref
        linkend="functions-group_match_count" /></para>
      </formalpara>
    </section>

    <section id="functions-group_list">
      <title><code>GROUP_LIST()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>GROUP_LIST()</code></secondary>
        </indexterm></title>

      <synopsis>GROUP_LIST()</synopsis>

      <para>Returns a space-separated list of all the groups set for the
      current channel.<programlisting>exten =&gt; 123,1,Set(foo=${GROUP_LIST()})</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'GROUP_LIST' =- 

[Syntax]
GROUP_LIST()

[Synopsis]
Gets a list of the groups set on a channel.

[Description]
Gets a list of the groups set on a channel.</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>- none - </screen></para>
        </formalpara>
      </note>

      <formalpara>
        <title>See also</title>

        <para><xref linkend="functions-group" />, <xref
        linkend="functions-group_count" />, <xref
        linkend="functions-group_match_count" /></para>
      </formalpara>
    </section>

    <section id="functions-group_match_count">
      <title><code>GROUP_MATCH_COUNT()</code><indexterm
          significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>GROUP_MATCH_COUNT()</code></secondary>
        </indexterm></title>

      <synopsis>GROUP_MATCH_COUNT(<replaceable>pattern</replaceable>[@<replaceable>category</replaceable>])</synopsis>

      <para>Returns the number of channels in groups matching the specified
      pattern.<programlisting>; Query for the number of channels in groups group[1-4]:
exten =&gt; 123,1,Set(foo=${GROUP_MATCH_COUNT(group[1-4])})</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'GROUP_MATCH_COUNT' =- 

[Syntax]
GROUP_MATCH_COUNT(groupmatch[@category])

[Synopsis]
Counts the number of channels in the groups matching the specified pattern

[Description]
Calculates the group count for all groups that match the specified pattern.
Uses standard regular expression matching (see regex(7)).</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>- none - </screen></para>
        </formalpara>
      </note>

      <formalpara>
        <title>See also</title>

        <para><xref linkend="functions-group" />, <xref
        linkend="functions-group_count" />, <xref
        linkend="functions-group_list" /></para>
      </formalpara>
    </section>

    <section id="functions-iaxpeer">
      <title><code>IAXPEER()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>IAXPEER()</code></secondary>
        </indexterm></title>

      <synopsis>IAXPEER(<replaceable>peername</replaceable>[:<replaceable>field</replaceable>])</synopsis>

      <para>Returns information about an IAX peer. The
      <replaceable>peername</replaceable> can be replaced with
      <code>CURRENTCHANNEL</code> to specify the current channel. The
      <replaceable>field</replaceable> is one of the following:<variablelist
          termlength="15">
          <varlistentry>
            <term><code>ip</code></term>

            <listitem>
              <simpara>(default) the IP address of the peer</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>status</code></term>

            <listitem>
              <simpara>Peer status (when <code>qualify=yes</code>)</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>mailbox</code></term>

            <listitem>
              <simpara>The configured mailbox</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>context</code></term>

            <listitem>
              <simpara>The configured context</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>expire</code></term>

            <listitem>
              <simpara>The expiry time (in Unix time) for the
              connection</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>dynamic</code></term>

            <listitem>
              <simpara>Whether the connection is dynamic or not
              (<code>yes</code>|<code>no</code>).</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>callerid_name</code></term>

            <listitem>
              <simpara>The configured CID name</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>callerid_num</code></term>

            <listitem>
              <simpara>The configured CID number</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>codecs</code></term>

            <listitem>
              <simpara>The accessible codecs</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>codec[<replaceable>x</replaceable>]</code></term>

            <listitem>
              <simpara>Preferred codec number <code>x</code> (beginning with
              0)</simpara>
            </listitem>
          </varlistentry>
        </variablelist><programlisting>; Query the IP address of peer1:
exten =&gt; 123,1,Set(foo=${IAXPEER(peer1:ip)})</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'IAXPEER' =- 

[Syntax]
IAXPEER(&lt;peername|CURRENTCHANNEL&gt;[|item])

[Synopsis]
Gets IAX peer information

[Description]
If peername specified, valid items are:
- ip (default)          The IP address.
- status                The peer's status (if qualify=yes)
- mailbox               The configured mailbox.
- context               The configured context.
- expire                The epoch time of the next expire.
- dynamic               Is it dynamic? (yes/no).
- callerid_name         The configured Caller ID name.
- callerid_num          The configured Caller ID number.
- codecs                The configured codecs.
- codec[x]              Preferred codec index number 'x' (beginning with zero).

If CURRENTCHANNEL specified, returns IP address of current channel</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>5c5
&lt; IAXPEER(&lt;peername|CURRENTCHANNEL&gt;[|item])
---
&gt; IAXPEER(&lt;peername|CURRENTCHANNEL&gt;[:item])</screen></para>
        </formalpara>
      </note>

      <formalpara>
        <title>See also</title>

        <para><xref linkend="functions-sippeer" /></para>
      </formalpara>
    </section>

    <section id="functions-if">
      <title><code>IF()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>IF()</code></secondary>
        </indexterm></title>

      <synopsis>IF(<replaceable>expression</replaceable>?<replaceable>trueVal</replaceable>:<replaceable>falseVal</replaceable>)</synopsis>

      <para>Returns a value depending on a condition. If the condition is
      true, the value following <code>?</code> is returned, otherwise the
      value following <code>:</code> is returned.<programlisting>; If ${Var}=123, return 5, otherwise return 9:
exten =&gt; 123,1,Set(foo=${IF($[ ${Var} = 123]?5:9)})</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'IF' =- 

[Syntax]
IF(&lt;expr&gt;?[&lt;true&gt;][:&lt;false&gt;])

[Synopsis]
Conditional: Returns the data following '?' if true else the data following ':'

[Description]
Not available</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>- none - </screen></para>
        </formalpara>
      </note>

      <formalpara>
        <title>See also</title>

        <para><xref linkend="functions-iftime" />, x<xref
        linkend="applications-execif" />, <xref
        linkend="applications-gotoif" />, <xref
        linkend="applications-gotoiftime" /></para>
      </formalpara>
    </section>

    <section id="functions-iftime">
      <title><code>IFTIME()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>IFTIME()</code></secondary>
        </indexterm></title>

      <synopsis>IFTIME(<replaceable>time-condition</replaceable>?<replaceable>trueVal</replaceable>:<replaceable>falseVal</replaceable>)</synopsis>

      <para>Returns a value depending on the time condition.</para>

      <para>The <replaceable>time-condition</replaceable> follows the format
      <code><replaceable>time</replaceable>|<replaceable>dayofweek</replaceable>|<replaceable>date</replaceable>|<replaceable>month</replaceable></code>;
      each parameter may also be a range separated by <code>-</code>, or
      contain the wildcard<code> *</code>. Time is given in 24 hour format
      (<emphasis>e.g.</emphasis> <code>08:00-18:00</code>), weekdays and month
      names are three-letter English language abbreviations (<code>mon</code>,
      <code>tue</code>, <code>wed</code>, <code>thu</code>, <code>fri</code>,
      <code>sat</code>, <code>sun</code> and <code>jan</code>,
      <code>feb</code>, <code>mar</code>, <code>apr</code>, <code>may</code>,
      <code>jun</code>, <code>jul</code>, <code>aug</code>, <code>sep</code>,
      <code>oct</code>, <code>nov</code>, <code>dec</code>).<programlisting>; Valid from 8 a.m. to 6 p.m., Mondays, 1st to the 15th of December:
exten =&gt; 123,1,Set(foo=${IFTIME(08:00-18:00|mon|1-15|dec?5:0)})

; Valid every Saturday and Sunday:
exten =&gt; 123,1,Set(foo=${IFTIME(*|sat-sun|*|*?5:0)})</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'IFTIME' =- 

[Syntax]
IFTIME(&lt;timespec&gt;?[&lt;true&gt;][:&lt;false&gt;])

[Synopsis]
Temporal Conditional: Returns the data following '?' if true else the data following ':'

[Description]
Not available</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>- none - </screen></para>
        </formalpara>
      </note>

      <formalpara>
        <title>See also</title>

        <para><xref linkend="functions-if" />, <xref
        linkend="applications-execif" />, <xref
        linkend="applications-gotoif" />, <xref
        linkend="applications-gotoiftime" /></para>
      </formalpara>
    </section>

    <section id="functions-isnull">
      <title><code>ISNULL()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>ISNULL()</code></secondary>
        </indexterm></title>

      <synopsis>ISNULL(<replaceable>value</replaceable>)</synopsis>

      <para>Returns 1 if <replaceable>value</replaceable> is NULL (kein Wert),
      otherwise returns 0.<programlisting>exten =&gt; 123,1,Set(foo=${ISNULL(${Var1})})</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'ISNULL' =- 

[Syntax]
ISNULL(&lt;data&gt;)

[Synopsis]
NULL Test: Returns 1 if NULL or 0 otherwise

[Description]
Not available</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>- none - </screen></para>
        </formalpara>
      </note>
    </section>

    <section id="functions-keypadhash">
      <title><code>KEYPADHASH()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>KEYPADHASH()</code></secondary>
        </indexterm></title>

      <synopsis>KEYPADHASH(<replaceable>string</replaceable>)</synopsis>

      <simpara>Transforms an alphabetical string to digits according to the
      standard telephone keypad letter assignments. This enables quick
      conversion of vanity numbers (<emphasis>e.g.</emphasis> 1-800-BADHAIR
      (1-800-2234247) to actual numbers.</simpara>

      <informaltable>
        <tgroup cols="3" colsep="none" rowsep="none">
          <colspec colnum="1" colwidth="60pt" />

          <colspec colnum="2" colwidth="60pt" />

          <colspec colnum="3" colwidth="60pt" />

          <tbody>
            <row>
              <entry><code>1</code></entry>

              <entry><code>2 ABC</code></entry>

              <entry><code>3 DEF</code></entry>
            </row>

            <row>
              <entry><code>4 GHI</code></entry>

              <entry><code>5 JKL</code></entry>

              <entry><code>6 MNO</code></entry>
            </row>

            <row>
              <entry><code>7 PQRS</code></entry>

              <entry><code>8 TUV</code></entry>

              <entry><code>9 WXYZ</code></entry>
            </row>

            <row>
              <entry><code>*</code></entry>

              <entry><code>0</code></entry>

              <entry><code>#</code></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <programlisting>exten =&gt; 123,1,Set(foo=${KEYPADHASH(BADHAIR)})  ; returns 2234247</programlisting>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'KEYPADHASH' =- 

[Syntax]
KEYPADHASH(&lt;string&gt;)

[Synopsis]
Hash the letters in the string into the equivalent keypad numbers.

[Description]
Example:  ${KEYPADHASH(Les)} returns "537"</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>-- not available in Version 1.2 --</screen></para>
        </formalpara>
      </note>
    </section>

    <section id="functions-language">
      <title><code>LANGUAGE()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>LANGUAGE()</code></secondary>
        </indexterm></title>

      <synopsis>LANGUAGE()</synopsis>

      <para>Reads/sets the language of the current channel. This setting
      determines, among other things, which audio files are played. If the
      language is set to <code>de</code> and
      <command><code>Playback(tt-weasels)</code></command> is run in the
      dialplan, Asterisk will play <filename>de/tt-weasels</filename>, if it
      exists, and similarly for <code><command>SayDigits()</command></code>
      and other applications which rely on pre-recorded audio
      files.<programlisting>; Query:
exten =&gt; 123,1,Set(foo=${LANGUAGE()})

; Set Spanish:
exten =&gt; 123,1,Set(LANGUAGE()=es)</programlisting><warning>
          <para>This function is deprecated. Use
          <code>CHANNEL(language)</code> instead. See <xref
          linkend="functions-channel" /></para>
        </warning></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'LANGUAGE' =- 

[Syntax]
LANGUAGE()

[Synopsis]
Gets or sets the channel's language.

[Description]
Deprecated. Use CHANNEL(language) instead.</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>11c11,18
&lt; Deprecated. Use CHANNEL(language) instead.
---
&gt; Gets or sets the channel language.  This information is used for the
&gt; syntax in generation of numbers, and to choose a natural language file
&gt; when available.  For example, if language is set to 'fr' and the file
&gt; 'demo-congrats' is requested to be played, if the file
&gt; 'fr/demo-congrats' exists, then it will play that file, and if not
&gt; will play the normal 'demo-congrats'.  For some language codes,
&gt; changing the language also changes the syntax of some Asterisk
&gt; functions, like SayNumber.</screen></para>
        </formalpara>
      </note>
    </section>

    <section id="functions-len">
      <title><code>LEN()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>LEN()</code></secondary>
        </indexterm></title>

      <synopsis>LEN(<replaceable>string</replaceable>)</synopsis>

      <para>Returns the length of
      <replaceable>string</replaceable>.<programlisting>; If ${test} is "Hello World"
exten =&gt; 123,1,Set(foo=${LEN(${test})})
; returns 11</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'LEN' =- 

[Syntax]
LEN(&lt;string&gt;)

[Synopsis]
Returns the length of the argument given

[Description]
Not available</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>- none - </screen></para>
        </formalpara>
      </note>
    </section>

    <section id="functions-math">
      <title><code>MATH()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>MATH()</code></secondary>
        </indexterm></title>

      <synopsis>MATH(<replaceable>number1</replaceable> <replaceable>operator</replaceable> <replaceable>number2</replaceable>[,<replaceable>typeofresult</replaceable>])</synopsis>

      <para>Calculates simple mathematical expressions. Allowed operators are
      : <code>+</code>, <code>-</code>, <code>/</code>, <code>*</code>,
      <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>,
      <code>&gt;=</code>, <code>==</code>, <code>%</code> (modulo). The
      <replaceable>typeofresult</replaceable> may be: <code>f</code>,
      <code>float</code> (default), <code>i</code>, <code>int</code>
      (integer), <code>h</code>, <code>hex</code> (hexadecimal),
      <code>c</code>, <code>char</code> (byte output).<programlisting>; Calculate 3*8 as an integer:
exten =&gt; 123,1,Set(i=${MATH(3*8,int)})</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'MATH' =- 

[Syntax]
MATH(&lt;number1&gt;&lt;op&gt;&lt;number 2&gt;[,&lt;type_of_result&gt;])

[Synopsis]
Performs Mathematical Functions

[Description]
Perform calculation on number 1 to number 2. Valid ops are: 
    +,-,/,*,%,&lt;,&gt;,&gt;=,&lt;=,==
and behave as their C equivalents.
&lt;type_of_result&gt; - wanted type of result:
  f, float - float(default)
  i, int - integer,
  h, hex - hex,
  c, char - char
Example: Set(i=${MATH(123%16,int)}) - sets var i=11</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>- none - </screen></para>
        </formalpara>
      </note>
    </section>

    <section id="functions-md5">
      <title><code>MD5()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>MD5()</code></secondary>
        </indexterm></title>

      <synopsis>MD5(<replaceable>string</replaceable>)</synopsis>

      <para>Calculates the MD5 hash (checksum) of a string (returns in
      hexadecimal format).<programlisting>exten =&gt; 123,1,Set(foo=${MD5(${string})})</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'MD5' =- 

[Syntax]
MD5(&lt;data&gt;)

[Synopsis]
Computes an MD5 digest

[Description]
Not available</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>- none - </screen></para>
        </formalpara>
      </note>
    </section>

    <section id="functions-musicclass">
      <title><code>MUSICCLASS()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>MUSICCLASS()</code></secondary>
        </indexterm></title>

      <synopsis>MUSICCLASS(<replaceable>class</replaceable>)</synopsis>

      <para>Reads/sets the music-on-hold class.<programlisting>; Query:
exten =&gt; 123,1,Set(foo=${MUSICCLASS()})

; Set to "HeavyMetal":
exten =&gt; 123,1,Set(MUSICCLASS()=HeavyMetal)</programlisting></para>

      <important>
        <para>Deprecated as of Asterisk 1.4. Use
        <command><code>Set(CHANNEL(musicclass)=<replaceable>default</replaceable>)</code></command>
        instead. See <xref linkend="functions-channel" />.</para>
      </important>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'MUSICCLASS' =- 

[Syntax]
MUSICCLASS()

[Synopsis]
Read or Set the MusicOnHold class

[Description]
Deprecated. Use CHANNEL(musicclass) instead.</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>11c11
&lt; Deprecated. Use CHANNEL(musicclass) instead.
---
&gt; This function will read or set the music on hold class for a channel.</screen></para>
        </formalpara>
      </note>
    </section>

    <section id="functions-odbc_sql">
      <title><code>ODBC_SQL()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>ODBC_SQL()</code></secondary>
        </indexterm></title>

      <synopsis>ODBC_SQL(<replaceable>SQL-query</replaceable>)</synopsis>

      <para>Executes the specified SQL query and returns the result, if
      any.<programlisting>; Query:
exten =&gt; 123,1,Set(Name=${ODBC_SQL(SELECT name FROM list WHERE number='123')})

; Set:
exten =&gt; 123,1,Set(ODBC_SQL(UPDATE list SET name='Robert' WHERE number='123'))</programlisting></para>
    </section>

    <section id="functions-odbc_user_database">
      <title><code>ODBC_USER_DATABASE()</code><indexterm
          significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>ODBC_USER_DATABASE()</code></secondary>
        </indexterm></title>

      <synopsis>ODBC_USER_DATABASE(<replaceable>var1</replaceable>[,<replaceable>var2</replaceable>[,...]])</synopsis>

      <para>Runs the SQL query defined in <filename>func_odbc.conf</filename>
      and returns the result, if any. The values defined in
      <filename>func_odbc.conf</filename>, such as <code>${VAL1}</code>,
      <code>${VAL2}</code>, ..., <code>${ARG1}</code>, <code>${ARG2}</code>,
      ... are replaced by the corresponding values provided when the function
      is called.</para>

      <para><filename>func_odbc.conf</filename>:<programlisting>[USER_DATABASE]
dsn=my_database
read=SELECT name FROM list WHERE number='${ARG1}'
write=UPDATE list SET name=${ARG1} WHERE number='${VAL1}'</programlisting><filename>extensions.conf</filename>:<programlisting>; Query (read):
exten =&gt; 123,1,Set(Name=${ODBC_USER_DATABASE(${EXTEN})})

; Update (write):
exten =&gt; 123,1,Set(ODBC_USER_DATABASE(${CALLERID(name)})=1000)</programlisting></para>
    </section>

    <section id="functions-queueagentcount">
      <title><code>QUEUEAGENTCOUNT()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>QUEUEAGENTCOUNT()</code></secondary>
        </indexterm></title>

      <simpara>in Asterisk 1.2; Asterisk 1.4 users see
      <code>QUEUE_MEMBER_COUNT()</code></simpara>

      <synopsis>QUEUEAGENTCOUNT(<replaceable>queue</replaceable>)</synopsis>

      <para>Returns the number of agents (as opposed to number of callers) in
      the specified <replaceable>queue</replaceable>.<programlisting>; Number of agents in "supportqueue":
exten =&gt; 123,1,Set(foo=${QUEUEAGENTCOUNT(supportqueue)})</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'QUEUEAGENTCOUNT' =- 

[Syntax]
QUEUEAGENTCOUNT(&lt;queuename&gt;)

[Synopsis]
Count number of agents answering a queue

[Description]
Returns the number of members currently associated with the specified queue.
This function is deprecated.  You should use QUEUE_MEMBER_COUNT() instead.</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>-- not available in Version 1.2 --</screen></para>
        </formalpara>
      </note>
    </section>

    <section id="functions-queue_member_count">
      <title><code>QUEUE_MEMBER_COUNT()</code><indexterm
          significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>QUEUE_MEMBER_COUNT()</code></secondary>
        </indexterm></title>

      <simpara>in Asterisk 1.4 - Asterisk 1.2 users see
      <code>QUEUEAGENTCOUNT()</code></simpara>

      <synopsis>QUEUE_MEMBER_COUNT(<replaceable>queue</replaceable>)</synopsis>

      <para>Returns the number of agents (and/or members, which may be devices
      rather than logged-in users) in the specified
      <replaceable>queue</replaceable>.<programlisting>; Number of members in "supportqueue":
exten =&gt; 123,1,Set(foo=${QUEUE_MEMBER_COUNT(supportqueue)}) </programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'QUEUE_MEMBER_COUNT' =- 

[Syntax]
QUEUE_MEMBER_COUNT(&lt;queuename&gt;)

[Synopsis]
Count number of members answering a queue

[Description]
Returns the number of members currently associated with the specified queue.</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>-- not available in Version 1.2 --</screen></para>
        </formalpara>
      </note>
    </section>

    <section id="functions-queue_member_list">
      <title><code>QUEUE_MEMBER_LIST()</code><indexterm
          significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>QUEUE_MEMBER_LIST()</code></secondary>
        </indexterm></title>

      <synopsis>QUEUE_MEMBER_LIST(<replaceable>queue</replaceable>)</synopsis>

      <para>Returns a comma-delimited list of the members in the specified
      <replaceable>queue</replaceable>.<programlisting>; Agents in "supportqueue":
exten =&gt; 123,1,Set(foo=${QUEUE_MEMBER_LIST(supportqueue)})
; Returns, for example, 5,8,33</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'QUEUE_MEMBER_LIST' =- 

[Syntax]
QUEUE_MEMBER_LIST(&lt;queuename&gt;)

[Synopsis]
Returns a list of interfaces on a queue

[Description]
Returns a comma-separated list of members associated with the specified queue.</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>-- not available in Version 1.2 --</screen></para>
        </formalpara>
      </note>
    </section>

    <section id="functions-quote">
      <title><code>QUOTE()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>QUOTE()</code></secondary>
        </indexterm></title>

      <synopsis>QUOTE(<replaceable>string</replaceable>)</synopsis>

      <para>Quotes a string exactly, escaping embedded quotation marks if
      necessary.<programlisting>; If ${var} is &gt;&gt;The "Asterisk"-PBX&lt;&lt;
exten =&gt; 123,1,Set(foo=${QUOTE(${var})})
; returns &gt;&gt;The \"Asterisk\"-PBX&lt;&lt;</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'QUOTE' =- 

[Syntax]
QUOTE(&lt;string&gt;)

[Synopsis]
Quotes a given string, escaping embedded quotes as necessary

[Description]
Not available</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>-- not available in Version 1.2 --</screen></para>
        </formalpara>
      </note>
    </section>

    <section id="functions-rand">
      <title><code>RAND()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>RAND()</code></secondary>
        </indexterm></title>

      <synopsis>RAND(<replaceable>min</replaceable>,<replaceable>max</replaceable>)</synopsis>

      <simpara><emphasis>(beginning Asterisk 1.4)</emphasis></simpara>

      <para>Returns a randomly-generated number between <code>min</code> and
      <code>max</code> inclusive. The default for <code>min</code> is 0, for
      <code>max</code> the default is the largest integer supported by the
      system (usually 2147483647).<programlisting>; Choose a random number between 1 and 10 (inclusive):
exten =&gt; 123,1,Set(coincidence=${RAND(1,10)})

; Game of chance:
exten =&gt; 123,1,GotoIf($[${RAND(0,100)} &lt; 25]?won:lost)
exten =&gt; won,1,Playback(won)
exten =&gt; won,n,Goto(123,1)
exten =&gt; lost,1,Playback(lost)
exten =&gt; lost,n,Goto(123,1)</programlisting></para>

      <note>
        <para>If you are using versions prior to Asterisk 1.4, use the
        application <code><command>Random()</command></code>.</para>
      </note>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'RAND' =- 

[Syntax]
RAND([min][|max])

[Synopsis]
Choose a random number in a range

[Description]
Choose a random number between min and max.  Min defaults to 0, if not
specified, while max defaults to RAND_MAX (2147483647 on many systems).
  Example:  Set(junky=${RAND(1|8)}); 
  Sets junky to a random number between 1 and 8, inclusive.</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>-- not available in Version 1.2 --</screen></para>
        </formalpara>
      </note>

      <formalpara>
        <title>See also</title>

        <para><xref linkend="applications-random" /></para>
      </formalpara>
    </section>

    <section id="functions-regex">
      <title><code>REGEX()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>REGEX()</code></secondary>
        </indexterm></title>

      <synopsis>REGEX("<replaceable>expression</replaceable>" <replaceable>string</replaceable>)</synopsis>

      <para>Returns 1, if <replaceable>string</replaceable> matches the
      regular expression <replaceable>expression</replaceable>, otherwise
      returns 0. The regular expression may include <code>^</code> (matches
      the beginning) and <code>$</code> (matches the end). Variables are
      evaluated first.</para>

      <para>The parser in Asterisk 1.2 does not behave consistently and can be
      confused by expressions containing special characters such as
      <code>$</code> or angle brackets. An ugly workaround is to define a
      variable (for example <code>${dollar}</code>) and have it contain the
      special character (for example, "<code>$</code>").</para>

      <para><programlisting>; Test to see if the string "b3" matches the regular expression "[abc][0-9]":
exten =&gt; 123,1,Set(foo=${REGEX("[abc][0-9]" b3)})   ; returns 1

; Test to see if ${str} ends in 0, for Asterisk 1.4:
exten =&gt; 123,1,Set(foo=${REGEX("0$" ${str})})

; in Asterisk 1.2, using the workaround described above:
exten =&gt; 123,1,Set(foo=${REGEX("0${dollar}" ${str})})</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'REGEX' =- 

[Syntax]
REGEX("&lt;regular expression&gt;" &lt;data&gt;)

[Synopsis]
Regular Expression

[Description]
Returns 1 if data matches regular expression, or 0 otherwise.
Please note that the space following the double quotes separating the regex from the data
is optional and if present, is skipped. If a space is desired at the beginning of the data,
then put two spaces there; the second will not be skipped.</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>-- not available in Version 1.2 --</screen></para>
        </formalpara>
      </note>
    </section>

    <section id="functions-set">
      <title><code>SET()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>SET()</code></secondary>
        </indexterm></title>

      <synopsis>SET(<replaceable>variablename</replaceable>=<replaceable>expression</replaceable>)</synopsis>

      <para>Can be used inside nested expressions to set variables to the
      desired value. (Not to be confused with the application
      <code><command>Set()</command></code>! This is the cause of much
      grief!)<programlisting>; Set ${a}, ${b}, ${c}, and ${d} to 8:
exten =&gt; 123,1,Set(a=${SET(b=${SET(c=${SET(d=8)})})})

; In the interest of readability and comprehension, it is
; usually better to write one or two more lines</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'SET' =- 

[Syntax]
SET(&lt;varname&gt;=[&lt;value&gt;])

[Synopsis]
SET assigns a value to a channel variable

[Description]
Not available</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>- none - </screen></para>
        </formalpara>
      </note>

      <formalpara>
        <title>See also</title>

        <para><xref linkend="applications-set" /></para>
      </formalpara>
    </section>

    <section id="functions-sha1">
      <title><code>SHA1()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>SHA1()</code></secondary>
        </indexterm></title>

      <synopsis>SHA1(<replaceable>string</replaceable>)</synopsis>

      <para>Calculates the SHA1 hash (checksum) of a string (returns
      hexadecimal).<programlisting>; Calculate the SHA1 hash of "Hello World":
exten =&gt; 123,1,Set(sha1hash=${SHA1(Hello World)})</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'SHA1' =- 

[Syntax]
SHA1(&lt;data&gt;)

[Synopsis]
Computes a SHA1 digest

[Description]
Generate a SHA1 digest via the SHA1 algorythm.
 Example:  Set(sha1hash=${SHA1(junky)})
 Sets the asterisk variable sha1hash to the string '60fa5675b9303eb62f99a9cd47f9f5837d18f9a0'
 which is known as his hash</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>-- not available in Version 1.2 --</screen></para>
        </formalpara>
      </note>
    </section>

    <section id="functions-sipchaninfo">
      <title><code>SIPCHANINFO()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>SIPCHANINFO()</code></secondary>
        </indexterm></title>

      <synopsis>SIPCHANINFO(<replaceable>field</replaceable>)</synopsis>

      <para>Returns information about the current SIP channel. The field may
      be one of:<variablelist termlength="11">
          <varlistentry>
            <term><code>peerip</code></term>

            <listitem>
              <simpara>The IP address of the peer</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>recvip</code></term>

            <listitem>
              <simpara>The source IP address of the peer</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>from</code></term>

            <listitem>
              <simpara>The URI from the <code>From:</code> header</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>uri</code></term>

            <listitem>
              <simpara>The URI from the <code>Contact:</code> header</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>useragent</code></term>

            <listitem>
              <simpara>The user agent</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>peername</code></term>

            <listitem>
              <simpara>The name of the peer</simpara>
            </listitem>
          </varlistentry>
        </variablelist><programlisting>; Query the name of a SIP peer:
exten =&gt; 123,1,Set(foo=${SIPCHANINFO(peername)}) </programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'SIPCHANINFO' =- 

[Syntax]
SIPCHANINFO(item)

[Synopsis]
Gets the specified SIP parameter from the current channel

[Description]
Valid items are:
- peerip                The IP address of the peer.
- recvip                The source IP address of the peer.
- from                  The URI from the From: header.
- uri                   The URI from the Contact: header.
- useragent             The useragent.
- peername              The name of the peer.
- t38passthrough        1 if T38 is offered or enabled in this channel, otherwise 0</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>18d17
&lt; - t38passthrough        1 if T38 is offered or enabled in this channel, otherwise 0</screen></para>
        </formalpara>
      </note>
    </section>

    <section id="functions-sippeer">
      <title><code>SIPPEER()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>SIPPEER()</code></secondary>
        </indexterm></title>

      <synopsis>SIPPEER(<replaceable>peername</replaceable>[,<replaceable>field</replaceable>])</synopsis>

      <para>Returns information about a SIP peer. The
      <replaceable>field</replaceable> may be one of:<variablelist
          termlength="15">
          <varlistentry>
            <term><code>ip</code></term>

            <listitem>
              <simpara>The IP address of the peer (default)</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>mailbox</code></term>

            <listitem>
              <simpara>The configured mailbox</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>context</code></term>

            <listitem>
              <simpara>The configured context</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>expire</code></term>

            <listitem>
              <simpara>The expiry time (in Unix time) for the
              connection.</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>dynamic</code></term>

            <listitem>
              <simpara>Whether or not <code>dynamic</code> is set
              (<code>yes</code>|<code>no</code>).</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>callerid_name</code></term>

            <listitem>
              <simpara>The configured CID name</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>callerid_num</code></term>

            <listitem>
              <simpara>The configured CID number</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>codecs</code></term>

            <listitem>
              <simpara>Available codecs</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>status</code></term>

            <listitem>
              <simpara>The status (when <code>qualify=yes</code> is
              set)</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>regexten</code></term>

            <listitem>
              <simpara>The registration extension</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>limit</code></term>

            <listitem>
              <simpara>Maximum number of calls</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>curcalls</code></term>

            <listitem>
              <simpara>Number of current calls (only if a limit is
              set)</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>language</code></term>

            <listitem>
              <simpara>The default language for this peer</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>useragent</code></term>

            <listitem>
              <simpara>The useragent of the peer</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>codec[<replaceable>x</replaceable>]</code></term>

            <listitem>
              <simpara>Preferred codec number <code>x</code> (beginning with
              0)</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>accountcode</code></term>

            <listitem>
              <simpara>The billing account code in the CDR for conversations
              with this peer</simpara>
            </listitem>
          </varlistentry>
        </variablelist><programlisting>; The IP address of peer 2001:
exten =&gt; 123,1,Set(sip_ip=${SIPPEER(2001,ip)})
; the preferred codec of the peer:
exten =&gt; 123,n,Set(sip_ip=${SIPPEER(2001,codec[0])})</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'SIPPEER' =- 

[Syntax]
SIPPEER(&lt;peername&gt;[|item])

[Synopsis]
Gets SIP peer information

[Description]
Valid items are:
- ip (default)          The IP address.
- mailbox               The configured mailbox.
- context               The configured context.
- expire                The epoch time of the next expire.
- dynamic               Is it dynamic? (yes/no).
- callerid_name         The configured Caller ID name.
- callerid_num          The configured Caller ID number.
- codecs                The configured codecs.
- status                Status (if qualify=yes).
- regexten              Registration extension
- limit                 Call limit (call-limit)
- curcalls              Current amount of calls 
                        Only available if call-limit is set
- language              Default language for peer
- accountcode           Account code for this peer
- useragent             Current user agent id for peer
- codec[x]              Preferred codec index number 'x' (beginning with zero).</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>5c5
&lt; SIPPEER(&lt;peername&gt;[|item])
---
&gt; SIPPEER(&lt;peername&gt;[:item])</screen></para>
        </formalpara>
      </note>

      <formalpara>
        <title>See also</title>

        <para><xref linkend="functions-iaxpeer" /></para>
      </formalpara>
    </section>

    <section id="functions-sip_header">
      <title><code>SIP_HEADER()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>SIP_HEADER()</code></secondary>
        </indexterm></title>

      <synopsis>SIP_HEADER(<replaceable>headername</replaceable>[,<replaceable>number</replaceable>])</synopsis>

      <para>Retrieves the specified SIP header. You are not likely to need
      this unless you have a thorough understanding of the SIP protocol.
      Because some headers appear more than once in a SIP packet, you can
      specify which instance of the header you want to see with
      <replaceable>number</replaceable>.<programlisting>; Query the TO header:
exten =&gt; 123,1,Set(DN=${SIP_HEADER(TO):5})
exten =&gt; 123,2,Set(DN=${CUT(DN,@,1)})</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'SIP_HEADER' =- 

[Syntax]
SIP_HEADER(&lt;name&gt;[,&lt;number&gt;])

[Synopsis]
Gets the specified SIP header

[Description]
Since there are several headers (such as Via) which can occur multiple
times, SIP_HEADER takes an optional second argument to specify which header with
that name to retrieve. Headers start at offset 1.</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>-- not available in Version 1.2 --</screen></para>
        </formalpara>
      </note>

      <formalpara>
        <title>See also</title>

        <para><xref linkend="applications-sipaddheader" /></para>
      </formalpara>
    </section>

    <section id="functions-sort">
      <title><code>SORT()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>SORT()</code></secondary>
        </indexterm></title>

      <synopsis>SORT(<replaceable>key1</replaceable>:<replaceable>value1</replaceable>[,<replaceable>key2</replaceable>:<replaceable>value2</replaceable>[,...]])</synopsis>

      <para>Processes a list of keys and values and returns a comma-separated
      list of the keys sorted based on their floating-point
      values.<programlisting>; Sort a list:
exten =&gt; 123,1,Set(foo=${SORT(four:4|half:.5|hundred:100|pi:3.14|e:2.71828|minusone:-1)})
; foo is now "minusone,half,e,pi,four,hundred"</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'SORT' =- 

[Syntax]
SORT(key1:val1[...][,keyN:valN])

[Synopsis]
Sorts a list of key/vals into a list of keys, based upon the vals

[Description]
Takes a comma-separated list of keys and values, each separated by a colon, and returns a
comma-separated list of the keys, sorted by their values.  Values will be evaluated as
floating-point numbers.</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>- none - </screen></para>
        </formalpara>
      </note>
    </section>

    <section id="functions-stat">
      <title><code>STAT()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>STAT()</code></secondary>
        </indexterm></title>

      <synopsis>STAT(<replaceable>flag</replaceable>,<replaceable>filename</replaceable>)</synopsis>

      <simpara><emphasis>(beginning Asterisk 1.4)</emphasis></simpara>

      <para>Returns status information about a file (compare the shell
      commands <command>test</command> and <command>stat</command>). The
      <code><replaceable>filename</replaceable></code> refers to an inode, so
      it can be a directory or a specific file. The
      <code><replaceable>flag</replaceable></code> can be one of the
      following:<variablelist>
          <varlistentry>
            <term><code>d</code></term>

            <listitem>
              <simpara>Tests to see if <replaceable>filename</replaceable> is
              a directory.</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>e</code></term>

            <listitem>
              <simpara>Tests if the file exists.</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>f</code></term>

            <listitem>
              <simpara>Tests if <replaceable>filename</replaceable> is a
              regular file (as opposed to a special file, such as a block
              special file, character special file, symbolic link, named pipe,
              or socket).</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>m</code></term>

            <listitem>
              <simpara>Returns the mode of <replaceable>filename</replaceable>
              (octal), <emphasis>i.e.</emphasis> the permissions:
              <emphasis>e.g.</emphasis> 0754.</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>s</code></term>

            <listitem>
              <simpara>Returns the file size in bytes.</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>A</code></term>

            <listitem>
              <simpara>Returns the last access time (in Unix time).</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>C</code></term>

            <listitem>
              <simpara>Returns the last inode change time (in Unix
              time).</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>M</code></term>

            <listitem>
              <simpara>Returns the last modified time (in Unix
              time).</simpara>
            </listitem>
          </varlistentry>
        </variablelist><programlisting>; See when /etc/crontab was last changed:
exten =&gt; 123,1,Set(foo=${STAT(M,/etc/crontab)})</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'STAT' =- 

[Syntax]
STAT(&lt;flag&gt;,&lt;filename&gt;)

[Synopsis]
Does a check on the specified file

[Description]
flag may be one of the following:
  d - Checks if the file is a directory
  e - Checks if the file exists
  f - Checks if the file is a regular file
  m - Returns the file mode (in octal)
  s - Returns the size (in bytes) of the file
  A - Returns the epoch at which the file was last accessed
  C - Returns the epoch at which the inode was last changed
  M - Returns the epoch at which the file was last modified</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>-- not available in Version 1.2 --</screen></para>
        </formalpara>
      </note>
    </section>

    <section id="functions-strftime">
      <title><code>STRFTIME()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>STRFTIME()</code></secondary>
        </indexterm></title>

      <synopsis>STRFTIME([<replaceable>unixtime</replaceable>][,[<replaceable>timezone</replaceable>][,<remark>format</remark>]])</synopsis>

      <para>Returns a date and time in the specified format. If
      <replaceable>unixtime</replaceable> is not provided, the current time is
      used. The default <replaceable>timezone</replaceable> is the system
      default timezone. Possible time zones may be found in
      <filename>/usr/share/zoneinfo/</filename>. The format placeholders are
      the same as those for the C function <code>strftime()</code> (see
      <command>man strftime</command>), the default is <code>%c</code>,
      <emphasis>i.e.</emphasis> the locale-dependent date-time
      format.<programlisting>; Date/time in format YYYY-MM-DD HH:MM:SS
exten =&gt; 123,1,Set(time=${STRFTIME(${EPOCH},America/Los_Angeles,"%Y-%m-%d %H:%M:%S")})</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'STRFTIME' =- 

[Syntax]
STRFTIME([&lt;epoch&gt;][|[timezone][|format]])

[Synopsis]
Returns the current date/time in a specified format.

[Description]
Not available</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>5c5
&lt; STRFTIME([&lt;epoch&gt;][|[timezone][|format]])
---
&gt; STRFTIME([&lt;epoch&gt;][,[timezone][,format]])</screen></para>
        </formalpara>
      </note>
    </section>

    <section id="functions-strptime">
      <title><code>STRPTIME()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>STRPTIME()</code></secondary>
        </indexterm></title>

      <synopsis>STRPTIME(<replaceable>datetime</replaceable>|<replaceable>timezone</replaceable>|<replaceable>format</replaceable>)</synopsis>

      <simpara><emphasis>(beginning Asterisk 1.4)</emphasis></simpara>

      <para>Converts a formatted date and time string into a Unix
      timestamp.<programlisting>; Save the date/time in the format YYYY-MM-DD HH:MM:SS in the variable ${time}:
exten =&gt; 123,1,Set(time=${STRFTIME(${EPOCH},America/Los_Angeles,"%Y-%m-%d %H:%M:%S")})
; Convert ${time} into Unix time:
exten =&gt; 123,n,Set(timestamp=${STRPTIME(${time}|America/Los_Angeles|%Y-%m-%d %H:%M:%S)} </programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'STRPTIME' =- 

[Syntax]
STRPTIME(&lt;datetime&gt;|&lt;timezone&gt;|&lt;format&gt;)

[Synopsis]
Returns the epoch of the arbitrary date/time string structured as described in the format.

[Description]
This is useful for converting a date into an EPOCH time, possibly to pass to
an application like SayUnixTime or to calculate the difference between two
date strings.

Example:
  ${STRPTIME(2006-03-01 07:30:35|America/Chicago|%Y-%m-%d %H:%M:%S)} returns 1141219835</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>-- not available in Version 1.2 --</screen></para>
        </formalpara>
      </note>

      <formalpara>
        <title>See also</title>

        <para><xref linkend="functions-strftime" /></para>
      </formalpara>
    </section>

    <section id="functions-timeout">
      <title><code>TIMEOUT()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>TIMEOUT()</code></secondary>
        </indexterm></title>

      <synopsis>TIMEOUT(<replaceable>type</replaceable>)</synopsis>

      <para>Reads/sets a timeout on the channel. The following types are
      permitted:<variablelist termlength="10">
          <varlistentry>
            <term><code>absolute</code></term>

            <listitem>
              <simpara>The absolute, maximum duration of a call. Once reached,
              the call is passed to the extension <code>T</code>, if it
              exists, or hung up. A value of 0 is the same as no timeout. When
              this function is called, the existing setting is reset and
              overwritten. The timeout counter starts when this function is
              called, not when the call begins.</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>digit</code></term>

            <listitem>
              <simpara>The maximum time allowed between entry of digits. If
              exceeded, user input is deemed to have finished. If the
              resulting extension does not exist, the call is passed to the
              extension <code>i</code> (invalid), if it exists, or hung up.
              The default is 5 seconds.</simpara>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>response</code></term>

            <listitem>
              <simpara>The maximum time to wait for input from a user. If the
              user does not enter an extension, the call is passed to
              extension <code>t</code> (timeout), if it exists, or the call is
              hung up. Default: 10 seconds.</simpara>
            </listitem>
          </varlistentry>
        </variablelist><programlisting>; Check the absolute timeout:
exten =&gt; 123,1,Set(foo=${TIMEOUT(absolute)})

; Limit call duration to a maximum of 60 seconds:
exten =&gt; 123,1,Set(TIMEOUT(absolute)=60)
exten =&gt; 123,n,Dial(SIP/${EXTEN})
exten =&gt; T,1,Playback(sorry-dude) 
exten =&gt; T,n,Playback(buh-bye) 
exten =&gt; T,n,Hangup()</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'TIMEOUT' =- 

[Syntax]
TIMEOUT(timeouttype)

[Synopsis]
Gets or sets timeouts on the channel.

[Description]
Gets or sets various channel timeouts. The timeouts that can be
manipulated are:

absolute: The absolute maximum amount of time permitted for a call.  A
     setting of 0 disables the timeout.

digit:    The maximum amount of time permitted between digits when the
          user is typing in an extension.  When this timeout expires,
          after the user has started to type in an extension, the
          extension will be considered complete, and will be
          interpreted.  Note that if an extension typed in is valid,
          it will not have to timeout to be tested, so typically at
          the expiry of this timeout, the extension will be considered
          invalid (and thus control would be passed to the 'i'
          extension, or if it doesn't exist the call would be
          terminated).  The default timeout is 5 seconds.

response: The maximum amount of time permitted after falling through a
     series of priorities for a channel in which the user may
     begin typing an extension.  If the user does not type an
     extension in this amount of time, control will pass to the
     't' extension if it exists, and if not the call would be
     terminated.  The default timeout is 10 seconds.</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>- none - </screen></para>
        </formalpara>
      </note>
    </section>

    <section id="functions-txtcidname">
      <title><code>TXTCIDNAME()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>TXTCIDNAME()</code></secondary>
        </indexterm></title>

      <synopsis>TXTCIDNAME(<replaceable>number</replaceable>)</synopsis>

      <para>Looks up the CID name of the caller in DNS (via a
      TXT-Record).<programlisting>exten =&gt; 123,1,Set(foo=${TXTCIDNAME(9755557346)})</programlisting></para>
    </section>

    <section id="functions-uridecode">
      <title><code>URIDECODE()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>URIDECODE()</code></secondary>
        </indexterm></title>

      <synopsis>URIDECODE(<replaceable>string</replaceable>)</synopsis>

      <para>Decodes a URI encoded string. See
      <code>URIENCODE()</code>.<programlisting>; Decode "www.example.com/?page=Hello%20World":
exten =&gt; 123,1,Set(foo=${URIDECODE("Hello%20World")})
; Returns "Hello World"</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'URIDECODE' =- 

[Syntax]
URIDECODE(&lt;data&gt;)

[Synopsis]
Decodes a URI-encoded string according to RFC 2396.

[Description]
Not available</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>8c8
&lt; Decodes a URI-encoded string according to RFC 2396.
---
&gt; Decodes an URI-encoded string.</screen></para>
        </formalpara>
      </note>
    </section>

    <section id="functions-uriencode">
      <title><code>URIENCODE()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>URIENCODE()</code></secondary>
        </indexterm></title>

      <synopsis>URIENCODE(<replaceable>string</replaceable>)</synopsis>

      <para>URI-encodes a string, so that characters not normally allowed in a
      URL are replaced with escape sequences following the format
      <code>%<replaceable>XX</replaceable></code>, where
      <code><replaceable>XX</replaceable></code> is the hexadecimal bytecode
      of the character.<programlisting>; Encode "Hello World":
exten =&gt; 123,1,Set(foo=${URIENCODE("Hello World")})
; Returns "Hello%20World"</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'URIENCODE' =- 

[Syntax]
URIENCODE(&lt;data&gt;)

[Synopsis]
Encodes a string to URI-safe encoding according to RFC 2396.

[Description]
Not available</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>8c8
&lt; Encodes a string to URI-safe encoding according to RFC 2396.
---
&gt; Encodes a string to URI-safe encoding.</screen></para>
        </formalpara>
      </note>
    </section>

    <section id="functions-vmcount">
      <title><code>VMCOUNT()</code><indexterm significance="preferred">
          <primary>Dialplan Functions</primary>

          <secondary><code>VMCOUNT()</code></secondary>
        </indexterm></title>

      <synopsis>VMCOUNT(<replaceable>VM-box</replaceable>[@<replaceable>context</replaceable>][|<replaceable>folder</replaceable>])</synopsis>

      <para>Returns the number of voice mail messages in the specified
      mailbox. The default context is <code>default</code>, the default folder
      is <code>INBOX</code>.<programlisting>; Query for the number of messages in mailbox 456:
exten =&gt; 123,1,Answer()
exten =&gt; 123,n,Set(count=${VMCOUNT(456)})
exten =&gt; 123,n,Playback(vm-youhave)          ; "You have"
exten =&gt; 123,n,GotoIf($[ ${count} = 0 ]?none:new)

exten =&gt; 123,10(none),Playback(vm-no)       ; "no"
exten =&gt; 123,n,Goto(continue)

exten =&gt; 123,20(new),SayNumber($COUNT)      ; count
exten =&gt; 123,n,Goto(continue)

exten =&gt; 123,30(continue),Playback(vm-INBOX)   ; "new"
exten =&gt; 123,n,Playback(vm-messages)         ; "messages"
exten =&gt; 123,n,Playback(vm-goodbye)          ; "Goodbye!"
exten =&gt; 123,n,Hangup()</programlisting></para>

      <note>
        <formalpara>
          <title>Internal help for this application in Asterisk 1.4:</title>

          <para><screen>  -= Info about function 'VMCOUNT' =- 

[Syntax]
VMCOUNT(vmbox[@context][|folder])

[Synopsis]
Counts the voicemail in a specified mailbox

[Description]
  context - defaults to "default"
  folder  - defaults to "INBOX"</screen></para>
        </formalpara>

        <formalpara>
          <title>diff output to internal help in Asterisk 1.2:</title>

          <para><screen>- none - </screen></para>
        </formalpara>
      </note>

      <simpara>See also <xref
      linkend="applications-mailboxexists" /></simpara>
    </section>
</appendix>
