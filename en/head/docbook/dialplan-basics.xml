<?xml version="1.0" encoding="ISO-8859-1"?>
<chapter id="dialplan-grundlagen" lang="en" revision="$Revision$">
  <!--% Copyright (c) 2006 - 2008 by
% - Stefan Wintermeyer <sw@amooma.de>
% Permission is granted to copy, distribute and/or modify this document
% under the terms of the GNU Free Documentation License, Version 1.2
% or any later version published by the Free Software Foundation;
% with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
% Texts. A copy of the license is included in the section entitled "GNU
% Free Documentation License".
% translated from the German by Stephen Bosch <sbosch@vodacomm.ca>
% Asterisk training and consulting is offered at http://www.amooma.de-->

  <title>Dialplan Basics</title>

  <para>The dialplan is the heart of Asterisk, and everything it does begins
  here.</para>

  <para>In Asterisk 1.4, two important files in
  <filename>/etc/asterisk</filename> make up the dialplan. The first is
  <filename>extensions.conf</filename>, which uses the original and
  Digium-recommended priority model; the second is
  <filename>extensions.ael</filename>, which uses the newer Asterisk
  Extensions Language; we'll look at that in more detail in a separate
  chapter. For now, we'll use the traditional priority model, since even in
  1.4 and 1.6, <filename>extensions.ael</filename> is converted into priority
  format and added to <filename>extensions.conf</filename> when Asterisk is
  started.<footnote>
      <para>The exact definition of "dialplan" is a matter of some debate in
      the telephony world. In this book, we use the word in its
      Asterisk-specific sense.</para>
    </footnote><note>
      <para>Should you use .conf or .ael? Digium says ".conf is the
      default."</para>
    </note></para>

  <section id="der-context">
    <title>Context</title>

    <indexterm>
      <primary>Context</primary>
    </indexterm>

    <para>The Asterisk dialplan is divided into sections, and each section is
    called a context. Any dialplan must begin with a <code>[general]</code>
    context where global configuration entries reside, but the subsequent
    contexts can have any name. Physical devices are bound to the dialplan
    through contexts. These devices are usually telephones, but can be other
    types of hardware (for example, SIP or Zap devices). The configuration for
    every device, be it a softphone, hardphone or outgoing trunk, must specify
    the default context for that device. Here's an example from <filename>a
    sip.conf</filename> file: <programlisting>[2000]
type=friend
context=internal-phones
secret=1234
host=dynamic</programlisting>This SIP device called 2000 always initiates
    calls in the <code>internal-phones</code> context. This means that if a
    caller uses this phone to dial a number, Asterisk will look in the
    internal-phones context for an <emphasis>extension</emphasis> matching
    that number. If no matching extension is present, nothing happens.</para>

    <warning>
      <para>A good understanding of contexts is essential for effective
      Asterisk programming and administration. If you're not sure, please
      follow the step-by-step example for a simple PBX system in the chapter
      <xref linkend="kapitel-installation" />.</para>

      <para>It pays to take the time necessary to become comfortable with the
      concept.</para>
    </warning>

    <section id="context-syntax">
      <title>Syntax</title>

      <para>Contexts are defined by a name inside square brackets
      ("<code>[</code>" and "<code>]</code>"). Ideally, the name should be
      relevant and help to describe the intended use for the context. This
      name will also be used to refer to the context elsewhere, be it in other
      contexts or in other Asterisk configuration files. All lines following a
      context name are considered part of that context, until the next context
      name is encountered:<programlisting>[general]

[internal-phones]
Rules, instructions, etc.

[widgets]
Rules, instructions, etc.</programlisting></para>
    </section>
  </section>

  <section id="die-extension">
    <title>Extension</title>

    <indexterm>
      <primary>Extension</primary>
    </indexterm>

    <para>Individual entries in <filename>extensions.conf</filename> are
    called <emphasis>extensions</emphasis>. Individual extensions are executed
    by Asterisk every time a call is initiated for that extension, but
    extensions.conf is only read into Asterisk once, at start time. This means
    that changes are not applied until the dialplan is reloaded or Asterisk
    restarted.<footnote>
        <para>An exception is the Asterisk RealTime Architecture (ARA). In an
        ARA system, the dialplan is stored in a database
        (<emphasis>e.g.</emphasis> MySQL) and read into Asterisk for each
        call, not simply when Asterisk is started. This allows an
        administrator to make dialplan changes on a running Asterisk server
        which take effect immediately. Nevertheless, this approach is not
        without significant disadvantages. You can learn more about realtime
        Asterisk at <ulink
        url="http://www.voip-info.org/wiki/view/Asterisk+RealTime"><citetitle>http://www.voip-info.org/wiki/view/Asterisk+RealTime</citetitle>
        </ulink>.</para>
      </footnote>You can also refresh the dialplan during operation from the
    CLI (Command Line Interface) by entering the command <command>reload
    now</command> (which reloads all the configurations) or
    <command>extensions reload</command> (which reloads only the
    dialplan).</para>

    <section id="extension-syntax">
      <title>Syntax</title>

      <para>An extension consists of the following parts:</para>

      <itemizedlist>
        <listitem>
          <para>Extension (Name or number)</para>
        </listitem>

        <listitem>
          <para>Priority (a kind of program line number)</para>
        </listitem>

        <listitem>
          <para>Application - an instruction which tells Asterisk what it
          should do with the call.</para>
        </listitem>
      </itemizedlist>

      <para><programlisting>exten =&gt; <replaceable>Extension</replaceable>,<replaceable>Priority,Application</replaceable>
</programlisting><emphasis>e.g.</emphasis><programlisting>exten =&gt; 123,1,Answer()
</programlisting></para>

      <important>
        <para>The first priority in an extension must always be 1 (one), or
        Asterisk will never call the extension. Subsequent priorities must be
        incremented by 1 and not more; Asterisk does not recognize larger
        increments.</para>
      </important>
    </section>

    <section id="grundlegende-applikationen">
      <title>Fundamental Applications</title>

      <para>In order to build the dialplan examples in this chapter, we need
      the following basic applications (all these are described in greater
      detail in <xref linkend="applications" />):</para>

      <itemizedlist>
        <listitem>
          <para><code><command>Answer()</command></code></para>

          <para>The <code>Answer()</code> application does just that - it
          answers a call. When a channel rings,
          <code><command>Answer()</command></code> tells Asterisk to "lift the
          virtual receiver." (See also <xref
          linkend="applications-answer" />.)</para>
        </listitem>

        <listitem>
          <para><code><command>Hangup()</command></code></para>

          <para><code><command>Hangup()</command></code> is the opposite of
          <code><command>Answer()</command></code>. An active connection is
          terminated, and Asterisk "hangs up" the virtual receiver (see also
          <xref linkend="applications-hangup" />).</para>
        </listitem>

        <listitem>
          <para><code><command>Playback(<replaceable>soundfile</replaceable>)</command></code></para>

          <para>This tells Asterisk to play a specified sound file. By
          default, it plays files found in
          <filename>/var/lib/asterisk/sounds/</filename>, but you can also
          specify another source directory. No file extension is specified
          because the directory may contain the same sound in different
          formats. Asterisk will select the most appropriate format &#8211;
          more on that later (see also <xref
          linkend="applications-playback" />).</para>
        </listitem>

        <listitem>
          <para><code><command>Wait(<replaceable>number</replaceable>)</command></code></para>

          <para><code><command>Wait()</command></code> defines a pause;
          <code>number</code> indicates the number of seconds to pause (see
          also <xref linkend="applications-wait" />).</para>
        </listitem>

        <listitem>
          <para><code><command>NoOp(<replaceable>string</replaceable>)</command></code></para>

          <para>This application does nothing<application>. "NoOp" means
          </application>"no operation." It is useful, however, when you are
          trying to troubleshoot the dialplan. When
          <code><command>NoOp(<replaceable>string</replaceable>)</command></code>
          is executed, Asterisk prints <replaceable>string</replaceable> on
          the CLI, though only if the verbosity level is set to 3 (you can do
          this easily by entering the command <command>set verbose 3</command>
          in the CLI). (See also <xref
          linkend="applications-noop" />.)</para>
        </listitem>

        <listitem>
          <para><command>VoiceMail(<replaceable>mailbox</replaceable>,u)</command></para>

          <para>Lets the caller leave a voice message in the mailbox specified
          (see also <xref linkend="applications-voicemail" />).</para>
        </listitem>

        <listitem>
          <para><command>VoiceMailMain()</command></para>

          <para>Provides access to the voicemail system. The mailbox owner
          will use this to retrieve her messages (see also <xref
          linkend="applications-voicemailmain" />).</para>
        </listitem>
      </itemizedlist>
    </section>

    <section id="die-prioritaet">
      <title>Priority</title>

      <indexterm>
        <primary>Priority</primary>
      </indexterm>

      <para>A typical extension is composed of a multiple entries. Each entry
      has a priority so that Asterisk knows in what order it should execute
      the entries. If you have ever worked with early versions of BASIC, you
      might be familiar with line numbers; priorities work in much the same
      way, but with one important distinction. They are always executed in
      numerical order from smallest to largest, but there can be no gaps! If
      Asterisk executes an entry of priority <emphasis>n</emphasis>, then it
      will look for the next entry at <emphasis>n</emphasis> + 1. If it cannot
      find an entry at <emphasis>n</emphasis> + 1, it stops executing without
      displaying an error in the CLI.</para>

      <section id="prioritaet-hello-world">
        <title>A "Hello World!" example</title>

        <para>The following extension will be invoked when a phone with the
        default context <code>widgets</code> dials 8888. Asterisk picks up the
        line, plays the <filename>hello-world</filename> sound file (which is
        installed with Asterisk) and hangs up.<programlisting>[widgets]
exten =&gt; 8888,1,Answer()
exten =&gt; 8888,2,Playback(hello-world)
exten =&gt; 8888,3,Hangup()</programlisting></para>
      </section>

      <section id="n-prioritaet">
        <title>n priority</title>

        <indexterm>
          <primary>Priority</primary>

          <secondary>n priority</secondary>
        </indexterm>

        <para>To make it easier to work with priorities, Asterisk versions
        from 1.2 onward support the <code>n</code> priority. The
        <code>n</code> priority is like automatic line numbering; when
        Asterisk is running through the dialplan and encounters an entry with
        priority <code>n</code>, it simply executes it as though it were
        equivalent to the previous priority, plus 1. This is useful when you
        have extensions with many entries and you need to add or remove an
        entry, because it saves you having to renumber the entire extension.
        The example below illustrates what we mean. A standard extension would
        look like this:</para>

        <programlisting>exten =&gt; 1234,1,Answer()
exten =&gt; 1234,2,Wait(2)
exten =&gt; 1234,3,Playback(hello-world)
exten =&gt; 1234,4,Wait(2)
exten =&gt; 1234,5,Hangup()</programlisting>

        <para>You can define the same extension with the <code>n</code>
        priority:<programlisting>exten =&gt; 1234,1,Answer()
exten =&gt; 1234,n,Wait(2)
exten =&gt; 1234,n,Play(hello-world)
exten =&gt; 1234,n,Wait(2)
exten =&gt; 1234,n,Hangup()</programlisting></para>

        <para>You can start using the <code>n</code> priority at any point in
        the extension, as long as all the subsequent entries also use
        it:<programlisting>exten =&gt; 1234,1,Answer()
exten =&gt; 1234,2,Wait(2)
exten =&gt; 1234,3,Play(hello-world)
exten =&gt; 1234,n,Wait(2)
exten =&gt; 1234,n,Hangup()</programlisting></para>
      </section>
    </section>
  </section>

  <section id="einleitung-regex">
    <title>Pattern Matching</title>

    <indexterm>
      <primary>Regular expression</primary>
    </indexterm>

    <indexterm>
      <primary>Pattern matching</primary>
    </indexterm>

    <para>Using what we know so far, we need to write a separate extension for
    each telephone number. As the system expands, this leads to unwieldy and
    error-prone dialplans. Say that, for our example, we need numbers 100 to
    109 to play the "hello world" sound file. Our
    <filename>extensions.conf</filename> would look like this:<programlisting>[general]

[widgets]
exten =&gt; 100,1,Answer()
exten =&gt; 100,2,Playback(hello-world)
exten =&gt; 100,3,Hangup()

exten =&gt; 101,1,Answer()
exten =&gt; 101,2,Playback(hello-world)
exten =&gt; 101,3,Hangup()

exten =&gt; 102,1,Answer()
exten =&gt; 102,2,Playback(hello-world)
exten =&gt; 102,3,Hangup()

exten =&gt; 103,1,Answer()
exten =&gt; 103,2,Playback(hello-world)
exten =&gt; 103,3,Hangup()

exten =&gt; 104,1,Answer()
exten =&gt; 104,2,Playback(hello-world)
exten =&gt; 104,3,Hangup()

exten =&gt; 105,1,Answer()
exten =&gt; 105,2,Playback(hello-world)
exten =&gt; 105,3,Hangup()

exten =&gt; 106,1,Answer()
exten =&gt; 106,2,Playback(hello-world)
exten =&gt; 106,3,Hangup()

exten =&gt; 107,1,Answer()
exten =&gt; 107,2,Playback(hello-world)
exten =&gt; 107,3,Hangup()

exten =&gt; 108,1,Answer()
exten =&gt; 108,2,Playback(hello-world)
exten =&gt; 108,3,Hangup()

exten =&gt; 109,1,Answer()
exten =&gt; 109,2,Playback(hello-world)
exten =&gt; 109,3,Hangup()
</programlisting></para>

    <para>If we use a <emphasis>pattern</emphasis>, the same dialplan becomes
    instantly more compact and elegant:<programlisting>[general]

[widgets]
exten =&gt; _10X,1,Answer()
exten =&gt; _10X,2,Playback(hello-world)
exten =&gt; _10X,3,Hangup()
</programlisting></para>

    <para>The '<code>_10X'</code> extension describes the number range from
    100 to 109.</para>

    <para><note>
        <para>The terms <emphasis>pattern</emphasis> and <emphasis>regular
        expression</emphasis> are often casually interchanged; in general,
        what we are using in Asterisk is a <emphasis>pattern</emphasis>,
        though many programmers would use the term <emphasis>regular
        expression</emphasis> also.</para>
      </note></para>

    <section id="regular-expression-syntax">
      <title>Syntax<indexterm>
          <primary>Pattern</primary>
        </indexterm></title>

      <para>Dialplan patterns always begin with the underscore
      (<code>_</code>) character:<programlisting>exten =&gt; _<emphasis>Pattern,Priority,Application</emphasis></programlisting></para>

      <para>An Asterisk dialplan pattern can have the following
      elements:<variablelist termlength="7">
          <varlistentry>
            <term><code>[abc]</code></term>

            <listitem>
              <para>The digits <emphasis>a</emphasis>, <emphasis>b</emphasis>
              and <emphasis>c</emphasis>. For example, to match 34, 37, and
              38:<programlisting>exten =&gt; _3[478],1,NoOp(Test)</programlisting></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>[a-b]</code></term>

            <listitem>
              <para>Any digit in the range <emphasis>a</emphasis> to
              <emphasis>b</emphasis>. For example, to match any number between
              31 and 35:<programlisting>exten =&gt; _3[1-5],1,NoOp(Test)</programlisting>(<emphasis>e.g.</emphasis>
              <code>[25-8]</code> is also acceptable for the digits
              2,5,6,7,8)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>X</code></term>

            <listitem>
              <para>Any digit from 0 to 9. For example, to match any number
              between 300 and 399:<programlisting>exten =&gt; _3XX,1,NoOp(Test)</programlisting></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>Z</code></term>

            <listitem>
              <para>Any digit from 1 to 9. For example, to match any number
              between 31 and 39:<programlisting>exten =&gt; _3Z,1,NoOp(Test)</programlisting></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>N</code></term>

            <listitem>
              <para>Any digit from 2 to 9. For example, to match any number
              between 32 and 39:<programlisting>exten =&gt; _3N,1,NoOp(Test)</programlisting></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>.</code></term>

            <listitem>
              <para>Any number of digits of any kind. For example, to match
              all numbers that begin with 011:<programlisting>exten =&gt; _011.,1,NoOp(Test)</programlisting></para>

              <warning>
                <para>Don't use <code>the '_.'</code> pattern! This will also
                include special extensions such as <code>i</code>,
                <code>t</code> and <code>h</code>. Use <code>_X.</code> or
                <code>_X</code> if you need broad pattern matching.</para>
              </warning>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><code>!</code></term>

            <listitem>
              <para>This special 'wildcard' character will match as soon as
              the number dialled is unambiguous; <emphasis>i.e.</emphasis>
              when the number being dialled cannot match any other extension
              in the context. Once a match is made, the outgoing line is
              picked up and dialing proceeds in real-time with direct feedback
              (this is known as 'overlap dialing').</para>
            </listitem>
          </varlistentry>
        </variablelist></para>

      <para><important>
          <para>A common error is to forget the underscore ("_") character at
          the beginning of the pattern. This convention is necessary because
          SIP devices, as configured in <filename>sip.conf,</filename> can
          have alphanumeric names (For example, in Asterisk, '333',
          'loadingdock' and 'A31' are all acceptable names for a SIP device).
          It also means that if you forget to use the underscore, your
          extension will never match <emphasis>and</emphasis> you will never
          see an error message informing you of your mistake.</para>
        </important></para>
    </section>

    <section>
      <title>Testing a pattern using <command>dialplan
      show</command><indexterm>
          <primary>dialplan show</primary>
        </indexterm></title>

      <para>An example dialplan looks like this:<programlisting>[general]

[my-phones]
exten =&gt; 23,1,Answer()
exten =&gt; 23,2,Playback(hello-world)
exten =&gt; 23,3,Hangup()</programlisting></para>

      <para>We can call <command>dialplan show</command> from the CLI (invoked
      with <command>asterisk -r</command> if Asterisk is already running) to
      verify that our dialplan has been loaded:<screen>*CLI&gt; dialplan show
[ Context 'default' created by 'pbx_config' ]

[ Context 'my-phones' created by 'pbx_config' ]
  '23' =&gt;           1. Answer()                                   [pbx_config]
                    2. Playback(hello-world)                      [pbx_config]
                    3. Hangup()                                   [pbx_config]

[ Context 'parkedcalls' created by 'res_features' ]
  '700' =&gt;          1. Park()                                     [res_features]

-= 2 extensions (4 priorities) in 3 contexts. =-
*CLI&gt;</screen></para>

      <para>The output includes all the dialplan rules that Asterisk knows
      about. Notice that there is a '<code>parkedcalls</code>' context that we
      haven't seen before; this is activated by default in
      <filename>features.conf</filename> and needn't concern us further. What
      if we are only interested in the <code>my-phones</code> context? We can
      make our request more specific with <command>dialplan show
      my-phones</command>:<screen>*CLI&gt; dialplan show my-phones
[ Context 'my-phones' created by 'pbx_config' ]
  '23' =&gt;           1. Answer()                                   [pbx_config]
                    2. Playback(hello-world)                      [pbx_config]
                    3. Hangup()                                   [pbx_config]

-= 1 extension (3 priorities) in 1 context. =-
*CLI&gt; </screen></para>

      <para>The command <code><application>dialplan</application> show</code>
      can also be used to show what Asterisk will do if we dial a specific
      number. Say we want to dial '25' from a phone in the
      <code>my-phones</code> context. We can see what will happen with the
      command <command>dialplan show 25@my-phones</command>:<screen>*CLI&gt; dialplan show 25@my-phones
There is no existence of 25@my-phones extension
*CLI&gt;</screen></para>

      <para>Nothing happens because there is no match for '25' in the context.
      If we dial '23' instead, we get this output:<screen>*CLI&gt; dialplan show 23@my-phones
[ Context 'my-phones' created by 'pbx_config' ]
  '23' =&gt;           1. Answer()                                   [pbx_config]
                    2. Playback(hello-world)                      [pbx_config]
                    3. Hangup()                                   [pbx_config]

-= 1 extension (3 priorities) in 1 context. =-
*CLI&gt; </screen></para>

      <para>If we want to check '23' against all the accessible contexts, we
      use <command>dialplan show 23@</command>:<screen>*CLI&gt; dialplan show 23@
[ Context 'my-phones' created by 'pbx_config' ]
  '23' =&gt;           1. Answer()                                   [pbx_config]
                    2. Playback(hello-world)                      [pbx_config]
                    3. Hangup()                                   [pbx_config]

-= 1 extension (3 priorities) in 1 context. =-
*CLI&gt;</screen></para>

      <para>Let's expand our dialplan with an additional context by editing
      <filename>extensions.conf</filename> like so:<programlisting>[general]

[my-phones]
exten =&gt; 23,1,Answer()
exten =&gt; 23,2,Playback(hello-world)
exten =&gt; 23,3,Hangup()

[department-q]
exten =&gt; _2X,1,Answer()
exten =&gt; _2X,2,Playback(hello-world)
exten =&gt; _2X,3,Hangup()</programlisting></para>

      <para>Now we go back to the CLI and, after reloading the dialplan with
      the <command>reload</command> command, run <command>dialplan show
      23@</command>:<screen>*CLI&gt; dialplan show 23@
[ Context 'department-q' created by 'pbx_config' ]
  '_2X' =&gt;          1. Answer()                                   [pbx_config]
                    2. Playback(hello-world)                      [pbx_config]
                    3. Hangup()                                   [pbx_config]

[ Context 'my-phones' created by 'pbx_config' ]
  '23' =&gt;           1. Answer()                                   [pbx_config]
                    2. Playback(hello-world)                      [pbx_config]
                    3. Hangup()                                   [pbx_config]

-= 2 extensions (6 priorities) in 2 contexts. =-
*CLI&gt; </screen></para>

      <para>All the matching extensions are displayed. Let's try it with
      <command>dialplan show 25@</command>:<screen>*CLI&gt; dialplan show 25@
[ Context 'department-q' created by 'pbx_config' ]
  '_2X' =&gt;          1. Answer()                                   [pbx_config]
                    2. Playback(hello-world)                      [pbx_config]
                    3. Hangup()                                   [pbx_config]

-= 1 extension (3 priorities) in 1 context. =-
*CLI&gt;</screen></para>

      <para>There is only one match, in context <code>department-q</code>. In
      this example, if you dial '25' from a phone in the
      <code>my-phones</code> context, you still won't hear the 'hello world'
      message. Extension '25' only works for phones in the
      <code>department-q</code> context.</para>
    </section>

    <section id="wann-matcht-welches-pattern">
      <title>Pattern matching order</title>

      <indexterm>
        <primary>Pattern matching</primary>

        <secondary>Pattern matching order</secondary>
      </indexterm>

      <para id="wann-triff-welches-pattern">Pattern matching in your Asterisk
      dialplan, while very powerful, can be tricky. It is easy to assume that
      Asterisk runs through the dialplan in a completely sequential manner;
      while this is generally the case, it does prioritize patterns based on
      the quality of the match.</para>

      <para>The reason for this is simple: more than one pattern might match a
      dialled number. If two extensions match a dialled number, Asterisk will
      always choose the better match. Before deciding which extension matches
      best, it processes the entire context.</para>

      <para>An example:<programlisting>[sales]
exten =&gt; _12X.,1,NoOp{12X}
exten =&gt; 12345,1,NoOp(12345}
exten =&gt; _1234.,1,NoOp{1234.}</programlisting></para>

      <para>It is not immediately clear which extension is executed when we
      dial '12345'. To find out, we use <command>dialplan show
      12345@sales</command>:<screen>*CLI&gt; dialplan show 12345@sales
[ Context 'sales' created by 'pbx_config' ]
  '12345' =&gt;        1. NoOp(12345})                               [pbx_config]
  '_1234.' =&gt;       1. NoOp{1234.}()                              [pbx_config]
  '_12X.' =&gt;        1. NoOp{12X}()                                [pbx_config]

-= 3 extensions (3 priorities) in 1 context. =-
*CLI&gt; </screen>Asterisk shows all the hits, but gives extension
      <code>12345,1,NoOP{12345}</code> first priority. The highest priority
      extension is always displayed at the top.</para>

      <para>Let's try it with '12346' using the command <command>dialplan show
      12346@sales</command>:<screen>*CLI&gt; dialplan show 12346@sales
[ Context 'sales' created by 'pbx_config' ]
  '_1234.' =&gt;       1. NoOp{1234.}()                              [pbx_config]
  '_12X.' =&gt;        1. NoOp{12X}()                                [pbx_config]

-= 2 extensions (2 priorities) in 1 context. =-
*CLI&gt; </screen></para>

      <para>Again, the pattern with the best match to the dialled digits is
      listed first.<important>
          <para>The order in which the patterned extensions appear in the
          dialplan makes no difference. Patterned extensions are matched
          strictly in order of match precision.</para>
        </important></para>

      <section>
        <title>A special case - the pattern "_." in Asterisk 1.2<indexterm>
            <primary>Pattern _. in Asterisk 1.2</primary>
          </indexterm></title>

        <para>Digium has changed the expected behavior for the "_." pattern in
        Asterisk 1.2. Though the pattern is the most general and should be
        therefore assigned the lowest priority, the behavior is opposite the
        expected behavior.<warning>
            <para>In Asterisk 1.2, the extension "<code>_.</code>" always gets
            the highest priority!</para>
          </warning></para>

        <para><note>
            <para>Note that the <command>show dialplan</command> command will
            work in Asterisk 1.4 but is deprecated; henceforth, examples for
            Asterisk 1.2 use <command>show dialplan</command>, while
            <command>dialplan show</command> is used for examples in Asterisk
            1.4.</para>
          </note></para>

        <para>Let's try adding the extension "_." to our previous dialplan
        example:<programlisting>[sales]
exten =&gt; _12X.,1,NoOp{12X}
exten =&gt; 12345,1,NoOp(12345}
exten =&gt; _1234.,1,NoOp{1234.}

exten =&gt; _.,1,NoOp{Bingo}</programlisting></para>

        <para>When we try testing '12346' with <command>dialplan show
        12346@sales</command>, we get the following output:<screen>*CLI&gt; dialplan show 12346@sales
[ Context 'sales' created by 'pbx_config' ]
  '_1234.' =&gt;       1. NoOp{1234.}()                              [pbx_config]
  '_12X.' =&gt;        1. NoOp{12X}()                                [pbx_config]
  '_.' =&gt;           1. NoOp{Bingo}()                              [pbx_config]

-= 3 extensions (3 priorities) in 1 context. =-
*CLI&gt;</screen></para>

        <para>In Asterisk 1.2, <command>show dialplan 12346@sales</command>
        gives a very different result:<screen>*CLI&gt; show dialplan 12346@sales
[ Context 'sales' created by 'pbx_config' ]
  '_.' =&gt;           1. NoOp{Bingo}()                              [pbx_config]
  '_1234.' =&gt;       1. NoOp{1234.}()                              [pbx_config]
  '_12X.' =&gt;        1. NoOp{12X}()                                [pbx_config]

-= 3 extensions (3 priorities) in 1 context. =-
*CLI&gt;</screen></para>

        <para>This is why it is preferable to use <code>"_X."</code> as the
        wildcard pattern (if we use a wildcard pattern at all!). The following
        dialplan example is processed identically in Asterisk 1.2 and
        1.4:<programlisting>[sales]
exten =&gt; _12X.,1,NoOp{12X}
exten =&gt; 12345,1,NoOp(12345}
exten =&gt; _1234.,1,NoOp{1234.}

exten =&gt; _X.,1,NoOp{Bingo}</programlisting></para>

        <para>The priorities appear as follows in both versions:<screen>*CLI&gt; dialplan show 12346@sales
[ Context 'sales' created by 'pbx_config' ]
  '_1234.' =&gt;       1. NoOp{1234.}()                              [pbx_config]
  '_12X.' =&gt;        1. NoOp{12X}()                                [pbx_config]
  '_X.' =&gt;          1. NoOp{Bingo}()                              [pbx_config]

-= 3 extensions (3 priorities) in 1 context. =-
*CLI&gt; </screen></para>
      </section>
    </section>
  </section>

  <section id="includes-im-dialplan">
    <title>Include statements</title>

    <indexterm>
      <primary>Include</primary>
    </indexterm>

    <para>Includes are a powerful tool for simplifying and organizing larger
    dialplans. Using an include statement, you can include other contexts in
    the current context.</para>

    <section id="include-syntax">
      <title>Syntax</title>

      <para><programlisting>include =&gt; name-of-the-other-context</programlisting></para>
    </section>

    <section id="include-beispiel">
      <title>Example</title>

      <para><programlisting>[general]

[sales]
include =&gt; internal
include =&gt; external

[internal]
exten =&gt; 2000,1,Dial(SIP/2000)

[external]
exten =&gt; 17005551212,1,Dial(SIP/5551212)</programlisting></para>
    </section>

    <section id="reihenfolge-beim-include">
      <title>Order of execution when using include statements</title>

      <para>Asterisk will always look for a match in the current context
      before referencing any included contexts. If a matching entry is found,
      that entry is used. If no matching entry is found, Asterisk will look
      for a match in the first included context, then the next, and so on. It
      is also possible to have nested includes; that is, includes
      <emphasis>within</emphasis> includes.</para>

      <para>In case of doubt, you can verify what entry Asterisk is using to
      handle a call by entering <command>dialplan show
      <replaceable>number</replaceable>@<replaceable>name-of-context</replaceable></command>
      in the Asterisk CLI.<note>
          <para>Users of Asterisk 1.2 use <command>show dialplan</command>
          instead of <command>dialplan show</command>.</para>
        </note>A few examples:<programlisting>[general]

[sales]
include =&gt; internal
include =&gt; external

[internal]
exten =&gt; 2000,1,Dial(SIP/2000)

[external]
exten =&gt; 17005551212,1,Dial(SIP/5551212)</programlisting></para>

      <para>Say we want to understand how Asterisk is handling a call to 2000
      in the <code>sales</code> context. To do that, we enter
      <command>dialplan show 2000@sales</command> in the CLI:<screen>*CLI&gt; dialplan show 2000@sales
[ Included context 'internal' created by 'pbx_config' ]
  '2000' =&gt;         1. Dial(SIP/2000)                             [pbx_config]

-= 1 extension (1 priority) in 1 context. =-
*CLI&gt;</screen></para>

      <para>If we then expand the <code>sales</code> context like
      so:<programlisting>[general]

[sales]
include =&gt; internal
include =&gt; external

exten =&gt; 2000,1,Answer()
exten =&gt; 2000,2,Playback(hello-world)
exten =&gt; 2000,3,Hangup()

[internal]
exten =&gt; 2000,1,Dial(SIP/2000)

[external]
exten =&gt; 17005551212,1,Dial(SIP/5551212)exten =&gt; 03012345678,1,Dial(SIP/03012345678)</programlisting></para>

      <para>We will see this CLI output::<screen>*CLI&gt; dialplan show 2000@sales
[ Context 'sales' created by 'pbx_config' ]
  '2000' =&gt;         1. Answer()                                   [pbx_config]
                    2. Playback(hello-world)                      [pbx_config]
                    3. Hangup()                                   [pbx_config]
[ Included context 'internal' created by 'pbx_config' ]
  '2000' =&gt;         1. Dial(SIP/2000)                             [pbx_config]


-= 2 extensions (4 priorities) in 2 contexts. =-
*CLI&gt; </screen></para>

      <para>Asterisk will play the <filename>hello-world</filename> sound file
      and not send the call to 2000, even though the include occurs first in
      the dialplan. This is because Asterisk will always look for a match in
      the current context before checking the included contexts.</para>
    </section>

    <section id="include-zeitgesteuert">
      <title>Time-conditional include statements<indexterm>
          <primary>Include statements</primary>

          <secondary>time-conditional</secondary>
        </indexterm></title>

      <para>An include statement can be made conditional upon the time of day.
      This makes it easy to implement different day and night
      behaviors.</para>

      <section id="include-zeitgesteuert-syntax">
        <title>Syntax</title>

        <para><programlisting>include =&gt; context|&lt;time&gt;|&lt;day&gt;|&lt;day-of-month&gt;|&lt;month&gt;</programlisting>The
        day and month are specified using the first three letters of the full
        name. For example, weekdays are specified <code>mon,</code>
        <code>tue</code>, <code>wed</code>, <code>thu</code>,
        <code>fri</code>, <code>sat</code>, <code>sun</code>, and months are
        specified <code>jan</code>, <code>feb</code>, <code>mar</code>,
        <code>apr</code>, <emphasis>etc</emphasis>. The time is specified in
        24 hour format.</para>
      </section>

      <section>
        <title>Example</title>

        <para>A business is open from 9:00 a.m. until 9:00 p.m. Monday to
        Friday and from 9:00 a.m. to 6:00 p.m. Saturday. The dialplan would
        look like this:<programlisting>; Day
&#8232;include =&gt; open|09:00-21:00|mon-fri|*|*
&#8232;include =&gt; open|09:00-18:00|sat|*|*
include =&gt; closed

[open]
exten =&gt; 2000,1,Dial(SIP/2000)

[closed]
exten =&gt; 2000,1,VoiceMail(2000,u)&#8232;</programlisting></para>
      </section>
    </section>
  </section>
</chapter>