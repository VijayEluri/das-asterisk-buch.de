<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
<chapter id="case-study" lang="en" revision="$Revision:495 $">
  <!--% Copyright (c) 2006 - 2007 by 
% Stefan Wintermeyer <sw@amooma.de>
% Permission is granted to copy, distribute and/or modify this document
% under the terms of the GNU Free Documentation License, Version 1.2
% or any later version published by the Free Software Foundation;
% with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
% Texts. A copy of the license is included in the section entitled "GNU
% Free Documentation License".-->

  <!--% translated from the German by Stephen Bosch <sbosch@vodacomm.ca>-->

  <!--% Asterisk training and consulting is offered at http://www.amooma.de-->

  <title>Case example: A typical business telephone system</title>

  <para>Building on what we've learned in <xref
  linkend="kapitel-installation" />, we'll put together a more comprehensive
  system for a fictional business. This will show you how to handle the
  requirements you're likely to be faced with in real installations.</para>

  <para>Our fictional company is in the widget manufacturing business. We've
  been charged with the task of planning a phone system for the new office,
  which houses the following departments:</para>

  <itemizedlist>
    <listitem>
      <para>Management (2 people)</para>
    </listitem>

    <listitem>
      <para>Reception (3 people)</para>
    </listitem>

    <listitem>
      <para>Domestic sales (6 people)</para>
    </listitem>

    <listitem>
      <para>International sales (4 people)</para>
    </listitem>

    <listitem>
      <para>Production (50 people)</para>
    </listitem>

    <listitem>
      <para>Shipping (10 people)</para>
    </listitem>

    <listitem>
      <para>IT (2 people)</para>
    </listitem>

    <listitem>
      <para>Building manager (1 person)</para>
    </listitem>
  </itemizedlist>

  <para>Every employee has his or her own phone.</para>

  <para>What costs should Widgets, Inc. anticipate? That depends very much on
  management's objectives. The following should be considered:</para>

  <itemizedlist>
    <listitem>
      <para>Should the Asterisk server be fault-tolerant? Will a cold-standby
      server be sufficient, or do we need hot standby?</para>
    </listitem>

    <listitem>
      <para>What server hardware are we buying? For most systems, a generic
      computer will suffice. It doesn't have to be the newest and most
      expensive.</para>
    </listitem>

    <listitem>
      <para>Which phones are we buying? Phones can range in price from 30 to
      300 dollars and up.</para>
    </listitem>
  </itemizedlist>

  <para>Does Asterisk actually make sense for Widgets, Inc., or is this just a
  make-work project for the IT department? This depends on what the
  traditional PBX vendors are offering and Widgets, Inc. needs. Though it's
  not unusual for traditional vendors to produce surprise discounts when they
  discover an Asterisk system is being considered, there can be hidden costs,
  sometimes in the form of fixed long-term contracts that force the client to
  buy from that vendor for several years.</para>

  <para>One of the advantages of Asterisk (and open source software generally)
  is the wide choice and availability of support and consulting services. You
  can do it all yourself, or you can hire a consultant to do it all for you.
  If you find the services of your existing consultant unsatisfactory, you can
  switch to another. This is usually difficult with traditional vendors
  because they lock you in with a contract and because the proprietary nature
  of the product also means there is some degree of sales territory
  exclusivity.</para>

  <para>Whether Asterisk makes economic sense has to be calculated on by-case
  basis. Experience shows that it usually does. If you consider the
  extensibility, freedom to upgrade (or not), and scalability of Asterisk in
  your calculations, the mid- and long-term capital and operating costs of an
  Asterisk system usually prove highly affordable.</para>

  <para>What about a packaged Asterisk system, such as FreePBX, Trixbox,
  PBX-in-Flash, Elastix or Gemeinschaft? "Pre-rolled" Asterisk systems have
  their advantages (rapid installation and configuration, simple interfaces
  for commonly used features, a GUI) and their disadvantages (lack of
  transparency, configuration restrictions, smaller installed base). A
  well-written dialplan for a generic Asterisk installation can serve as a
  template for new installations and an experienced Asterisk specialist can
  have new, complex systems up and running in the same time or less than it
  takes to set up a pre-rolled Asterisk. Whatever you choose, you're better
  off knowing how Asterisk works under the hood before you take the pre-rolled
  route. That's the purpose of this book!</para>

  <section id="widgets-rufnummernplan">
    <title id="rufnummernplan">The numbering plan</title>

    <para>The business has 78 employees. Though it's possible to get by with
    two-digit extension numbers, we'll use three; this leaves us some
    breathing room in the event the company expands or we need more extensions
    (for example, for fax machines or for group numbers).</para>

    <informaltable>
      <tgroup cols="3">
        <tbody>
          <row>
            <entry><emphasis role="bold">Number range</emphasis></entry>

            <entry><emphasis role="bold">Description</emphasis></entry>

            <entry><emphasis role="bold">Explanation</emphasis></entry>
          </row>

          <row>
            <entry>911</entry>

            <entry>Emergency number</entry>

            <entry>Emergency numbers should be absolutely intuitive. In the
            case of fire or serious injury, no employee should have to think
            twice about what number to dial.<footnote>
                <para>9-1-1 is the universal emergency number for the North
                American Numbering Plan (NANP). If you are configuring systems
                for an international business, you may wish to consider adding
                9-9-9 and 1-1-2 as well, as these are standard emergency
                numbers for the UK and continental Europe,
                respectively.</para>
              </footnote></entry>
          </row>

          <row>
            <entry>150 - 159</entry>

            <entry>Building manager</entry>

            <entry>The building manager is responsible for all building
            operations.</entry>
          </row>

          <row>
            <entry>160 - 169</entry>

            <entry>IT</entry>

            <entry>The IT department is responsible for computer and network
            operations.</entry>
          </row>

          <row>
            <entry>200 - 229</entry>

            <entry>Management</entry>

            <entry>The executive offices have 2XX extensions.</entry>
          </row>

          <row>
            <entry>230 - 269</entry>

            <entry>Reception</entry>

            <entry>As reception will be fielding calls mostly to management,
            they have numbers in the range 230-269. Numbers from 270-299 are
            kept in reserve.</entry>
          </row>

          <row>
            <entry>300 - 349</entry>

            <entry>Domestic Sales</entry>

            <entry>Sales gets the entire 3XX number block, to ensure adequate
            reserve in case of expansion. The first 50 numbers are allocated
            to Domestic Sales.</entry>
          </row>

          <row>
            <entry>350 - 399</entry>

            <entry>International Sales</entry>

            <entry>The second 50 numbers are allocated to International
            Sales.</entry>
          </row>

          <row>
            <entry>400 - 449</entry>

            <entry>Shipping</entry>

            <entry>The first half of the 4XX number block is allocated to
            Shipping.</entry>
          </row>

          <row>
            <entry>500 - 599</entry>

            <entry>Production</entry>

            <entry>Production is the largest department and gets the entire
            5XX block.</entry>
          </row>

          <row>
            <entry>800 - 899</entry>

            <entry>Internal services</entry>

            <entry>Special services and non-standard extensions,
            <emphasis>e.g.</emphasis>, voicemail or teleconferencing.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </section>

  <section id="widgets-infrastruktur">
    <title>Choosing the infrastructure</title>

    <para>The new building is getting a modern structured cabling system, so
    it makes sense to equip each workstation with a SIP phone. This saves us
    the grief and extra expense of running telephone wiring in parallel to the
    network wiring. Fax machines and cordless telephones can be connected to
    the system using analog telephone adapter (ATA) devices.<warning>
        <para>Faxing in Asterisk is nevertheless problematic. VoIP
        connections, depending on how they are compressed, can have less
        bandwidth available than a fax connection requires. This can result in
        fax transmissions being only partially received, or worse, failing
        completely. If you are only using VoIP internally, you must ensure
        that the codecs you choose can adequately support fax. The better
        option is to use an analog telephony card to provide internal analog
        extensions purely for fax use, or, ideally, build fax server
        functionality into Asterisk (see <xref
        linkend="kapitel-fax" />).</para>
      </warning>We install the Asterisk server in a climate-controlled server
    room with controlled access. Only authorized personnel are to have access
    to the server.<footnote>
        <para>In the past it was common for PBX and key system manufacturers
        to build secret backdoors into their systems, mainly for the purpose
        of providing timely support in the event of an outage. It was
        inevitable that clever but unscrupulous parties would figure out a way
        to exploit these backdoors to make free long distance and
        international calls, mostly at the expense of public institutions too
        large to have a clear picture of how their systems were configured. In
        today's world, the security of your systems, be they Asterisk or
        anything else, should always be a paramount concern.</para>
      </footnote></para>

    <section id="widgets-netzwerk">
      <title>Network</title>

      <para>The network is such a significant aspect of Asterisk's
      functionality that it demands a more thorough discussion.</para>

      <para>Telephony is a synchronous medium, which means that the receiver
      must accept the sender's transmission the instant it is sent. Human
      beings can tolerate a delay (also known as <quote>latency</quote>) of up
      to 300 ms (milliseconds), though the delay can be perceptible when over
      100 ms and distracting when over 200 ms. Most people find anything over
      500 ms unacceptable. This is the principal challenge that IP telephony
      must address: in IP telephony, we are attempting to carry a synchronous
      data stream over an asynchronous medium. The TCP/IP protocol, developed
      with funding from the US Defense Advanced Research Projects Agency
      (DARPA), was designed to maximize stability and robustness, but it
      achieves this at the expense of the kind of real-time performance we
      would expect of a telephone connection.</para>

      <para>When an e-mail suffers an occasional pause in transmission, it is
      materially unaffected. A voice conversation, by contrast, is highly
      time-dependent. If someone says <quote>Hi</quote> to us, we expect it to
      be followed by something relevant and intelligble immediately (such as
      <quote>my name is</quote> for example), because that is the way people
      speak to each other in person. That we can even carry voice traffic on
      an IP connection is owing to the high performance of modern network
      hardware. The high bandwidth of modern networks coupled with the
      relatively small bandwidth required by a single telephone-grade voice
      conversation means that voice traffic can be carried in a
      pseudo-real-time fashion.</para>

      <para>Nevertheless, network conditions vary, both by site and in time. A
      big network with many endpoints will carry a lot of traffic; networks
      also tend to be busier during normal business hours (say from 8 a.m. to
      6 p.m.) while employees send and receive e-mail, surf the web, download
      programs and documents, etc. This happens to be the time they make most
      of their telephone calls, and things can reach a critical point very
      quickly. If the available bandwidth drops below the minimum needed, we
      will start to see packet delay or loss. When this happens, the effect on
      voice conversations is drastic and immediate, resulting in dropouts,
      clipped words, clicks, pops and other strange noises. Anybody who has
      any experience with wireless telephone service knows how distracting
      this can be.</para>

      <para>To deal with these eventualities, commercial-grade routers and
      most managed switches support some kind of traffic classification
      through setting a TOS (Type of Service) flag in the packet
      header.</para>

      <para>By setting a TOS flag in voice packets, we can prioritize traffic
      passing through the router or switch. This feature is useful for
      managing traffic inside our network and across the network boundary, but
      it has no impact once the packets are on the Internet service provider's
      (ISP) network or on the public Internet. Only once the ISP guarantees
      low latency and bandwidth for real-time traffic can we have an assurance
      of call quality (called "Quality of Service", or QOS). If you will be
      supporting a multi-branch operation and plan to connect them with VoIP,
      you should consider this requirement carefully and discuss it with your
      ISP.</para>

      <para>The Asterisk system for Widgets, Inc. has at least 78 physical
      stations. In the worst case, we will have 39 simultaneous conversations
      (this happens if all the employees call each other). Depending on the
      codec used, we can expect a maximum bandwidth of 6,500 kbps (kbps =
      kilobits per second) which should be no problem for a typical 100 Mbps
      (Mbps = Megabits per second) LAN on structured, twisted-pair cable. All
      the same, this network will be carrying other traffic, and a couple of
      big file transfers can be enough to hit performance limits. How do we
      get the 6,500 kbps value? The standard G.711 compression standard
      includes two companding algorithms, u-law (used in North America and
      Japan) and a-law (used in Europe).<footnote>
          <para>These two algorithms are used for carrying voice traffic in
          ISDN channels (such as those used in T1 and T3 connections; see
          <xref linkend="chapter-ISDN" />)</para>
        </footnote>These provide excellent sound quality, but need at least 64
      kbps bandwidth. A single connection consists of an incoming and outgoing
      channel, each at 64 kbps; 39 connections add up as follows: 2 x 39 x 64
      kbps = 4,992 kbps. In addition to the channel bandwidth required, there
      will also be TCP/IP network overhead, so that each channel will use
      about 80 kbps in total. Now our total is 6,280 kbps; round up, and we
      have 6,500 kbps. While this is only a worst-case scenario, when it comes
      to voice systems, it is better to be safe than sorry!<footnote>
          <para>The website <ulink
          url="http://www.asteriskguru.com/tools/bandwidth_calculator.php">http://www.asteriskguru.com/tools/bandwidth_calculator.php</ulink>
          has an Asterisk bandwidth calculator with bandwidth values for
          various codecs that can help you the planning process.</para>
        </footnote><tip>
          <para>If you have doubts over whether you have sufficient bandwidth
          available to support all your extensions, consider starting with a
          lossier codec such as GSM. At betwen 13 and 15 kbps per channel, it
          needs only a fifth of the bandwidth of u-law and delivers adequate
          sound quality for most applications. Once you've verified the
          stability of your system, you can try switching groups of extensions
          over to u-law and wait to see if you have network problems as a
          result. Just remember highly compressive codecs like GSM are more
          processor-intensive, so you need to ensure you have adequate CPU
          resources available on your Asterisk server.</para>
        </tip></para>
    </section>

    <section id="widgets-server-hardware">
      <title>Server hardware</title>

      <para>The choice of server hardware for the Asterisk server is subject
      to many of the same considerations. The need for synchronous, real-time
      data transfer requires timely handling of the necessary processes in
      Asterisk. Most of the computing effort comes in the coding and decoding
      of digital sound streams; this effort is even greater if you have
      equipment that uses different codecs and Asterisk has to
      transcode<footnote>
          <para>Transcoding is the process by which an audio stream in one
          codec is translated into another codec. For example, a connection
          between a device supporting only GSM and one supporting only G.711
          will have to be transcoded; this is normally done by
          Asterisk.</para>
        </footnote> between them. The tremendous variety and quantity of
      hardware available means there is no hard and fast rule for calculating
      processor requirements. As a guide, however, we can start with this
      table:</para>

      <informaltable>
        <tgroup cols="3">
          <tbody>
            <row>
              <entry>CPU</entry>

              <entry>Number of simultaneous connections</entry>

              <entry>Number of endpoints</entry>
            </row>

            <row>
              <entry>1,0 GHz</entry>

              <entry>15</entry>

              <entry>40</entry>
            </row>

            <row>
              <entry>1,5 GHz</entry>

              <entry>40</entry>

              <entry>100</entry>
            </row>

            <row>
              <entry>2,0 GHz</entry>

              <entry>80</entry>

              <entry>200</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>By <quote>CPU</quote> we mean a typical CPU from an off-the-shelf
      PC (<emphasis>e.g.</emphasis> <trademark>Intel</trademark> or
      <trademark>AMD</trademark>). We've calculated the number of simultaneous
      connections based on the reasonable assumption that not all the phones
      will be active at one time, but rather between one-third and one-half.
      It should be noted that this is just a coarse estimate with a
      considerable margin of safety; If there is little transcoding,
      conferencing or echo cancellation required, the number of simultaneous
      connections supported would be higher. That said, the exact limits for
      any given installation can only be reliably determined through direct
      testing and experimentation.</para>

      <tip>
        <para>The Linux program <command>top</command> provides a simple tool
        for monitoring processor loads on a running server, but only at the
        current point in time. Processor and process loads are dynamic and
        change dramatically from one moment to the next, so point measurements
        have limited usefulness. You can try monitoring the performance of
        your Asterisk servers using monitoring tools like Nagios <ulink
        url="http://www.nagios.org">(http://www.nagios.org</ulink>). If you
        prefer to use native Linux tools, you can do simple monitoring with a
        <command>cron</command> job (see <command>man crontab</command>)
        running a <command>bash</command> script with this
        content:<programlisting>w | head -n 1 &gt;&gt; /var/log/serverloads</programlisting></para>

        <para>By running this <command>cron</command> job every minute, you
        will build up a set of data points over time which you can use to
        evaluate server performance.<footnote>
            <para>This cron job would indeed be a very simple analysis tool.
            If you are comfortable with shell scripting, you can write more
            comprehensive scripts which can give you more detailed information
            by using output from tools like <command>top</command> and
            <command>uptime</command>, processing it, and dumping the
            processed output into a comma-delimited text file which you can
            graph in a spreadsheet program.</para>
          </footnote></para>
      </tip>

      <para>Widgets, Inc. has 78 employees and an estimate of 40 simultaneous
      connections is reasonable, so a computer with a reasonably current CPU
      (For example, Pentium 4, AMD Athlon) at a clock speed of 1.5 GHz should
      suffice. In general, the newer the CPU and system, the better the
      performance; processor clock speed is no longer an accurate measure of
      CPU performance, particularly as applied to the newer dual-core
      processors, and your server will likely be able to handle more calls
      with a newer processor at the same clock speed. Dual processor machines
      will improve performance correspondingly.</para>

      <para>For the voice mailboxes, we will need about 0.1 MB (megabytes) of
      disk space per minute of message time.<footnote>
          <para>This is for wav49 or GSM format message files. If you decide
          to use uncompressed WAV format files, you will use many times the
          space. As disk space is cheap, this is not normally an issue, and
          more installations are using uncompressed WAV because of the higher
          sound quality. Be mindful, though, that more disk space used means
          more storage required for backup.</para>
        </footnote>If we allot 30 minutes of message storage to each user, we
      can expect to use a total of about 2 GB (gigabytes) of disk space.
      Because voice message data is valuable business data and can even be
      critical, the storage should be redundant and backed-up regularly. A
      RAID 1 array(two disks or disk sets in a mirror configuration) will
      provide the necessary redundancy.<warning>
          <para>Note that software RAID burdens the CPU significantly. A
          professional installation should use hardware RAID if at all
          possible.</para>
        </warning></para>

      <para>Memory requirements for Asterisk are not onerous, and 512 MB RAM
      would be adequate. With 1 GB RAM, Asterisk can handle very large
      business units. Any additional steps taken to enhance the reliability
      and performance of the server, such as the installation of redundant
      network adapters, commercial-grade telephone interface cards, and
      uninterruptible power supplies will go a long way to increasing user and
      decision-maker confidence in the system. If your background is in IT
      services, you are facing a whole new level of user expectations. Users
      will usually tolerate a brief e-mail outage; the phones, however, must
      <emphasis>always</emphasis> work. Readers with a background in
      circuit-switched telephony will know exactly what we are talking about.
      Hell hath no fury like an executive without a working desk set.</para>
    </section>
  </section>

  <section id="widgets-grundkonfiguration">
    <title>Base Configuration</title>

    <para>We'll configure Asterisk so that all the employees can call each
    other and have their own mailbox. Once that's done, the system can be
    extended with additional functions and modules.</para>

    <section id="widgets-sip.conf">
      <title>A sip.conf for 100 users</title>

      <para>Configuring <filename>/etc/asterisk/sip.conf</filename> for 100
      users is no different than configuring for 2 users; there are no
      shortcuts here. Each SIP extension must be configured individually. What
      follows is an abridged version of the <filename>sip.conf</filename> for
      Widgets, Inc. Lines beginning with the <code>;</code> are treated as
      comments and ignored by Asterisk. The file is composed in the same way
      as in our simple example in <xref linkend="chapter-installation" />. In
      general we've avoided assigning numbers to individual users that end in
      0, because we want to reserve those numbers for group phone numbers. The
      building manager is an exception, since we don't anticipate any need for
      a group phone number there.</para>

      <programlisting>[general]
port = 5060
bindaddr = 0.0.0.0
context = other

; Building Manager
;
[150]  ; normal office phone
context=building-mgr
secret=1234
callerid="Building Manager" &lt;150&gt;
type=friend
host=dynamic

[151]  ; cordless phone
context=building-mgr
secret=1234
callerid="Building Manager" &lt;150&gt;
type=friend
host=dynamic

; Internal IT department
;
[161]  ; Tech 1
context=it
secret=1234
type=friend
host=dynamic

[162]  ; Tech 2
context=it
secret=1234
type=friend
host=dynamic

[165]  ; Cordless phone
context=it
secret=1234
type=friend
host=dynamic

; Executive offices
;
[201]  ; Manager 1
context=management
secret=1234
type=friend
host=dynamic

[202]  ; Manager 2
context=management
secret=1234
type=friend
host=dynamic

; Reception
;
[231]  ; Assistant 1
context=reception
secret=1234
type=friend
host=dynamic

[232]  ; Assistant 2
context=reception
secret=1234
type=friend
host=dynamic

[233]  ; Assistant 3
context=reception
secret=1234
type=friend
host=dynamic

; Domestic Sales
;
[301]  ; Account Agent 1
context=domestic-sales
secret=1234
type=friend
host=dynamic

[302]  ; Account Agent 2
context=domestic-sales
secret=1234
type=friend
host=dynamic

[303]  ; Account Agent 3
context=domestic-sales
secret=1234
type=friend
host=dynamic

[304]  ; Account Agent 4
context=domestic-sales
secret=1234
type=friend
host=dynamic

[305]  ; Account Agent 5
context=domestic-sales
secret=1234
type=friend
host=dynamic

[306]  ; Account Agent 6
context=domestic-sales
secret=1234
type=friend
host=dynamic

; International Sales
;
[351]  ; Account Agent 1
context=international-sales
secret=1234
type=friend
host=dynamic

[352]  ; Account Agent 2
context=international-sales
secret=1234
type=friend
host=dynamic

[353]  ; Account Agent 3
context=international-sales
secret=1234
type=friend
host=dynamic

[354]  ; Account Agent 4
context=international-sales
secret=1234
type=friend
host=dynamic

; Shipping
;
[401]  ; Shipping Agent 1
context=shipping
secret=1234
type=friend
host=dynamic

; The remaining 9 entries for Shipping 
; are omitted here for the sake of brevity.

; Production
;
[501]  ; Assembly line 1
context=production
secret=1234
type=friend
host=dynamic

; The remaining 49 entries for Production
; are omitted here for the sake of brevity.
</programlisting>

      <para>You can make <filename>sip.conf</filename> more concise with
      templates. Have a look at <xref linkend="appendix-conf-templates" /> for
      more information.</para>

      <para>Our example <filename>sip.conf</filename> has two instances of the
      <code>callerid</code> variable. This variable sets what is displayed on
      the called party's telephone:<programlisting>callerid = "Building Manager" &lt;150&gt;</programlisting>In
      our example, both the building manager's phones (150 and 151) use the
      caller ID 150 and the caller ID name <quote>Building Manager</quote>.
      This ensures that returned calls always go to extension 150.</para>
    </section>

    <section id="widgets-dialplan">
      <title>The dialplan</title>

      <para>In <xref linkend="chapter-installation" />, we wrote a simple
      dialplan for two phones. In this case example, we have more users.
      Writing a dialplan with 100 entries is not exactly difficult, but it is
      tedious, and maintenance could become a problem. It's much better to use
      pattern matching in <filename>extensions.conf</filename> using the
      patterns described in <xref linkend="introduction-regex" /> and the
      includes described in <xref linkend="dialplan-includes" />.</para>

      <section id="widgets-extensions.conf">
        <title>extensions.conf</title>

        <para>The numbering plan<footnote>
            <para>with the exception of the emergency numbers; we'll deal with
            those as soon as we've established a connection to the outside
            world.</para>
          </footnote>for Widgets, Inc. translates into a readable, and
        maintainable <filename>extensions.conf</filename>, which looks like
        this:<programlisting>[other]

[building-mgr]
include =&gt; internal-calls
include =&gt; voicemail-easy

[it]
include =&gt; internal-calls
include =&gt; voicemail-easy
;
; The IT department should be able to
; access all voicemail boxes for
; debugging purposes
;
include =&gt; voicemail-normal

[management]
include =&gt; internal-calls
include =&gt; voicemail-easy

[reception]
include =&gt; internal-calls
include =&gt; voicemail-easy

[domestic-sales]
include =&gt; internal-calls
include =&gt; voicemail-easy

[international-sales]
include =&gt; internal-calls
include =&gt; voicemail-easy

[versand]
include =&gt; internal-calls
include =&gt; voicemail-easy

[produktion]
include =&gt; internal-calls
include =&gt; voicemail-easy

[internal-calls]
exten =&gt; _[1-5]XX,1,Dial(SIP/${EXTEN},60)
exten =&gt; _[1-5]XX,2,VoiceMail(${EXTEN},u)

[voicemail-easy]
;
; Users don't have to enter their extension number
; when retrieving voice mail.
;
exten =&gt; 800,1,VoicemailMain(${CALLERID(num)})

[voicemail-normal]
; Prompts for a mailbox number.
exten =&gt; 801,1,VoicemailMain()</programlisting>The extensions in the
        <code>[internal-calls]</code> context mean all calls to numbers 100 to
        599 are passed to the <application><code>Dial()</code></application>
        application exactly as dialed, connecting the calling party to the
        corresponding SIP phone. If the user dials 800, she is connected to
        the mailbox for that phone. Only the IT department can call 801, at
        which point the system prompts for a mailbox number. This is done so
        that the IT department, which is now responsible for supporting the
        telephone system, can access all the mailboxes for debugging
        purposes.</para>

        <para>In actual practice, our dialplan would have to be somewhat more
        complex. The numbering plan has number ranges
        (<emphasis>e.g.</emphasis> 270 to 299) that don't contain any
        telephones. Our example ignores this, but this could lead to confusion
        in an actual deployment. If a user dials an unassigned number, the
        call goes straight to a voice mailbox that may or may not exist; even
        if it does, the user could leave messages that are never
        retrieved.</para>

        <para>To prevent this from happening, the
        <code>[internal-calls]</code> context would look like
        this:<programlisting>[internal-calls]
exten =&gt; _1[5-6]X,1,Dial(SIP/${EXTEN},60)
exten =&gt; _1[5-6]X,2,VoiceMail(${EXTEN},u)

exten =&gt; _2[0-6]X,1,Dial(SIP/${EXTEN},60)
exten =&gt; _2[0-6]X,2,VoiceMail(${EXTEN},u)

exten =&gt; _[358]XX,1,Dial(SIP/${EXTEN},60)
exten =&gt; _[358]XX,2,VoiceMail(${EXTEN},u)

exten =&gt; _4[0-4]X,1,Dial(SIP/${EXTEN},60)
exten =&gt; _4[0-4]X,2,VoiceMail(${EXTEN},u)
</programlisting>For Widgets, Inc, we accept this risk for the sake of
        simplicity and use the following configuration:<programlisting>[internal-calls]
exten =&gt; _[1-5]XX,1,Dial(SIP/${EXTEN},60)
exten =&gt; _[1-5]XX,2,VoiceMail(${EXTEN},u)</programlisting></para>
      </section>

      <section id="widgets-voicemail.conf">
        <title>voicemail.conf</title>

        <para>The <filename>voicemail.conf</filename> remains as described in
        <xref linkend="minimal-system-vm" />, except with a few additional
        entries restricting message length and defining the server e-mail
        address:</para>

        <programlisting>[general]
format = gsm
serveremail = voicemail@widgets.com
maxmessage = 600

[local]
150 =&gt; 999999,Bob Boilerman,building@widgets.com
200 =&gt; 999999,Charles Crucial,charles.crucial@widgets.com
201 =&gt; 999999,John Smart,john.smart@widgets.com

; We omit the remaining entries for brevity</programlisting>
      </section>
    </section>
  </section>

  <section id="widgets-weiter">
    <title>What next?</title>

    <para>The above configuration for Widgets, Inc. serves as a planning
    example for all systems of similar size. You can use this configuration to
    experiment with many of the configuration examples in this book.</para>

    <para>This system only allows telephone calls and includes a simple
    voicemail system. A professional installation usually demands features
    such as teleconferencing and queues. If this is what you need, you have
    two basic options: you can reinvent the wheel and build a dialplan which
    includes those features from scratch, or you can use a standard framework
    such as <emphasis>FreePBX </emphasis>(<ulink
    url="???">http://www.freepbx.com</ulink> or
    <emphasis>Gemeinschaft</emphasis> (<ulink
    url="???">http://www.amooma.de/gemeinschaft</ulink>; at the moment, this
    project is available only in German. Volunteers willing to help
    internationalize it are welcome! Contact Stefan at
    <email>stefan.wintermeyer@amooma.de</email>) and configure it according to
    your requirements.</para>
  </section>

  <section id="widgets-faq"></section>
</chapter>
