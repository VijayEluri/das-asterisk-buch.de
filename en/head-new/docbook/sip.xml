<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
<section id="sip" lang="en" revision="$Revision: 820 $">
  <!--% Copyright (c) 2006 - 2007 by 
- Stefan Wintermeyer <sw@amooma.de>
% Permission is granted to copy, distribute and/or modify this document
% under the terms of the GNU Free Documentation License, Version 1.2
% or any later version published by the Free Software Foundation;
% with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
% Texts. A copy of the license is included in the section entitled "GNU
% Free Documentation License".
% translated from the German by Stephen Bosch <sbosch@vodacomm.ca>
% Asterisk training and consulting is offered at http://www.amooma.de-->

  <title>SIP</title>

  <para>SIP has established itself as the <emphasis>de facto</emphasis>
  standard in the VoIP environment. Why?</para>

  <para>Probably for these reasons (among others):</para>

  <itemizedlist>
    <listitem>
      <para>It is an open protocol standard.</para>
    </listitem>

    <listitem>
      <para>The protocol specification was available free to developers as
      <ulink url="http://www.ietf.org/rfc/rfc3261.txt"><citetitle>RFC
      3261</citetitle></ulink> from the very beginning.</para>
    </listitem>

    <listitem>
      <para>It is simpler than the competing MGCP and H.323 protocols.</para>
    </listitem>
  </itemizedlist>

  <section id="sip-nat-problem">
    <title>The SIP-NAT Problem</title>

    <para>It is the rare office or home PC that has its own, fixed public IP
    address. The Internet revolution and the explosion in the number of
    devices with IP addresses means that the IPv4 standard (which is, as yet,
    the most widely implemented) does not have sufficient available address
    space to provide a public address to all the devices that need one.<note>
        <para>The IPv4 address space has a total of
        2<superscript>32</superscript> individual addresses; even if it is
        technically feasible to distribute these addresses evenly to where
        they are actually needed, the political and historical factors, as
        well as the classful structure of the address scheme itself, make this
        practically impossible. IPv6 was developed to meet future address
        demand and solve some of the major problems that plague IPv4.
        Nevertheless, it will be some time before IPv6 is implemented on a
        sufficiently wide scale to make it a serious option for the average
        user.</para>
      </note>One way to resolve this address shortage is to connect entire
    private networks to public networks via a NAT (Network Address
    Translation) gateway. In this way, a limited number of public addresses
    can be shared among a much larger number of hosts with private
    addresses.<footnote>
        <para>Private IP addresses belong to specific address blocks as
        allocated by IANA (Internet Assigned Numbers Authority) and defined in
        RFC 1918. These are, in order from largest number of addresses to
        smallest, 10.0.0.0 (16 bit block), 172.16.0.0 (20 bit block), and
        192.168.0.0 (24 bit block). Examples of private addresses are
        10.128.1.16, or 192.168.1.3.</para>
      </footnote>A NAT gateway takes all outgoing connection requests
    originating from the internal, private network, and rewrites the source
    address portion of the header so that it contains the public address.
    Return packets are similarly translated and passed on to the internal host
    that initiated the conversation.<note>
        <para>There are a number of different forms of NAT in use; here, our
        goal is just to explain the fundamental principle for the purpose of
        understanding the effects and implications for an Asterisk SIP
        installation.</para>
      </note>TCP/IP packets consist of a header (akin to the envelope of a
    letter) and payload. The header contains information about the origin and
    destination of the payload in the form of the IP addresses of the source
    and target computers. The NAT gateway rewrites this information, changing
    the source address for outgoing packets from the internal hosts to the
    public address and the destination address for incoming packets to the
    private address.</para>

    <para>This process is very effective for most protocols. In the case of
    SIP, however, address information is also stored in the packet payload.
    This payload information is not accessible to the NAT gateway, and is
    therefore not rewritten. When the destination host receives the SIP packet
    and tries to formulate a response, it takes the private IP address in the
    SIP payload as the source address and attempts to send the reply to that
    address. Because the address is private and hence not routable, the
    nearest router discards those replies and the exchange fails, so that the
    source host receives no response from the destination.</para>

    <para>For SIP telephones communicating on the internal network only, this
    is not a problem, but it becomes one for any connections made to hosts on
    the public Internet. In a default SIP configuration, connections over NAT
    simply won't work.</para>

    <note>
      <para>You can tell Asterisk which ports to listen for RTP traffic on in
      the configuration file <filename>rtp.conf</filename>.</para>
    </note>
  </section>

  <section id="sip-extensions.conf">
    <title>SIP devices in extensions.conf</title>

    <para>SIP channels are defined in <filename>extensions.conf</filename> in
    the form <code>SIP/<replaceable>device</replaceable></code>. To contact an
    arbitrary SIP user over the Internet, you write in the format
    <code>SIP/<replaceable>user</replaceable>@<replaceable>domain</replaceable></code>;
    to contact a user via a proxy, you write in the format
    <code>SIP/<replaceable>proxy</replaceable>/<replaceable>user</replaceable></code>
    or
    <code>SIP/<replaceable>user</replaceable>@<replaceable>proxy</replaceable></code>
    (in which case the proxy has to be defined in its own section in
    <filename>sip.conf</filename> -- see <xref
    linkend="sip.conf-channels" />).</para>

    <para>Some useful CLI commands:<itemizedlist>
        <listitem>
          <para><code>sip show peers</code></para>

          <para>Lists all SIP peers, including friends.</para>
        </listitem>

        <listitem>
          <para><code>sip show users</code></para>

          <para>Lists all SIP users, including friends.</para>
        </listitem>

        <listitem>
          <para><code>sip show registry</code></para>

          <para>Shows the status of hosts where we register.</para>
        </listitem>

        <listitem>
          <para><code>sip debug</code> <emphasis>or</emphasis> <code>sip set
          debug</code></para>

          <para>Shows SIP debug messages.</para>
        </listitem>
      </itemizedlist></para>
  </section>

  <section id="sip.conf-general">
    <title>Global settings</title>

    <simpara>These settings are placed in the <code>[general]</code> section
    in <filename>sip.conf</filename>. Here, we only explain the important and
    relevant parameters; further explanation of the more exotic parameters may
    be found in the sample <filename>sip.conf</filename> packaged with
    Asterisk.</simpara>

    <simpara>As a rule, it is also possible to use these parameters as
    overrides in the sections for individual peers or users.</simpara>

    <itemizedlist>
      <listitem>
        <para><synopsis>context=<replaceable>contextname</replaceable></synopsis></para>

        <para>Sets the context in the dialplan for incoming calls.</para>
      </listitem>

      <listitem>
        <para><synopsis>allowguest=[yes|no]</synopsis></para>

        <para>Allow calls from guests. Default: yes</para>
      </listitem>

      <listitem>
        <para><synopsis>allowtransfer=[yes|no]</synopsis></para>

        <para>Allow call transfer. Default:yes</para>
      </listitem>

      <listitem>
        <para><synopsis>realm=<replaceable>hostname</replaceable></synopsis></para>

        <para>The system name of the Asterisk server for the purposes of
        authentication. Default: <code>asterisk</code> or the value set in
        <filename>asterisk.conf</filename>, if applicable. Use the host or
        fully-qualified domain name of your server, as in this example:</para>

        <programlisting>realm=ast1.example.com</programlisting>
      </listitem>

      <listitem>
        <para><synopsis>bindport=<replaceable>port_number</replaceable></synopsis></para>

        <para>The UDP port for accepting SIP connections. Default:
        5060.</para>
      </listitem>

      <listitem>
        <para><synopsis>bindaddr=<replaceable>ip_address</replaceable></synopsis></para>

        <para>The IP address for accepting SIP connections. Default: 0.0.0.0,
        meaning all the IP addresses on the local host.</para>
      </listitem>

      <listitem>
        <para><code>tos_sip=[cs0|cs1|cs2|cs3|cs4|cs5|cs6|cs7|af11|af12|af13|af21|af22|af23|af31|af32|af33|af41|af42|af43|ef]</code></para>

        <para>Controls the Type-Of-Service for SIP signalling packets. Use
        this for traffic prioritization. The recommended setting is
        <code>cs3</code>.</para>

        <para>You can set three Type-Of-Service (TOS) parameters for SIP to
        give SIP packets a different priority than, for example, data packets.
        There are no defaults. You can find more information about the
        parameters in the Asterisk documentation file
        <filename>doc/ip-tos.txt</filename>.</para>
      </listitem>

      <listitem>
        <para><synopsis>tos_audio=[cs0|cs1|cs2|cs3|cs4|cs5|cs6|cs7|af11|af12|af13|af21|af22|af23|af31|af32|af33|af41|af42|af43|ef]</synopsis></para>

        <para>Controls the Type-Of-Service for SIP RTP audio packets. The
        recommended setting is <code>ef</code>.</para>
      </listitem>

      <listitem>
        <para><synopsis>tos_video=[cs0|cs1|cs2|cs3|cs4|cs5|cs6|cs7|af11|af12|af13|af21|af22|af23|af31|af32|af33|af41|af42|af43|ef]</synopsis></para>

        <para>Controls the Type-Of-Service for SIP RTP video packets. The
        recommended setting is <code>af41</code>.</para>
      </listitem>

      <listitem>
        <para><synopsis>allow=[g723|gsm|ulaw|alaw|g726|adpcm|slin|lpc10|g729|speex|ilbc|g726_aal2|all]</synopsis></para>

        <para>Sets which audio codecs are available for SIP connections. You
        can have more than one allow statement. It is usually used along with
        disallow, as in this example:</para>

        <para><programlisting>; Example: allow all codecs except ilbc:
allow=all
disallow=ilbc</programlisting></para>
      </listitem>

      <listitem>
        <para><synopsis>disallow=[g723|gsm|ulaw|alaw|g726|adpcm|slin|lpc10|g729|speex|ilbc|g726_aal2|all]</synopsis></para>

        <para>Sets which audio codecs are available for SIP connections. It is
        usually used along with allow, as in this example:</para>

        <para><programlisting>; Example: allow only gsm and ulaw:
disallow=all
allow=gsm
allow=ulaw</programlisting></para>
      </listitem>

      <listitem>
        <para><synopsis>language=[<replaceable>language_abbreviation</replaceable>]</synopsis></para>

        <para>Sets the default language.</para>

        <para>Language abbreviations are two-letter codes based on ISO 3166-1
        alpha-2:</para>

        <para><programlisting>language=en</programlisting></para>
      </listitem>

      <listitem>
        <para><synopsis>dtmfmode=<replaceable>mode</replaceable></synopsis></para>

        <para>Transmission mode for DTMF. Possible values are:<itemizedlist>
            <listitem>
              <para><code>rfc2833</code></para>

              <para>(default) send DTMF as per RFC 2833.</para>
            </listitem>

            <listitem>
              <para><code>info</code></para>

              <para>send DTMF as SIP INFO messages.</para>
            </listitem>

            <listitem>
              <para><code>inband</code></para>

              <para>send DTMF as audio, <emphasis>i.e.</emphasis> in the sound
              data.</para>
            </listitem>

            <listitem>
              <para><code>auto</code></para>

              <para>use <code>rfc2833</code> wenn possible, otherwise
              <code>inband</code>.</para>
            </listitem>
          </itemizedlist></para>
      </listitem>

      <listitem>
        <para><synopsis>videosupport=[yes|no]</synopsis></para>

        <para>Switches on support for video transmission (<emphasis>not
        tested</emphasis>). Video support can be disabled for individual
        channels, but not enabled unless set globally.</para>
      </listitem>

      <listitem>
        <para><synopsis>maxcallbitrate=<replaceable>bitrate</replaceable></synopsis></para>

        <para>Limits the bitrate for video calls to the provided maximum, in
        kilobits per second (kbps). Default: <code>384</code> (or 384
        kb/s).</para>
      </listitem>

      <listitem>
        <para><synopsis>g726nonstandard=[yes|no]</synopsis></para>

        <para>Some devices implement the G726 standard incorrectly and
        negotiate G726-32 (RFC3551 packing) when they really mean AAL2-G726-32
        (see <filename>doc/rtp-packetization.txt</filename>, as of Asterisk
        1.4). This need only be set if your sets are affected
        (<emphasis>e.g.</emphasis> Grandstream or Sipura phones).</para>
      </listitem>

      <listitem>
        <para><synopsis>rtpkeepalive=<replaceable>interval</replaceable></synopsis></para>

        <para>Sends a keep-alive packet at the provided interval, in seconds,
        to keep NAT conversations active.</para>
      </listitem>

      <listitem>
        <para><synopsis>t38pt_udptl=[yes|no]</synopsis></para>

        <para>Enables pass-through of T.38 fax traffic on SIP-to-SIP channels.
        Default: <code>no</code>. Can be disabled on a per channel basis, but
        must be set globally to be activated.</para>
      </listitem>

      <listitem>
        <para><synopsis>register =&gt; <replaceable>user</replaceable>[:<replaceable>password</replaceable>[:<replaceable>authuser</replaceable>]]@<replaceable>host</replaceable>[:<replaceable>port</replaceable>][/<replaceable>extension</replaceable>]</synopsis></para>

        <simpara>Lets Asterisk register itself with a SIP proxy
        (<emphasis>e.g.</emphasis>, an external provider) as a SIP
        user.</simpara>

        <simpara>The host is either a normal host name resolvable in DNS, or
        the name of a section further down in
        <filename>sip.conf</filename>.</simpara>

        <simpara>The extension must be defined in
        <filename>extensions.conf</filename> so that Asterisk can accept calls
        from the proxy. If it is not defined, the default is
        <code>s</code>.</simpara>

        <programlisting>; Route incoming calls from sip-provider.com to extension 999:
register =&gt; 123456:password@sip-provider.com/999

; Route incoming calls from sip-provider.com to extension 999:
register =&gt; 123456:password@sip-provider/999
[sip-provider]
<replaceable>...</replaceable></programlisting>
      </listitem>

      <listitem>
        <para><synopsis>regcontext=<replaceable>context</replaceable></synopsis></para>

        <para>Used together with <code>regexten</code> (see <xref
        linkend="sip-channel-regexten" />), indicates which context in
        <filename>extensions.conf</filename> to use for extensions created
        dynamically when a SIP device connects. This is useful for roaming
        devices or devices that are not always on. The context in question
        must contain an extension (matching that defined by
        <code>regexten</code>) that begins with priority 2; when the device is
        connected and available, Asterisk creates a priority 1 line containing
        a <command>NoOp()</command> command, and can send calls to that
        extension.</para>

        <programlisting>; The context to use for dynamically created extensions:
regcontext=sip-roaming

[bob]
regexten=4700
type=friend                ; a roaming device!
secret=mysterious
username=bob       ; our user
...</programlisting>
      </listitem>

      <listitem>
        <para><synopsis>externip=<replaceable>ip_address</replaceable></synopsis></para>

        <para>This setting is important if Asterisk is behind a NAT device.
        The provided IP address is used in SIP payload for outgoing SIP
        packets, so that the destination SIP host gets the correct public IP
        address to which to send replies (instead of the private IP address of
        the originating host, which is ordinarily what would happen).</para>

        <programlisting>externip=123.45.67.89</programlisting>
      </listitem>

      <listitem>
        <para><synopsis>externhost=<replaceable>hostname</replaceable></synopsis></para>

        <para>Like <xref linkend="sip-general-externip" />, but using the
        fully-qualifed domain name instead (which must be, of course,
        resolvable).</para>

        <programlisting>externhost=bartsmith.dyndns.net</programlisting>
      </listitem>

      <listitem>
        <para><synopsis>localnet=<replaceable>address_space</replaceable></synopsis></para>

        <para>Defines the local, private networks. Vital if any SIP
        connections are traversing NAT. It is usually sufficient to use the
        following (from RFC 1918 and Zeroconf):</para>

        <programlisting>localnet=192.168.0.0/255.255.0.0
localnet=10.0.0.0/255.0.0.0
localnet=172.16.0.0/12
localnet=169.254.0.0/255.255.0.0</programlisting>
      </listitem>

      <listitem>
        <synopsis>canreinvite=[yes|nonat|update|update,nonat]</synopsis>

        <para>By default, Asterisk lets two SIP devices communicate directly
        with each other, without Asterisk as the middleman (which is called
        being "in the media path"). In NAT situations, however, Asterisk must
        be in the media path.<itemizedlist>
            <listitem>
              <para><code>yes</code></para>

              <para>(default) Normal setting. Asterisk instructs the SIP
              endpoints to connect directly with each other (reinvite).</para>
            </listitem>

            <listitem>
              <para><code>nonat</code></para>

              <para>Only reinvite if both parties are not behind a NAT,
              insofar as this is detectable by Asterisk.</para>
            </listitem>

            <listitem>
              <para><code>update</code></para>

              <para>Instead of using SIP <code>INVITE</code> headers, use SIP
              <code>UPDATE</code> for redirection instead. May be combined
              with nonat as <code>update,nonat</code>.</para>
            </listitem>
          </itemizedlist></para>
      </listitem>

      <listitem>
        <synopsis>jbenable=[yes|no]</synopsis>

        <para>Turns on the jitter buffer for incoming audio, if necessary.
        Enables Asterisk to balance incoming packets with variable latency
        (see <xref linkend="glossar-jitter" />). Default:
        <code>no</code></para>
      </listitem>

      <listitem>
        <synopsis>jbforce=[yes|no]</synopsis>

        <para>Turns on the jitter buffer always. (<code>jbenable</code> must
        be set <code>yes</code>) Default: <code>no</code></para>
      </listitem>

      <listitem>
        <synopsis>jbmaxsize=<replaceable>duration</replaceable></synopsis>

        <para>Maximum size of the jitter buffer in milliseconds. Default:
        200.</para>
      </listitem>

      <listitem>
        <synopsis>jbresyncthreshold=<replaceable>period</replaceable></synopsis>

        <para>Maximum size of resync frame of the jitter buffer. Default:
        1000.</para>
      </listitem>

      <listitem>
        <synopsis>jbimpl=[fixed|adaptive]</synopsis>

        <para>Sets which jitter buffer algorithm will be used. Two options are
        currently recognized.:<itemizedlist>
            <listitem>
              <para><code>fixed</code></para>

              <para>(default) The classic jitter biffer with fixed size
              (always <code>jbmaxsize</code>).</para>
            </listitem>

            <listitem>
              <para><code>adaptive</code></para>

              <para>The new adaptive algorithm with variable buffer size (this
              is the same jitter buffer used natively in IAX2).</para>
            </listitem>
          </itemizedlist></para>
      </listitem>
    </itemizedlist>
  </section>

  <section id="sip.conf-channels">
    <title>Device-specific settings</title>

    <simpara>After the general, global settings, SIP endpoints are defined.
    These can be users, peers, or friends (friend is a combination of user and
    peer).</simpara>

    <simpara>In general, you can use the same settings allowed in <xref
    linkend="sip.conf-general" /> to set endpoint-specific parameters. This
    allows you to simplify administration by making a profile that applies to
    most endpoints but still allows exceptions.</simpara>

    <para>An endpoint section could look like this, for inbound
    calls:<programlisting>[sip-provider-in]
; for calls that come in through our SIP provider
; we don't know the caller ID of incoming calls
; so we use type=peer and match by hostname
type=peer
host=sip.provider.com
context=from-provider</programlisting>If the endpoint is for outbound calls
    only, it might look like this:<programlisting>[sip-provider-out]
type=peer                ; only outgoing calls
secret=mysterious
username=widgets       ; our user
fromuser=widgets       ; some SIP providers require this
host=sip.provider.com    ; hostname of provider (so we know where to send the call!)
port=5060               ; provider port
call-limit=5            ; limit calls to a maximum of 5 simultaneously</programlisting></para>

    <simpara>Note that not all parameters are appropriate for every endpoint
    type. More exotic parameters can be found in the sample
    <filename>sip.conf</filename>.</simpara>

    <itemizedlist>
      <listitem>
        <synopsis>type=[user|peer|friend]</synopsis>

        <para>The type of endpoint.<itemizedlist>
            <listitem>
              <para><code>user</code></para>

              <para>A device that connects with us to make calls (for example,
              a local telephone set).</para>
            </listitem>

            <listitem>
              <para><code>peer</code></para>

              <para>A device, addressed by hostname, with which we
              connect.</para>
            </listitem>

            <listitem>
              <para><code>friend</code></para>

              <para><code>user</code> and <code>peer</code> in one.</para>
            </listitem>
          </itemizedlist></para>
      </listitem>

      <listitem>
        <synopsis>context=<replaceable>context</replaceable></synopsis>

        <para>The context to use for incoming calls.</para>

        <programlisting>context=from-grommets</programlisting>
      </listitem>

      <listitem>
        <synopsis>secret=<replaceable>password</replaceable></synopsis>

        <para>Password for authentication; may be either the password we use
        to authenticate with a remote endpoint, or the password used by an
        endpoint to authenticate with us.</para>
      </listitem>

      <listitem>
        <synopsis>secret=<replaceable>password</replaceable></synopsis>

        <para>Password for authentication; may be either the password we use
        to authenticate with a remote endpoint, or the password used by an
        endpoint to authenticate with us.</para>
      </listitem>

      <listitem>
        <synopsis>username=<replaceable>username</replaceable></synopsis>

        <para>Our username/account name on a remote host.</para>
      </listitem>

      <listitem>
        <synopsis>fromuser=<replaceable>username</replaceable></synopsis>

        <para>Some SIP providers require this be set.</para>
      </listitem>

      <listitem>
        <synopsis>host=[<replaceable>hostname</replaceable>|dynamic]</synopsis>

        <para>The hostname or IP address of another host. Setting
        <code>dynamic</code> tells Asterisk to allow the host to register and
        provide its IP address at that time (frequently used together with
        <code>defaultip</code>). A host statement using a fully-qualified
        domain name might look like this:</para>

        <programlisting>host=siphost.provider.com</programlisting>
      </listitem>

      <listitem>
        <synopsis>defaultip=<replaceable>ip_address</replaceable></synopsis>

        <para>Valid for peer only: Asterisk attempts to connect with a dynamic
        host, which has not yet registered with us, at
        <replaceable>ip_address</replaceable>. In this example, the IP address
        is a private address:</para>

        <programlisting>defaultip=192.168.0.33</programlisting>
      </listitem>

      <listitem>
        <synopsis>port=<replaceable>port</replaceable></synopsis>

        <para>Port on a remote host to which we connect.</para>
      </listitem>

      <listitem>
        <synopsis>call-limit=<replaceable>number</replaceable></synopsis>

        <para>Limits the number of simultaneous calls with this endpoint (not
        for realtime peers!). In the case of <code>type=friend</code>,
        <code>call-limit=1</code> would mean one outgoing call and one
        incoming call, or one call for the <code>peer</code> and one call for
        the <code>user</code>.</para>
      </listitem>

      <listitem>
        <synopsis>callerid=<replaceable>firstname</replaceable> <replaceable>lastname</replaceable> &lt;<replaceable>number</replaceable>&gt;</synopsis>

        <para>Overwrites the caller ID sent by the endpoint (which is not
        always trustworthy). There is no need to enclose the parameters in
        quotation marks, as shown in this example:</para>

        <programlisting>callerid=Mick Fleetwood &lt;1234&gt;</programlisting>
      </listitem>

      <listitem>
        <synopsis>nat=[yes|no]</synopsis>

        <para>Tells Asterisk that this endpoint is on the other side of a NAT
        router.</para>
      </listitem>

      <listitem>
        <synopsis>mailbox=<replaceable>number</replaceable>[@<replaceable>context</replaceable>][,<replaceable>number</replaceable>[@<replaceable>context</replaceable>][,<replaceable>...</replaceable>]]</synopsis>

        <para>Specifies the voice mailbox for this user so that the Message
        Waiting Indicator (MWI) messages can be sent to the device --
        <emphasis>e.g.</emphasis> for a blinking LED indicating that messages
        are waiting. You may specify multiple mailboxes. This example shows
        only one:</para>

        <programlisting>mailbox=1234@default</programlisting>
      </listitem>

      <listitem>
        <synopsis>subscribemwi=[yes|no]</synopsis>

        <para>Only sends MWI messages (see <xref
        linkend="sip-channel-mailbox" />) if device requests it.</para>
      </listitem>

      <listitem>
        <synopsis>vmexten=<replaceable>extension</replaceable></synopsis>

        <para>Specifies the dialplan extension for calling the mailbox.
        Default: <code>asterisk</code> (preset in some SIP devices,
        <emphasis>e.g.</emphasis> Snom).</para>
      </listitem>

      <listitem>
        <para><synopsis>allow=[g723|gsm|ulaw|alaw|g726|adpcm|slin|lpc10|g729|speex|ilbc|g726_aal2|all]</synopsis></para>

        <para>Sets which audio codecs are available for SIP connections. You
        can have more than one allow statement. It is usually used along with
        disallow, as in this example:</para>

        <para><programlisting>; Example: allow all codecs except ilbc:
allow=all
disallow=ilbc</programlisting></para>
      </listitem>

      <listitem>
        <para><synopsis>disallow=[g723|gsm|ulaw|alaw|g726|adpcm|slin|lpc10|g729|speex|ilbc|g726_aal2|all]</synopsis></para>

        <para>Sets which audio codecs are available for SIP connections. It is
        usually used along with allow, as in this example:</para>

        <para><programlisting>; Example: allow only gsm and ulaw:
disallow=all
allow=gsm
allow=ulaw</programlisting></para>
      </listitem>

      <listitem>
        <synopsis>regexten=<replaceable>extension</replaceable></synopsis>

        <para>When the endpoint registers with Asterisk, it dynamically
        creates a priority, 1, with the command <command>NoOp()</command>, for
        the specified
        <emphasis><replaceable>extension</replaceable></emphasis> in the
        context defined by <code>regcontext</code> (see <xref
        linkend="sip-general-regcontext" />).</para>
      </listitem>

      <listitem>
        <synopsis>qualify=[yes|no|<replaceable>waittime</replaceable>]</synopsis>

        <para>Sends pings at regular intervals; if Asterisk does not receive a
        reply within the specified <replaceable>waittime</replaceable> in
        milliseconds (or, in the case of <code>yes</code>, the default wait
        time), it assumes the endpoint is unreachable.</para>
      </listitem>

      <listitem>
        <synopsis>callgroup=<replaceable>group(s)</replaceable></synopsis>

        <para>Specifies the call group for this endpoint. An endpoint may
        belong to more than one call group; in this case, you must
        comma-separate them, or use <code>-</code> to indicate a range. Here's
        an example to show you what a combination of the two would look
        like:</para>

        <programlisting>callgroup=2,4-7   ; this endpoint is in groups 2,4,5,6,7</programlisting>
      </listitem>

      <listitem>
        <synopsis>pickupgroup=<replaceable>group(s)</replaceable></synopsis>

        <para>Specifies the pickup-groups for the endpoint; determines for
        which pickup groups this endpoint can pickup calls. An endpoint may
        belong to more than one pickup group; in this case, you must
        comma-separate them, or use <code>-</code> to indicate a range. Here's
        an example to show you what a combination of the two would look
        like:</para>

        <programlisting>pickupgroup=2,4-6   ; Allow pickup for call groups 2,4,5,6</programlisting>
      </listitem>

      <listitem>
        <para>deny=network_address</para>

        <para>Controls which devices are allowed to attempt to register with
        the Asterisk server. Usually used with permit. The order is
        significant, as shown in this example:</para>

        <programlisting>; Only allow registration attempts from 192.168.0.*:
deny=0.0.0.0/0.0.0.0                ; deny everybody first
permit=192.168.0.0/255.255.255.0   ; allow 192.168.0.*</programlisting>
      </listitem>

      <listitem>
        <para>permit=network_address</para>

        <para>Controls which devices are allowed to attempt to register with
        the Asterisk server. Usually used with deny. The order is
        significant.</para>
      </listitem>

      <listitem>
        <synopsis>setvar=<replaceable>variable</replaceable>=<replaceable>value</replaceable></synopsis>

        <para>Set a channel variable for all calls from this endpoint. The
        statement will have two equal signs, as shown in this example.</para>

        <programlisting>setvar=CLIENTNO=1234</programlisting>
      </listitem>

      <listitem>
        <synopsis>rfc2833compensate=[yes|no]</synopsis>

        <para>As of Asterisk 1.4. Allows backwards compatible DTMF-detection
        for DTMF sent from older versions of Asterisk (pre 1.4).</para>
      </listitem>
    </itemizedlist>
  </section>
</section>
