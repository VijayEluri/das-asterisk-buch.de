<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
<chapter id="kapitel-datenbank" lang="de" revision="$Revision: 1784 $">
  <!--% Copyright (c) 2006 - Stefan Wintermeyer <sw@amooma.de>
% Permission is granted to copy, distribute and/or modify this document
% under the terms of the GNU Free Documentation License, Version 1.2
% or any later version published by the Free Software Foundation;
% with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
% Texts. A copy of the license is included in the section entitled "GNU
% Free Documentation License".
% Asterisk training and consulting is offered at http://www.amooma.de-->

  <title>The Asterisk Database (AstDB)</title>

  <indexterm>
    <primary>Database</primary>

    <secondary>AstDB</secondary>
  </indexterm>

  <para>The problem with using variables in the dialplan is that it is
  vulnerable to a system crash or a restart of Asterisk. If either of these
  things happen, the variable is either erased or reset to its default value.
  This limitation precludes certain implementations entirely. In call
  forwarding or a calling card application, some values (the remaining
  balance, for example) need to be stored in a persistent manner, so that they
  can be recalled after a restart. The Asterisk Database (AstDB) serves this
  purpose.</para>

  <section id="asterisk-datenbank">
    <title>The Asterisk Database</title>

    <indexterm>
      <primary>database</primary>

      <secondary>performance</secondary>
    </indexterm>

    <para>Those needing a database for Asterisk applications often ask how
    well the Asterisk database performs. The answer, to the extent there's a
    simple one, is that it depends on what you are doing. If you are working
    with small amounts of data, as you might in a redial or call forwarding
    scenario, then the AstDB performs admirably and you needn't look further.
    If you are working with large, complex datasets, you should consider
    whether an external SQL server would be better.</para>

    <para>In the overwhelming majority of applications, however, this
    discussion is purely theoretical. The Asterisk database is built on the
    Berkeley DB (BDB), which is already a very fast database engine. When
    handling key/value pairs, BDB is among the fastest of databases. The
    question of database choice should be raised, then, when speed of the
    database is proven to be the source of problems, or when you want to build
    a larger system with greater functionality than may be met by a simple
    key/value database.</para>

    <para>In a default installation, Asterisk comes packaged with a database
    built on the Berkeley DB (BDB).The Berkeley DB is a simple,
    high-performance embedded database library with APIs for C, C++, Java,
    Perl, Python, Tcl and many other programming languages. It stores
    key/value pairs and places no constraints on how data is stored in a
    record. It does not support SQL or any other query language and allows
    access only through in-process API calls. This database stores information
    in the form of key/value pairs, and keys are grouped into families.
    <warning>
        <para>Up to and including Asterisk Version 1.2, these applications
        were used for database access:</para>

        <itemizedlist>
          <listitem>
            <para><code>DBput(family/key=value)</code></para>

            <para>To save a value in the database</para>
          </listitem>

          <listitem>
            <para><code>DBget(var=family/key)</code></para>

            <para>To retrieve a value from the database. If the called key
            cannot be found, Asterisk jumps to priority 101 in the current
            extension.</para>
          </listitem>
        </itemizedlist>

        <para>These commands are no longer supported as of Asterisk 1.4. For
        this reason, only the new method, using the <code>DB()</code> function
        is mentioned here, which also works in 1.2.</para>
      </warning>Information in this database can be manipulated using the
    <code>DB()</code> function (see <xref linkend="functions-db" />).</para>

    <section id="datenbank-schreiben">
      <title>Writing values to the database</title>

      <para>The <code>DB()</code> function can be called from within the
      <code>Set()</code> application. To give the <code>apple</code> entry in
      the <code>fruit</code> family the value <code>20</code>, write the
      extension like so:<programlisting>exten =&gt; 1234,1,Set(DB(fruit/apple)=20)</programlisting></para>
    </section>

    <section id="datenbank-lesen">
      <title>Reading values from the database</title>

      <para>Values may be called from the database using <code>DB()</code> in
      the form <code>${DB(family/key)}</code>. To print the contents of
      <code>apple</code> in the <code>fruit</code> family on the console, use
      the following command:</para>

      <para><programlisting>[ccc]exten =&gt; 1234,1,NoOp(fruit/apple has the value ${DB(fruit/apple)})</programlisting><warning>
          <para>In all the code examples, everything is written on one line,
          without breaks, unless otherwise noted. The limited space for text
          requires that we wrap the lines in the book.</para>
        </warning></para>

      <para>You can also store the value from this database field in a
      variable using <code>Set()</code>:<programlisting>exten =&gt; 1234,1,Set(applequantity=${DB(fruit/apple)})</programlisting></para>
    </section>

    <section id="datenbank-loeschen">
      <title>Deleting values from the database</title>

      <para>The applications <code>DBdel()</code> and <code>DBdeltree()</code>
      are used to delete database entries.</para>

      <section id="datenbank-dbdel">
        <title>DBdel() and ${DB_DELETE()}</title>

        <para>In Asterisk 1.2, individual entries are deleted using
        <code>DBdel()</code>. Delete the key <code>apple</code> in the family
        <code>fruit</code> like so:<programlisting>exten =&gt; 1234,1,DBdel(fruit/apple)</programlisting></para>

        <para><code>DBdel()</code> is deprecated in Asterisk 1.4; use the
        <code>DB_DELETE()</code> function instead. This is called like
        so:<programlisting>exten =&gt; 1234,1,NoOp(${DB_DELETE(fruit/apple)})</programlisting>See
        also <xref linkend="applications-dbdel" /> and <xref
        linkend="functions-db_delete" />.</para>
      </section>

      <section id="datenbank-dbdeltree">
        <title>DBdeltree()</title>

        <para>If you need to delete an entire key family, use
        <code>DBdeltree()</code>. The <code>fruit</code> family is deleted
        like so:<programlisting>exten =&gt; 1234,1,DBdeltree(fruit)</programlisting></para>

        <para>See also: <xref linkend="applications-dbdeltree" /></para>
      </section>
    </section>
  </section>

  <section id="datenbank-via-cli">
    <title>Database access from the CLI</title>

    <indexterm>
      <primary>database</primary>

      <secondary>accessing from the CLI</secondary>
    </indexterm>

    <para>The system administrator can access the database from the
    command-line interface (CLI).<tip>
        <para>If you have trouble remembering a command or the exact syntax,
        you can get help at the CLI with <code>help database</code>:<screen>big-island*CLI&gt; help database
             database del  Removes database key/value
         database deltree  Removes database keytree/values
             database get  Gets database value
             database put  Adds/updates database value
            database show  Shows database contents
         database showkey  Shows database contents</screen></para>
      </tip></para>

    <para>For the following examples, remember that if your family, key or
    value contain any blank spaces, the entire name must be enclosed in double
    quotes (<code>"</code>)! For example: <code>database put test entry "Hello
    world"</code>.</para>

    <section id="datenbank-cli-schreiben">
      <title>Writing values to the database</title>

      <para>You write values to the database with <code>database put
      <replaceable>family</replaceable> <replaceable>key</replaceable>
      <replaceable>value</replaceable></code>:<screen>big-island*CLI&gt; <emphasis
            role="bold"><command>database put fruit apple 20</command></emphasis>
Updated database successfully</screen></para>
    </section>

    <section id="datenbank-cli-lesen">
      <title>Reading values from the database</title>

      <para>Read values from the database with <code>database get
      <replaceable>family</replaceable>
      <replaceable>key</replaceable></code>:<screen>big-island*CLI&gt; <emphasis
            role="bold"><command>database get fruit apple</command></emphasis>
Value: 20d*CLI&gt;</screen></para>
    </section>

    <section id="datenbank-cli-loeschen">
      <title>Deleting values from the database</title>

      <para><code>Both database del <replaceable>family</replaceable>
      <replaceable>key</replaceable></code> and <code>database deltree
      <replaceable>family</replaceable></code> delete values from the
      database.</para>

      <section id="datenbank-cli-del">
        <title>database del</title>

        <para>To delete only the key <code>apple</code> from the
        <code>fruit</code> family, use <code>database del</code>:<screen>big-island*CLI&gt; <emphasis
              role="bold"><command>database del fruit apple</command></emphasis>
Database entry removed.</screen></para>
      </section>

      <section id="datenbank-cli-deltree">
        <title>database deltree</title>

        <para>You can delete an entire key family with <code>database
        deltree</code>:<screen>big-island*CLI&gt; <emphasis role="bold"><command>database deltree fruit</command></emphasis>
Database entries removed.</screen></para>
      </section>
    </section>

    <section id="datenbank-cli-anzeigen">
      <title>Displaying database contents</title>

      <para>The commands <code>database show</code> and <code>database
      showkey</code> will display database contents in the CLI. For
      example:<screen>big-island*CLI&gt; <emphasis role="bold"><command>database put shoppinglist eggs 2</command></emphasis>
Updated database successfully
big-island*CLI&gt; database put shoppinglist butter 250
Updated database successfully
big-island*CLI&gt; database put shoppinglist sugar 500
Updated database successfully
big-island*CLI&gt; database show
/shoppinglist/butter                             : 250                      
/shoppinglist/eggs                               : 2                        
/shoppinglist/sugar                             : 500  
big-island*CLI&gt; database showkey butter
/shoppinglist/butter                             : 250
big-island*CLI&gt; database deltree shoppinglist
Database entries removed.</screen></para>
    </section>
  </section>

  <section id="datenbank-von-shell">
    <title>Database access from the system shell</title>

    <indexterm>
      <primary>database</primary>

      <secondary>access from shell</secondary>
    </indexterm>

    <para>Using the command <command>asterisk -rx
    '<replaceable>command</replaceable>'</command>, you can execute any CLI
    command via a shell script. The following example shows how a database is
    populated, read, and then finally deleted through external
    commands.<screen>big-island:~# <emphasis role="bold"><command>asterisk -rx 'database put test var1 23'</command></emphasis>
Updated database successfully
big-island:~# asterisk -rx 'database put test var2 42'
Updated database successfully
big-island:~# asterisk -rx 'database show test'
/test/var1                                        : 23                       
/test/var2                                        : 42                       
big-island:~# asterisk -rx 'database get test var2'
Value: 42
big-island:~# asterisk -rx 'database deltree test'
Database entries removed.</screen><important>
        <para>Remember that if the family, key or value contains any blank
        spaces, you must use double quotes (<code>"</code>) around the string!
        For example:<screen>big-island:~# <emphasis role="bold"><command>asterisk -rx 'database put test entry "Hello World"'</command></emphasis></screen></para>
      </important></para>
  </section>

  <section id="datenbank-backup">
    <title>Database backup</title>

    <indexterm>
      <primary>database</primary>

      <secondary>backup</secondary>
    </indexterm>

    <para>The Asterisk database is stored in
    <filename>/var/lib/asterisk/astdb/</filename> by default. You can copy
    that directory as long as Asterisk is stopped.</para>

    <para>You can also back up the database from the system shell during
    operation with command<programlisting>asterisk -rx "database show" &gt; /tmp/backup-asterisk-database.txt</programlisting>
    Of course, restoring the database is from this kind of backup is more
    difficult.</para>
  </section>

  <section id="section-callforwarding">
    <title>Application example: call forwarding</title>

    <indexterm>
      <primary>example</primary>

      <secondary>call forwarding</secondary>
    </indexterm>

    <para>Anybody who wants to have calls to her local passed on to her mobile
    phone when she's not in needs call forwarding. This can be achieved either
    through the local SIP phone or centrally through Asterisk. In practice, we
    prefer that latter approach, since it frees us from dependency on end
    device, which could be disconnected, fail, or be swapped with another. It
    also means that the call forwarding setting is not lost in the event of a
    power failure or system restart.</para>

    <section id="einfaches-callforwarding">
      <title>Simple call forwarding</title>

      <para>All the staff at Widgets Inc. are to be able to forward calls to
      their locals to any number they choose. To activate this forwarding, the
      internal extension 44, followed by the target number, is dialed. To
      deactivate this forwarding, 44 is dialed again (this time without a
      target number following it). You can implement this with the following
      dialplan (the text wraps in this code example, but remember that every
      extension must be entered on a single line!):</para>

      <programlisting>[from-internal]
; Call forwarding for a single extension
;
; activate
exten =&gt; _44X.,1,Answer()
exten =&gt; _44X.,n,Set(DB(CF/${CALLERID(num)})=${EXTEN:2})
exten =&gt; _44X.,n,SayDigits(${EXTEN:2})
[ccc]exten =&gt; _44X.,n,NoOp(Forwarding for ${CALLERID(num)} to ${EXTEN:2} activated.) 
exten =&gt; _44X.,n,Hangup()

; deactivate
exten =&gt; 44,1,Answer()
exten =&gt; 44,n,DBdel(CF/${CALLERID(num)})
exten =&gt; 44,n,Playback(auth-thankyou)
exten =&gt; 44,n,NoOp(Forwarding for ${CALLERID(num)} deactivated.) 
exten =&gt; 44,n,Hangup()

[from-external]
exten =&gt; _X.,1,NoOp(Call from ${CALLERID(num)} for ${EXTEN})
exten =&gt; _X.,n,GotoIf($[foo${DB(CF/${EXTEN})} != foo]?normal:forward)
[ccc]exten =&gt; _X.,n(normal),Dial(SIP/${EXTEN})
[ccc]exten =&gt; _X.,n(forward),NoOp(Call for ${EXTEN} is being connected to ${DB(CF/${EXTEN})})
exten =&gt; _X.,n,Dial(local/${DB(CF/${EXTEN})})</programlisting>
    </section>

    <section id="komplexes-callforwarding">
      <title>Complex call forwarding</title>

      <para>In this example, all the employees of Widgets Inc should be able
      to activate call forwarding; in addition, however, there must be global
      forwarding for the whole branch, so that calls can be forwarded to
      another branch when all the head office staff are away on a
      team-building exercise. This global forwarding is activated via
      extension 55 (followed by the destination number). The global forwarding
      must have a higher priority than the individual forwarding. One way to
      accomplish this is as shown below:<programlisting>[from-internal]
; Call forwarding for a single user
;
; activate
exten =&gt; _44X.,1,Answer()
exten =&gt; _44X.,n,Set(DB(CF/${CALLERID(num)})=${EXTEN:2})
exten =&gt; _44X.,n,SayDigits(${EXTEN:2})
[ccc]exten =&gt; _44X.,n,NoOp(Forwarding for ${CALLERID(num)} to ${EXTEN:2} activated.) 
exten =&gt; _44X.,n,Hangup()

; deactivate
exten =&gt; 44,1,Answer()
exten =&gt; 44,n,DBdel(CF/${CALLERID(num)})
exten =&gt; 44,n,Playback(auth-thankyou)
exten =&gt; 44,n,NoOp(Forwarding for ${CALLERID(num)} deactivated.)
exten =&gt; 44,n,Hangup()

; Global forwarding
;
; activate
exten =&gt; _55X.,1,Answer()
exten =&gt; _55X.,n,Set(DB(CF/system)=${EXTEN:2})
exten =&gt; _55X.,n,SayDigits(${EXTEN:2})
exten =&gt; _55X.,n,NoOp(System forwarding to ${EXTEN:2} activated.)
exten =&gt; _55X.,n,Hangup()

; deactivate
exten =&gt; 55,1,Answer()
exten =&gt; 55,n,DBdel(CF/system)
exten =&gt; 55,n,Playback(auth-thankyou)
exten =&gt; 55,n,NoOp(System forwarding deactivated.) 
exten =&gt; 55,n,Hangup()

[from-external]
exten =&gt; _X.,1,NoOp(Call from ${CALLERID(num)} for ${EXTEN})
[ccc]exten =&gt; _X.,n,GotoIf($[foo${DB(CF/system)} != foo]?cfsystem:secondrule)
[ccc]exten =&gt; _X.,n(secondrule),GotoIf($[foo${DB(CF/${EXTEN})} != foo]?cfnormal:normal)
exten =&gt; _X.,n(normal),Dial(SIP/${EXTEN})
[ccc]exten =&gt; _X.,n(cfnormal),NoOp(Call for ${EXTEN} is being connected to ${DB(CF/${EXTEN})})
exten =&gt; _X.,n,Dial(local/${DB(CF/${EXTEN})})
[ccc]exten =&gt; _X.,n(cfsystem),NoOp(Call for ${EXTEN} is being connected to  ${DB(CF/system)})
exten =&gt; _X.,n,Dial(local/${DB(CF/system)})
</programlisting></para>
    </section>
  </section>

  <section id="beispiel-callingcard">
    <title>Application example: calling card</title>

    <indexterm>
      <primary>example</primary>

      <secondary>calling card</secondary>
    </indexterm>

    <para>According to Widgets Inc policy, personal calls must be made via a
    virtual calling card. These <quote>cards</quote> are charged by the
    building manager via his phone (by calling extension 88, followed by the
    three digit user extension and then the desired cash amount in
    cents).<footnote>
        <para>To keep this example as simple as possible, we don't consider
        the case of a card with an existing balance to which more money is
        added (in other words, in which an addition operation is performed).
        We are also ignoring the very real possibility that an employee could
        make personal calls from someone else's extension.</para>
      </footnote> Such calls are billed at a per-call rate of one cent per
    call. To make a personal call, the user dials 99, followed by the number
    being called. Of course, we don't want anything to be deducted from the
    account in the event of a busy signal. Also, users may call up the account
    balance by dialing 98.<programlisting>[from-building-mgr]
; Charging the virtual calling card
;
exten =&gt; _88XXX.,1,Answer()
exten =&gt; _88XXX.,2,Set(DB(CallingCard/${EXTEN:2:3})=${EXTEN:5})
exten =&gt; _88XXX.,3,SayNumber(${EXTEN:5})
[ccc]exten =&gt; _88XXX.,4,NoOp(CallingCard for ${EXTEN:2:3} has a new balance of ${EXTEN:5} cents.)
exten =&gt; _88XXX.,5,Hangup()

[from-internal]
; personal calls
;
[ccc]exten =&gt; _99.,1,GotoIf($[${DB(CallingCard/${CALLERID(num)} &gt; 0]?2:200)
[ccc]exten =&gt; _99.,2,Set(DB(CallingCard/${CALLERID(num)})=$[DB(CallingCard/${CALLERID(num)}) - 1])
exten =&gt; _99.,3,Dial(local/${EXTEN:2})
[ccc]exten =&gt; _99.,104,Set(DB(CallingCard/${CALLERID(num)})=$[DB(CallingCard/${CALLERID(num)}) + 1])

[ccc]exten =&gt; _99.,200,NoOp(Calling card account ${CALLERID(num) is empty.)
exten =&gt; _99.,201,Answer()
exten =&gt; _99.,202,SayNumber(0)
exten =&gt; _99.,203,Hangup()

; The current account balance may be retrieved by dialing 98.
;
exten =&gt; 98,1,Answer()
exten =&gt; 98,2,SayNumber(${DB(CallingCard/${CALLERID(num)})})
exten =&gt; 98,3,Hangup()</programlisting></para>
  </section>
</chapter>
